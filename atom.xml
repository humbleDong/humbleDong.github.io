<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>七岁就很浪</title>
  
  <subtitle>道阻且长 行则将至</subtitle>
  <link href="https://humbledong.github.io/atom.xml" rel="self"/>
  
  <link href="https://humbledong.github.io/"/>
  <updated>2024-01-08T07:04:41.797Z</updated>
  <id>https://humbledong.github.io/</id>
  
  <author>
    <name>小东</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SpringBoot监控与报警</title>
    <link href="https://humbledong.github.io/undefined/32643233.html"/>
    <id>https://humbledong.github.io/undefined/32643233.html</id>
    <published>2023-10-28T06:14:20.000Z</published>
    <updated>2024-01-08T07:04:41.797Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot监控与报警"><a href="#SpringBoot监控与报警" class="headerlink" title="SpringBoot监控与报警"></a>SpringBoot监控与报警</h1><h2 id="Spring-Boot-Actuator概述"><a href="#Spring-Boot-Actuator概述" class="headerlink" title="Spring Boot  Actuator概述"></a>Spring Boot  Actuator概述</h2><p>启用SpringBoot Actuator功能，只需要添加其启动器依赖即可，如下面的依赖配置所示。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>具体导入的依赖如下：</p><p><img src="https://s2.loli.net/2023/12/14/HWModG6q4DvF21s.png" alt="image-20231214094922017"></p><p>它主要包含了micrometer相关依赖包和Actuator自动配置模块</p><h2 id="Endpoints（端点）"><a href="#Endpoints（端点）" class="headerlink" title="Endpoints（端点）"></a>Endpoints（端点）</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>Endpoint端点用来监控SpringBoot应用并与之交互，SpringBoot内置了许多端点，“开箱即用”，每个端点都可以通过Http或者JMX的方式暴露出去，但绝大多数情况下端点都是以HTTP方式暴露的，每个端点都会被映射为&#x2F;actuator&#x2F;${ID}方式，ID即端点的ID，比如健康端点为&#x2F;actuator&#x2F;health。</p><p>既然health端点是以HTTP方式暴露的，那么就可以通过HTTP来访问这个端点。</p><p><img src="https://s2.loli.net/2023/12/14/npmDIUoAOKTLrEj.png" alt="image-20231214095845257"></p><p>该端点返回了UP状态，表示应用为健康运行状态。</p><h3 id="内置端点"><a href="#内置端点" class="headerlink" title="内置端点"></a>内置端点</h3><p><img src="https://s2.loli.net/2023/12/14/AudH7E1LMxGzmDP.png" alt="image-20231214101235520"></p><p>Web应用的还添加了的内置端点：</p><p><img src="https://s2.loli.net/2023/12/14/TsJ5h3vUSyDWawI.png" alt="image-20231214101322372"></p><h3 id="启用端点"><a href="#启用端点" class="headerlink" title="启用端点"></a>启用端点</h3><p>除了shutdown端点，其他所有端点默认都是启用的，也可以启用或禁用某个端点，启用或禁用某个端点是通过management.endpoint.<id>.enable参数配置的，比如启用shutdown端点：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoint:</span></span><br><span class="line">    <span class="attr">shutdown:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>如果想一个个手动启用端点，则可以先禁用全部端点，再启用某个端点：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">enabled-by-default:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">endpoint:</span></span><br><span class="line">    <span class="attr">info:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>这里先禁用所有端点，然后只启用info端点</p><p>需要注意的是，被禁用的端点会完全从Spring上下文中删除，如果只想更改端点暴露的方式，那么可以使用include和excluede配置参数替代禁用端口的方式。</p><h3 id="暴露端点"><a href="#暴露端点" class="headerlink" title="暴露端点"></a>暴露端点</h3><p>端点被启用后，并不一定能够被访问，还要看端点是否被暴露，并且暴露的方式是怎么样的。因为端点可能包含敏感信息，所以需要谨慎暴露相关端点。</p><p>SpringBoot2.7默认以JMX暴露了所有端点，处于安全考虑，Web方式则只暴露了Health端点。</p><p>SpringBoot3开始默认JMX和HTTP都只暴露Health端点。更加严格和安全</p><p>暴露端点方式：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">jmx:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">health,info</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&quot;*&quot;</span></span><br><span class="line">        <span class="attr">exclude:</span> <span class="string">threadump</span></span><br></pre></td></tr></table></figure><p>这里配置了以JMX方式只暴露health和info端点，以web方式暴露除threadump以外的所有端点，两种暴露方式是独立的，不会互相影响各自暴露的端点，如果同一种暴露方式同时配置了include和exclude，则以exclude配置的优先。</p><h3 id="端点安全性"><a href="#端点安全性" class="headerlink" title="端点安全性"></a>端点安全性</h3><p>端点提供的信息可能涉及敏感性，所以除了谨慎暴露所需要的端点，还需要对端点进行安全保护，如提供对应的访问权限等等。</p><p>这里就要使用Spring Security配合使用了。只要由Spring Security类库依赖，SpringBoot就会自动保护所有接口，还包括除health健康端点外的所有端点，具体的实现见Actuator的ManagementWebSecurityAutoConfiguration自动配置类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AutoConfiguration(</span></span><br><span class="line"><span class="meta">    before = &#123;SecurityAutoConfiguration.class&#125;,</span></span><br><span class="line"><span class="meta">    after = &#123;HealthEndpointAutoConfiguration.class, InfoEndpointAutoConfiguration.class, WebEndpointAutoConfiguration.class, OAuth2ClientAutoConfiguration.class, OAuth2ResourceServerAutoConfiguration.class, Saml2RelyingPartyAutoConfiguration.class&#125;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication(</span></span><br><span class="line"><span class="meta">    type = Type.SERVLET</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="meta">@ConditionalOnDefaultWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ManagementWebSecurityAutoConfiguration</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ManagementWebSecurityAutoConfiguration</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Order(2147483642)</span></span><br><span class="line">    SecurityFilterChain <span class="title function_">managementSecurityFilterChain</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        http.authorizeHttpRequests((requests) -&gt; &#123;</span><br><span class="line">            ((AuthorizedUrl)requests.requestMatchers(<span class="keyword">new</span> <span class="title class_">RequestMatcher</span>[]&#123;EndpointRequest.to(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;HealthEndpoint.class&#125;)&#125;)).permitAll();</span><br><span class="line">            ((AuthorizedUrl)requests.anyRequest()).authenticated();</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">if</span> (ClassUtils.isPresent(<span class="string">&quot;org.springframework.web.servlet.DispatcherServlet&quot;</span>, (ClassLoader)<span class="literal">null</span>)) &#123;</span><br><span class="line">            http.cors(Customizer.withDefaults());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        http.formLogin(Customizer.withDefaults());</span><br><span class="line">        http.httpBasic(Customizer.withDefaults());</span><br><span class="line">        <span class="keyword">return</span> (SecurityFilterChain)http.build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>导入SpringSecurity启动器：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>应用重启后，再访问应用的&#x2F;actuator&#x2F;health端点</p><p><img src="https://s2.loli.net/2023/12/14/Jsl2ABZdUiPpDnm.png" alt="image-20231214104109954"></p><p>如果没有登录授权，则SpringBoot默认会跳到登录页面，需要输入默认的用户信息才能继续访问端点。</p><p>如果不想使用SpringBoot自动配置的默认机制，可以注册一个SecurityFilterChain实现自定义安全机制</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SecurityFilterChain <span class="title function_">securityFilterChain</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> http.authorizeHttpRequests((authorize) -&gt; &#123;</span><br><span class="line">                    authorize.requestMatchers(<span class="string">&quot;/&quot;</span>).permitAll()</span><br><span class="line">                            .requestMatchers(EndpointRequest.to(<span class="string">&quot;health&quot;</span>)).hasRole(<span class="string">&quot;ENDPOINT_ADMIN&quot;</span>)</span><br><span class="line">                            .requestMatchers(EndpointRequest.toAnyEndpoint()).permitAll();</span><br><span class="line">                &#125;)</span><br><span class="line">                <span class="comment">//                .csrf(csrf -&gt; csrf.disable())</span></span><br><span class="line">                .csrf(csrf -&gt; csrf.ignoringRequestMatchers(EndpointRequest.toAnyEndpoint()))</span><br><span class="line">                .formLogin(withDefaults())</span><br><span class="line">                .logout().logoutSuccessUrl(<span class="string">&quot;/&quot;</span>)</span><br><span class="line">                .and().build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">protected</span> UserDetailsService <span class="title function_">userDetailsService</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">InMemoryUserDetailsManager</span> <span class="variable">manager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InMemoryUserDetailsManager</span>();</span><br><span class="line">        manager.createUser(User.withUsername(<span class="string">&quot;test&quot;</span>).password(<span class="string">&quot;&#123;noop&#125;test&quot;</span>)</span><br><span class="line">                .roles(<span class="string">&quot;ENDPOINT_ADMIN&quot;</span>, <span class="string">&quot;ADMIN&quot;</span>, <span class="string">&quot;TEST&quot;</span>).build());</span><br><span class="line">        manager.createUser(User.withUsername(<span class="string">&quot;root&quot;</span>).password(<span class="string">&quot;&#123;noop&#125;root&quot;</span>)</span><br><span class="line">                .roles(<span class="string">&quot;ADMIN&quot;</span>).build());</span><br><span class="line">        <span class="keyword">return</span> manager;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>端点授权配置需要用到EndpointRequest类，这里配置了只有health需要ENDPOINT_ADMIN角色才可以访问，其他接口的URL和端点不需要授权都能正常访问</p><p>然后创建了两个授权用户，{noop}表示明文密码，只有test用户才拥有ENDPOINT_ADMIN角色，输入其他用户就会返回403错误。</p><h3 id="自定义端点映射"><a href="#自定义端点映射" class="headerlink" title="自定义端点映射"></a>自定义端点映射</h3><p>默认情况下通过&#x2F;actuator跟路径可以显示所有暴露出来的端点。</p><p><img src="https://s2.loli.net/2023/12/14/RJlxugZSNC9WX7k.png" alt="image-20231214105420296"></p><p>这样不是很安全，可以通过以下配置禁用：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>还可以更改默认的端点映射，因为默认的端点的URL前缀和端点ID所有人都知道，不是很安全，可以通过配置更改端点默认的前缀URL和端点ID：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">base-path:</span> <span class="string">/act</span></span><br><span class="line">      <span class="attr">path-mapping:</span> </span><br><span class="line">        <span class="attr">health:</span> <span class="string">hth</span></span><br></pre></td></tr></table></figure><p>这里把默认的端点前缀映射从&#x2F;actuator改为&#x2F;act，把health健康端点更名为hth</p><p>另外端点映射的IP地址和端口也可以更改，默认和Web应用共享一个Server，可以把端点Server独立出来：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">server:</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">8088</span></span><br><span class="line">    <span class="attr">address:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br></pre></td></tr></table></figure><p>adress和port是配套使用的，adress不是必需品。</p><p><img src="https://s2.loli.net/2023/12/14/TjzutBcfXF8M5lg.png" alt="image-20231214110743327"></p><p>这里就可以看到日志启动了两个Server这样应用的端口和端点管理端口分开了。既然分开了，那么管理端点的Server要开启HTTPS访问就需要通过自己的management.server.sll.*系列参数控制。</p><p>另外把Server端点改为<code>-1</code>还能禁止以HTTP的方式暴露所有端点，和以exclude方式排除暴露端点是一样的。</p><p>所以通过关闭显示所有端点的页面和更改默认的端点映射与端口，也能起到保护端点安全的目的。</p><h3 id="端点实现机制"><a href="#端点实现机制" class="headerlink" title="端点实现机制"></a>端点实现机制</h3><p>内置端点一旦启用，SpringBoot就会自动配置，比如health端点的自动配置类为HealthEndpointAutoConfiguration，源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AutoConfiguration</span></span><br><span class="line"><span class="meta">@ConditionalOnAvailableEndpoint(</span></span><br><span class="line"><span class="meta">    endpoint = HealthEndpoint.class</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(&#123;HealthEndpointProperties.class&#125;)</span></span><br><span class="line"><span class="meta">@Import(&#123;HealthEndpointConfiguration.class, ReactiveHealthEndpointConfiguration.class, HealthEndpointWebExtensionConfiguration.class, HealthEndpointReactiveWebExtensionConfiguration.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HealthEndpointAutoConfiguration</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HealthEndpointAutoConfiguration</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自动配置类是空的，其实是通过@Import注解导入了不同Web类型的端点配置类。</p><p>根据*.EndpointAutoConfiguration这个自动配置命名规则，可以很容易找到其他端点的自动配置类以及端点类，端点自动配置类都被注册到了新的配置文件中。</p><p>端点具体的实现类命名规则为*Endpoint，比如健康端点的实现类HealthEndpoint，部分源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Endpoint(</span></span><br><span class="line"><span class="meta">    id = &quot;health&quot;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HealthEndpoint</span> <span class="keyword">extends</span> <span class="title class_">HealthEndpointSupport</span>&lt;HealthContributor, HealthComponent&gt; &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">EndpointId</span> <span class="variable">ID</span> <span class="operator">=</span> EndpointId.of(<span class="string">&quot;health&quot;</span>);</span><br><span class="line">...</span><br><span class="line">    <span class="meta">@ReadOperation</span></span><br><span class="line">    <span class="keyword">public</span> HealthComponent <span class="title function_">health</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">HealthComponent</span> <span class="variable">health</span> <span class="operator">=</span> <span class="built_in">this</span>.health(ApiVersion.V3, EMPTY_PATH);</span><br><span class="line">        <span class="keyword">return</span> (HealthComponent)(health != <span class="literal">null</span> ? health : DEFAULT_HEALTH);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ReadOperation</span></span><br><span class="line">    <span class="keyword">public</span> HealthComponent <span class="title function_">healthForPath</span><span class="params">(<span class="meta">@Selector(match = Match.ALL_REMAINING)</span> String... path)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.health(ApiVersion.V3, path);</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>端点实现类通过一个@Endpoint注解修饰，并且需要注册为Spring中的Bean，在Web应用中支持JMX和Web两种暴露方式，也支持@JmxEndpoint和@WebEndpoint注解以不同的方式暴露，还可以通过@EndpointJmxExtension和@EndpointWebExtension注解扩展现有的端点。</p><p>通过在方法上定义不同的操作注解以实现不同HTTP方法与应用交互，支持的操作注解如下表：</p><table><thead><tr><th>操作注解</th><th>HTTP方法</th></tr></thead><tbody><tr><td>@ReadOperation</td><td>GET</td></tr><tr><td>@WriteOperation</td><td>POST</td></tr><tr><td>@DeleteOperation</td><td>DELETE</td></tr></tbody></table><p>如果Health端点中定义了两个@ReadOperation注解，说明这个端点只支持HTTP GET方法的请求，一个不带参数，另一个通过@Selector注解绑定Path路径上的参数</p><h3 id="自定义端点"><a href="#自定义端点" class="headerlink" title="自定义端点"></a>自定义端点</h3><p>了解的端点的视线机制，下面实现自定义的端点：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@WebEndpoint(id=&quot;test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestEndpoint</span> &#123;</span><br><span class="line">    <span class="meta">@ReadOperation</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getUser</span><span class="params">(<span class="meta">@Selector</span> Integer id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>(id,<span class="string">&quot;xiaodong&quot;</span>,<span class="number">18</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@WriteOperation</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">updateUser</span><span class="params">(<span class="type">int</span> id, <span class="meta">@Nullable</span> String name,<span class="meta">@Nullable</span> Integer age)</span>&#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> getUser(id);</span><br><span class="line">        user.setName(name);</span><br><span class="line">        user.setAge(age);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里创建了一个TestEndpoint端点类并通过@Component注册到Spring中，@WebEndpoint(id&#x3D;”test”)暴露了以HTTP方式访问，端点类提供了两个方法，用户获取用户信息和更新用户信息，端点ID为test。</p><p>由于@WebEndpoint等端点注解的enableByDefault参数默认是true，所以新建的端点默认是启用状态，不需要额外配置。虽然@WebEndpoint注解允许暴露为HTTP方式，但并未真正开启暴露，前面我们把Web方式暴露为<code>*</code>了，这里就不配置了。</p><p><img src="https://s2.loli.net/2023/12/14/k3McFYxwt1V9A2Z.png" alt="image-20231214114612932"></p><p>&#x2F;actuator&#x2F;test&#x2F;1后面的1是通过@Selector注解绑定到URL路径上的参数，默认只绑定单个参数，如果要绑定多个，则可以指定@Selector(match&#x3D;Match.ALL_REMAINNG)匹配路径上的所有参数。</p><p>如果发起一个POST请求，那么直接返回403错误，这是因为SpringBoot默认会开启CSRF（跨站请求伪造）保护机制，如果不是基于浏览器的应用，则建议关闭CSRF保护机制，关闭案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> SecurityFilterChain <span class="title function_">securityFilterChain</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="keyword">return</span> http.authorizeHttpRequests((authorize) -&gt; &#123;</span><br><span class="line">                authorize.requestMatchers(<span class="string">&quot;/&quot;</span>).permitAll()</span><br><span class="line">                        .requestMatchers(EndpointRequest.to(<span class="string">&quot;health&quot;</span>)).hasRole(<span class="string">&quot;ENDPOINT_ADMIN&quot;</span>)</span><br><span class="line">                        .requestMatchers(EndpointRequest.toAnyEndpoint()).permitAll();</span><br><span class="line">            &#125;)</span><br><span class="line">            .csrf(csrf -&gt; csrf.disable())</span><br><span class="line">            <span class="comment">//.csrf(csrf -&gt; csrf.ignoringRequestMatchers(EndpointRequest.toAnyEndpoint()))</span></span><br><span class="line">            .formLogin(withDefaults())</span><br><span class="line">            .logout().logoutSuccessUrl(<span class="string">&quot;/&quot;</span>)</span><br><span class="line">            .and().build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者只对端点映射关闭CSRF保护机制：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> SecurityFilterChain <span class="title function_">securityFilterChain</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="keyword">return</span> http.authorizeHttpRequests((authorize) -&gt; &#123;</span><br><span class="line">                authorize.requestMatchers(<span class="string">&quot;/&quot;</span>).permitAll()</span><br><span class="line">                        .requestMatchers(EndpointRequest.to(<span class="string">&quot;health&quot;</span>)).hasRole(<span class="string">&quot;ENDPOINT_ADMIN&quot;</span>)</span><br><span class="line">                        .requestMatchers(EndpointRequest.toAnyEndpoint()).permitAll();</span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="comment">//.csrf(csrf -&gt; csrf.disable())</span></span><br><span class="line">            .csrf(csrf -&gt; csrf.ignoringRequestMatchers(EndpointRequest.toAnyEndpoint()))</span><br><span class="line">            .formLogin(withDefaults())</span><br><span class="line">            .logout().logoutSuccessUrl(<span class="string">&quot;/&quot;</span>)</span><br><span class="line">            .and().build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关闭后再重启应用再用POST方法调用即可。</p><p>如果端点类操作方法定义了参数，则参数不能为空，否则返回400错误，通过在方法参数上加@NullAble注解就可以允许参数为空。</p><p>另外，端点也支持跨域调用。如以下跨域配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">cors:</span></span><br><span class="line">        <span class="attr">allowed-origins:</span> <span class="string">&quot;https:xxxx.com&quot;</span></span><br><span class="line">        <span class="attr">allowed-methods:</span> <span class="string">&quot;POST,GET&quot;</span></span><br></pre></td></tr></table></figure><p>这样就可以语序来自https:xxxx.com网站的POST,GET方法请求了，这两个也支持通配符*</p><h2 id="loggers（日志端点）"><a href="#loggers（日志端点）" class="headerlink" title="loggers（日志端点）"></a>loggers（日志端点）</h2><p>SpringBoot提供了一个loggers日志端点，对应的端点类LoggersEndpoint，核心源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Endpoint(</span></span><br><span class="line"><span class="meta">    id = &quot;loggers&quot;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="meta">@RegisterReflectionForBinding(&#123;LoggersEndpoint.GroupLoggerLevelsDescriptor.class, LoggersEndpoint.SingleLoggerLevelsDescriptor.class&#125;)</span></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ReadOperation</span></span><br><span class="line">    <span class="keyword">public</span> LoggersEndpoint.LoggersDescriptor <span class="title function_">loggers</span><span class="params">()</span> &#123;</span><br><span class="line">        Collection&lt;LoggerConfiguration&gt; configurations = <span class="built_in">this</span>.loggingSystem.getLoggerConfigurations();</span><br><span class="line">        <span class="keyword">return</span> configurations == <span class="literal">null</span> ? LoggersEndpoint.LoggersDescriptor.NONE : <span class="keyword">new</span> <span class="title class_">LoggersEndpoint</span>.LoggersDescriptor(<span class="built_in">this</span>.getLevels(), <span class="built_in">this</span>.getLoggers(configurations), <span class="built_in">this</span>.getGroups());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ReadOperation</span></span><br><span class="line">    <span class="keyword">public</span> LoggersEndpoint.LoggerLevelsDescriptor <span class="title function_">loggerLevels</span><span class="params">(<span class="meta">@Selector</span> String name)</span> &#123;</span><br><span class="line">        Assert.notNull(name, <span class="string">&quot;Name must not be null&quot;</span>);</span><br><span class="line">        <span class="type">LoggerGroup</span> <span class="variable">group</span> <span class="operator">=</span> <span class="built_in">this</span>.loggerGroups.get(name);</span><br><span class="line">        <span class="keyword">if</span> (group != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LoggersEndpoint</span>.GroupLoggerLevelsDescriptor(group.getConfiguredLevel(), group.getMembers());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">LoggerConfiguration</span> <span class="variable">configuration</span> <span class="operator">=</span> <span class="built_in">this</span>.loggingSystem.getLoggerConfiguration(name);</span><br><span class="line">            <span class="keyword">return</span> configuration != <span class="literal">null</span> ? <span class="keyword">new</span> <span class="title class_">LoggersEndpoint</span>.SingleLoggerLevelsDescriptor(configuration) : <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@WriteOperation</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configureLogLevel</span><span class="params">(<span class="meta">@Selector</span> String name, <span class="meta">@Nullable</span> LogLevel configuredLevel)</span> &#123;</span><br><span class="line">        Assert.notNull(name, <span class="string">&quot;Name must not be empty&quot;</span>);</span><br><span class="line">        <span class="type">LoggerGroup</span> <span class="variable">group</span> <span class="operator">=</span> <span class="built_in">this</span>.loggerGroups.get(name);</span><br><span class="line">        <span class="keyword">if</span> (group != <span class="literal">null</span> &amp;&amp; group.hasMembers()) &#123;</span><br><span class="line">            <span class="type">LoggingSystem</span> <span class="variable">var10002</span> <span class="operator">=</span> <span class="built_in">this</span>.loggingSystem;</span><br><span class="line">            Objects.requireNonNull(var10002);</span><br><span class="line">            group.configureLogLevel(configuredLevel, var10002::setLogLevel);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.loggingSystem.setLogLevel(name, configuredLevel);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>日志端点提供了两个读和一个写操作，可以查看正在运行的应用的日志级别设置，也可以动态调整某个包的日志级别，该端点默认不会暴露，需要自行暴露。</p><p>获取日志端点信息(GET):</p><p><img src="https://s2.loli.net/2023/12/14/NWym3ugQI2br6JH.png" alt="image-20231214142750095"></p><p>loggers日志端点支持设置的日志级别有 “OFF”,”ERROR”,”WARN”, “INFO”, “DEBUG”, “TRACE”,”null”（恢复默认设置）</p><p>loggers日志端点目前只能用来查看和更新包的日志级别，以及查看所有的日志分组，但不支持查看和更新复杂的日志配置。</p><h2 id="Observability（可观测性，Spring-Boot-3-0-）"><a href="#Observability（可观测性，Spring-Boot-3-0-）" class="headerlink" title="Observability（可观测性，Spring Boot 3.0+）"></a>Observability（可观测性，Spring Boot 3.0+）</h2><p>Observability（可观测性）是指从系统外部观测正在运行的系统内部的状态的能力。</p><p>Observability主要是由以下三大组件组成：</p><ul><li>Logging（日志记录）</li><li>Metrics（度量&#x2F;指标）</li><li>Traces（链路跟踪）</li></ul><p>日志就是指平常的日志输出，对于指标和跟踪，SpringBoot使用的是MicrometerObservability，如果要创建自己的Observation，则可以注入一个ObservationRegistry，并使用它添加对应的数据：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IndexObservation</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ObservationRegistry observationRegistry;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">observe</span><span class="params">()</span>&#123;</span><br><span class="line">        Observation.createNotStarted(<span class="string">&quot;indexObservation&quot;</span>,<span class="built_in">this</span>.observationRegistry)</span><br><span class="line">                .lowCardinalityKeyValue(<span class="string">&quot;area&quot;</span>,<span class="string">&quot;com&quot;</span>)</span><br><span class="line">                .highCardinalityKeyValue(<span class="string">&quot;userId&quot;</span>,<span class="string">&quot;10099&quot;</span>)</span><br><span class="line">                .observe(() -&gt;&#123;</span><br><span class="line">                    <span class="comment">//执行观测时的业务逻辑</span></span><br><span class="line">                    log.info(<span class="string">&quot;开始执行业务逻辑&quot;</span>);</span><br><span class="line">                &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>核心：</p><ul><li>createNotStarted：创建一个Observation，但不会马上启动观测</li><li>lowCardinalityKeyValue：指定低基数的标签，它们将被添加到Metrics和Traces中</li><li>highCardinalityKeyValue：指定高基数的标签，它将被添加到Traces中</li><li>observe：开始执行当前Observation观测，并传入一个Runnable线程用于执行业务逻辑。</li></ul><p>observe方法接收一个Runnable线程参数，源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">observe</span><span class="params">(Runnable runnable)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.start();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Observation.<span class="type">Scope</span> <span class="variable">scope</span> <span class="operator">=</span> <span class="built_in">this</span>.openScope();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            runnable.run();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var11) &#123;</span><br><span class="line">            <span class="keyword">if</span> (scope != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    scope.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Throwable var10) &#123;</span><br><span class="line">                    var11.addSuppressed(var10);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">throw</span> var11;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (scope != <span class="literal">null</span>) &#123;</span><br><span class="line">            scope.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable var12) &#123;</span><br><span class="line">        <span class="built_in">this</span>.error(var12);</span><br><span class="line">        <span class="keyword">throw</span> var12;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.stop();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>他主要由以下几个过程组成：</p><ul><li>打开Observation</li><li>打开一个scope</li><li>调用线程Runnable.run()方法</li><li>关闭scope</li><li>如果有错误，则向观测对象发出错误信号</li><li>停止Observation</li></ul><p>现在改造一下&#x2F;首页接口，让首页执行IndexObservation观测：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> IndexObservation indexObservation;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">index</span><span class="params">()</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;this is index page&quot;</span>);</span><br><span class="line">        indexObservation.observe();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index page&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注入IndexObservation并调用其indexObservation方法开始执行Observation观测，然后会记录首页观测到的相关标签数据，可以在链路跟踪中查找并且展示，具体效果见后续的Traces链路跟踪。</p><h2 id="Metrics（指标）"><a href="#Metrics（指标）" class="headerlink" title="Metrics（指标）"></a>Metrics（指标）</h2><h3 id="内置指标"><a href="#内置指标" class="headerlink" title="内置指标"></a>内置指标</h3><p>SpringBoot内置了各种技术的指标的实现，比如JVM、System、Tomcat、Logger、SpringMVC等，通过&#x2F;actuator&#x2F;metrics指标端点可以显示所有应用收集到的指标：</p><p><img src="https://s2.loli.net/2023/12/14/AGmYHI5wUCVyWFr.png" alt="image-20231214150341862"></p><p>此端点默认是不暴露的，需要自行暴露，另外可以通过&#x2F;actuator&#x2F;metrics&#x2F;xxx查看详细指标信息，比如通过&#x2F;actuator&#x2F;metrics&#x2F;jvm.memory.max路径查看JVM最大内存：</p><p><img src="https://s2.loli.net/2023/12/14/uvpzaB57FGjTPe9.png" alt="image-20231214150535730"></p><h3 id="自定义指标"><a href="#自定义指标" class="headerlink" title="自定义指标"></a>自定义指标</h3><p>如果SpringBoot提供的指标不符合要求，则可以通过注册多个MeterBinder实现多个自定义指标，比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MetricsConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MeterBinder <span class="title function_">initDate</span><span class="params">(Environment env)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (registry) -&gt; Gauge.builder(<span class="string">&quot;init.date&quot;</span>, <span class="built_in">this</span>::date).register(registry);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MeterBinder <span class="title function_">systemDate</span><span class="params">(Environment env)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (registry) -&gt; Gauge.builder(<span class="string">&quot;system.date&quot;</span>, <span class="built_in">this</span>::date).register(registry);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Number <span class="title function_">date</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2023.12</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里创建了两个指标，通过&#x2F;actuator&#x2F;metrics&#x2F;或者&#x2F;actuator&#x2F;prometheus端点可以验证指标是否被收集：</p><p><img src="https://s2.loli.net/2023/12/14/qDf6pLz3SVI2UNi.png" alt="image-20231214151544871"></p><p>然后获取该指标的信息：</p><p><img src="https://s2.loli.net/2023/12/14/hpNoYtE6DyZzB5a.png" alt="image-20231214151616330"></p><h2 id="Traces（链路跟踪，SpringBoot3-0-）"><a href="#Traces（链路跟踪，SpringBoot3-0-）" class="headerlink" title="Traces（链路跟踪，SpringBoot3.0+）"></a>Traces（链路跟踪，SpringBoot3.0+）</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><p>Spring Boot  Actuator为Micrometer Tracing提供了依赖管理和自动配置，Micrometer 是当前比较流行的跟踪类库门面，SpringBoot为以下Tracers链路跟踪解决方案提供了自动配置：</p><ul><li>使用OpenTelemetry结合Zipkin或者WaveFront</li><li>使用OpenZipkin Brave结合Zipkin或者WaveFront</li></ul><p>OpenTelemetry是 CNCF 的一个可观测性项目，旨在提供可观测性领域的标准化方案，解决观测数据的数据模型、采集、处理、导出等的标准化问题，提供与三方 vendor 无关的服务。</p><p>OpenZipkin是基于 Java 的分布式追踪系统，用于收集和查找来自分布式系统的数据。</p><h3 id="链路跟踪环境搭建（zipkin）"><a href="#链路跟踪环境搭建（zipkin）" class="headerlink" title="链路跟踪环境搭建（zipkin）"></a>链路跟踪环境搭建（zipkin）</h3><p>这里以Windows为例子：</p><p>下载地址：<a href="https://repo1.maven.org/maven2/io/zipkin/zipkin-server/">https://repo1.maven.org/maven2/io/zipkin/zipkin-server/</a></p><p>然后把下载好的jar包放到自己的目录下，进入IDE编辑器终端：</p><p>执行<code>java -jar 下载好的jar包</code></p><p><img src="https://s2.loli.net/2023/12/14/FCcmeNo2Bbr4SVv.png" alt="image-20231214154803014"></p><p>安装并运行Zipkin后访问<a href="http://127.0.0.1:9411/">http://127.0.0.1:9411/</a></p><p><img src="https://s2.loli.net/2023/12/14/EnubUcvtDTWAZ2y.png" alt="image-20231214154907780"></p><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--将micrometer Observation API桥接到OpenTelemetry--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.micrometer<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>micrometer-tracing-bridge-otel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--向ZipKin报告调用链路跟踪信息--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.opentelemetry<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>opentelemetry-exporter-zipkin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>添加采样参数：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">tracing:</span></span><br><span class="line">    <span class="attr">sampling:</span></span><br><span class="line">      <span class="attr">probability:</span> <span class="number">1.0</span></span><br></pre></td></tr></table></figure><p>默认情况下，SpringBoot仅对10%的请求进行采样（0.1），以防止Traces跟踪导致后端系统不堪重负，这里为了便于测试，将采样参数设置为1.0即100%，对所有请求都采样</p><p>如果需要在日志中展示TraceID和SpanID，可以这样设置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">pattern:</span></span><br><span class="line">    <span class="attr">level:</span> <span class="string">$&#123;spring.application.name:&#125;,%X&#123;traceId:-&#125;,%X&#123;spanId:-&#125;</span></span><br></pre></td></tr></table></figure><ul><li>traceId：链路跟踪ID，一次请求完整链路的唯一标识，由一组Span单元组成的一个树状结构。</li><li>spanId：基本工作单元ID，每条链路都有不同的SpanID组成。</li></ul><h3 id="链路跟踪-x2F-展示"><a href="#链路跟踪-x2F-展示" class="headerlink" title="链路跟踪&#x2F;展示"></a>链路跟踪&#x2F;展示</h3><p>链路跟踪环境搭建好及Zipkin启动之后，再启动应用，并发起HTTP接口调用，SpringBoot会为HTTP请求创建一个Observation观测，它桥接到OpenTelemetry，然后通过OpenTelemetry向Zipkin报告每个链路的跟踪数据。</p><p>再Observability可观性中，已经为首页实现了自定义的IndexObservation观测并记录了相关标签数据，现在调用<a href="http://localhost/%E6%8E%A5%E5%8F%A3%E3%80%82">http://localhost/接口。</a></p><p>Zipkin：</p><p><img src="https://s2.loli.net/2023/12/14/fo3BIQmJnzuTKwe.png" alt="image-20231214160725135"></p><p>可以看到三此请求的链路，随便点击一条进入详细链路：</p><p><img src="https://s2.loli.net/2023/12/14/qMHtxI71dLKOfYk.png" alt="image-20231214160851168"></p><p>可以看到首页观测记录及携带的area和userId标签数据，后台也记录了调用链路跟踪日志：</p><p><img src="https://s2.loli.net/2023/12/14/RCENyZ4GWglm3L7.png" alt="image-20231214160954685"></p><p>可以看到一条链路输出了两条日志，也就是在&#x2F;首页方法中输出的两条日志，其中TraceID相同，SpanID不同</p><h2 id="Spring-Boot-Admin"><a href="#Spring-Boot-Admin" class="headerlink" title="Spring Boot Admin"></a>Spring Boot Admin</h2><h3 id="概述-2"><a href="#概述-2" class="headerlink" title="概述"></a>概述</h3><p>Spring Boot Admin&#x3D;Spring Boot+Admin，用于管理和监控SpringBoot应用，它并不是Spring Boot官方提供的，而是某个社区开源的。</p><p><a href="https://docs.spring-boot-admin.com/current/">Spring Boot Admin – (spring-boot-admin.com)</a></p><p>开源官网显示SpringBootAdmin的主要功能如下：</p><ul><li>显示应用程序的监控状态</li><li>应用程序上下线监控</li><li>查看 JVM，线程信息</li><li>可视化的查看日志以及下载日志文件</li><li>动态切换日志级别</li><li>Http 请求信息跟踪</li><li>其他功能点……</li></ul><p>Spring Boot Admin 包括Spring Boot Admin Server和Spring Boot Admin Client，Spring Boot Admin Client即SpringBoot应用，以HTTP的方式向Spring Boot Admin Server注册，Spring Cloud应用则通过Eureka，Consul等注册中心进行注册，Spring Boot Admin UI只是基于Spring Boot Acturator端点之上的Vue.js应用。</p><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>SpringBoot集成Spring Boot Admin需要先搭建Spring Boot Admin Server，再搭建Spring Boot Admin Client，Spring Boot Admin Server用于收集Spring Boot Admin Client的健康数据并进行监控报警。</p><h4 id="1-搭建Spring-Boot-Admin-Server"><a href="#1-搭建Spring-Boot-Admin-Server" class="headerlink" title="1.搭建Spring Boot Admin Server"></a>1.搭建Spring Boot Admin Server</h4><p>导入依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring-boot-admin-starter-server.version</span>&gt;</span>3.0.2<span class="tag">&lt;/<span class="name">spring-boot-admin-starter-server.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>de.codecentric<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-admin-starter-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-boot-admin-starter-server.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--还需要Web模块，这里在总的pom中就不引入了--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在启动类上添@EnableAdminServer注解以启用Spring Boot Admin Server：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableAdminServer</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringBootAdminServerApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(SpringBootAdminServerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>application.yaml:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8088</span></span><br></pre></td></tr></table></figure><h4 id="2-搭建Spring-Boot-Admin-Client"><a href="#2-搭建Spring-Boot-Admin-Client" class="headerlink" title="2.搭建Spring Boot Admin Client"></a>2.搭建Spring Boot Admin Client</h4><p>导入依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring-boot-admin-starter-client.version</span>&gt;</span>3.0.2<span class="tag">&lt;/<span class="name">spring-boot-admin-starter-client.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>de.codecentric<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-admin-starter-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-boot-admin-starter-client.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后添加以下配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">boot:</span></span><br><span class="line">    <span class="attr">admin:</span></span><br><span class="line">      <span class="attr">client:</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">http://localhost:8088</span> <span class="comment">#1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&#x27;*&#x27;</span> <span class="comment">#2</span></span><br><span class="line">  <span class="attr">info:</span></span><br><span class="line">    <span class="attr">env:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span>  <span class="comment">#3</span></span><br></pre></td></tr></table></figure><p>核心参数说明如下：</p><ul><li>#1：指定需要注册的SpringBootAdminServer地址</li><li>#2：SpringBoot3.0开始默认只暴露Health健康端点，这里全部暴露了，在生产环境中需谨慎选择</li><li>#3：env的信息默认是禁用的，这里开启</li></ul><p>然后禁用所有安全机制，让Actuator所有端点都可以被访问，配置如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityPermitAllConfig</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SecurityFilterChain <span class="title function_">securityFilterChain</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> http.authorizeHttpRequests((authorize) -&gt; &#123;</span><br><span class="line">            authorize.anyRequest().permitAll();</span><br><span class="line">        &#125;).csrf().disable().build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里为了测试，先禁用了所有安全措施，确保所有端点都可以被访问，不然无法被监控到，实际项目中可自行设置安全性。</p><p>application.yaml:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">boot:</span></span><br><span class="line">    <span class="attr">admin:</span></span><br><span class="line">      <span class="attr">client:</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">http://localhost:8088</span> <span class="comment">#1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&#x27;*&#x27;</span> <span class="comment">#2</span></span><br><span class="line">  <span class="attr">info:</span></span><br><span class="line">    <span class="attr">env:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span>  <span class="comment">#3</span></span><br></pre></td></tr></table></figure><p>项目配置完毕后，先启动服务端Server，在启动客户端Client即可。</p><h4 id="3-监控页面"><a href="#3-监控页面" class="headerlink" title="3.监控页面"></a>3.监控页面</h4><p>打开Spring Boot Admin Server控制台：<a href="http://localhost:8088/">http://localhost:8088/</a></p><h5 id="首页菜单"><a href="#首页菜单" class="headerlink" title="首页菜单"></a>首页菜单</h5><p><img src="https://s2.loli.net/2023/12/14/hNASy27HjYm8Q5o.png" alt="image-20231214174219488"></p><p>服务端和客户端都运行成功了，单击对应的项目，可以看到更多的细节。</p><h5 id="细节菜单"><a href="#细节菜单" class="headerlink" title="细节菜单"></a>细节菜单</h5><p><img src="https://s2.loli.net/2023/12/14/FqO5jiV6Wm1wtSQ.png" alt="image-20231214174534772"></p><p>细节菜单中展示了一些健康、JVM相关信息，这些信息有助于开发者掌握应用的JVM健康状况。</p><h5 id="性能菜单"><a href="#性能菜单" class="headerlink" title="性能菜单"></a>性能菜单</h5><p><img src="https://s2.loli.net/2023/12/14/umay5tfxPAJYobM.png" alt="image-20231214175310671"></p><h5 id="环境菜单"><a href="#环境菜单" class="headerlink" title="环境菜单"></a>环境菜单</h5><p><img src="https://s2.loli.net/2023/12/14/68V5FHeMOlh14zx.png" alt="image-20231214175356934"></p><h5 id="类菜单"><a href="#类菜单" class="headerlink" title="类菜单"></a>类菜单</h5><p>类菜单中有所有Spring容器中的Bean，以及是否是单例</p><p><img src="https://s2.loli.net/2023/12/14/HARgKNdZo8fcG25.png" alt="image-20231214175429917"></p><h5 id="配置属性菜单"><a href="#配置属性菜单" class="headerlink" title="配置属性菜单"></a>配置属性菜单</h5><p>配置属性菜单显示所有SpringBoot的配置参数</p><p><img src="https://s2.loli.net/2023/12/14/SlWcnOf45mUQF2e.png" alt="image-20231214175454841"></p><h5 id="计划任务菜单"><a href="#计划任务菜单" class="headerlink" title="计划任务菜单"></a>计划任务菜单</h5><p>现在去写一个计划任务重新启动一下客户端：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@EnableScheduling</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringBootAdminClientApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(SpringBootAdminClientApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;0/10 * * * * ?&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">task</span><span class="params">()</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;我是一个每十秒执行的任务，用来查看计划任务菜单&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/12/14/byECV9ItFr6Yq4w.png" alt="image-20231214175852566"></p><p>这里只能展示任务信息及状态，不可以进行控制。</p><h5 id="日志配置菜单"><a href="#日志配置菜单" class="headerlink" title="日志配置菜单"></a>日志配置菜单</h5><p>日志配置菜单中显示所有类的日志级别，并能修改某个类的日志级别</p><p><img src="https://s2.loli.net/2023/12/14/q5h4DvfHAriQpZV.png" alt="image-20231214175924901"></p><p>默认情况下，日志文件无法通过日志端点访问，需要在客户端应用配置logging.file，path或者logging.file.name参数来启用logfile端点。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">file:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">./logs/admin-client.log</span></span><br></pre></td></tr></table></figure><p>再重启应用就可以看到日志文件的内容了。</p><h5 id="JVM菜单"><a href="#JVM菜单" class="headerlink" title="JVM菜单"></a>JVM菜单</h5><p>JVM菜单可以显示当前所有线程堆栈、堆栈，并能进行下载分析。</p><p><img src="https://s2.loli.net/2023/12/14/d7VZT3UJPROXy6W.png" alt="image-20231214180359274"></p><p><img src="https://s2.loli.net/2023/12/14/SwymbatVzHghDYc.png" alt="image-20231214180512601"></p><h5 id="映射菜单"><a href="#映射菜单" class="headerlink" title="映射菜单"></a>映射菜单</h5><p>可以显示所有URL映射</p><p><img src="https://s2.loli.net/2023/12/14/KU91GktguHJwzCc.png" alt="image-20231214180602294"></p><h5 id="缓存菜单"><a href="#缓存菜单" class="headerlink" title="缓存菜单"></a>缓存菜单</h5><p>显示所有缓存</p><p><img src="https://s2.loli.net/2023/12/14/aszD7XOof6KPQGE.png" alt="image-20231214180636638"></p><p>这里不仅可以展示，还可以清除和管理缓存。</p><p>SpringBootAdmin用于管理和监控SpringBoot应用，具体就是通过客户端暴露的各种&#x2F;actuatar端点和指标实现的，并在此基础上进行了一些包装和UI展示</p><h4 id="4-监控报警"><a href="#4-监控报警" class="headerlink" title="4.监控报警"></a>4.监控报警</h4><h5 id="浏览器通知"><a href="#浏览器通知" class="headerlink" title="浏览器通知"></a>浏览器通知</h5><p>现在把客户端停掉，若干秒后页面会自动刷新</p><p><img src="https://s2.loli.net/2023/12/14/Krvj6xMXROl5fde.png" alt="image-20231214181237748"></p><p>离线实例显示1，应用出现在离线实例中了，如果浏览器没有禁用通知，那么同时会发出应用上线&#x2F;下线的通知（我这里是禁用了的）</p><p>在AdminServerAutoConfiguration自动配置类中注册了一个状态变更触发器，源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean(</span></span><br><span class="line"><span class="meta">    initMethod = &quot;start&quot;,</span></span><br><span class="line"><span class="meta">    destroyMethod = &quot;stop&quot;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line"><span class="keyword">public</span> StatusUpdateTrigger <span class="title function_">statusUpdateTrigger</span><span class="params">(StatusUpdater statusUpdater, Publisher&lt;InstanceEvent&gt; events)</span> &#123;</span><br><span class="line">    <span class="type">StatusUpdateTrigger</span> <span class="variable">trigger</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StatusUpdateTrigger</span>(statusUpdater, events);</span><br><span class="line">    trigger.setInterval(<span class="built_in">this</span>.adminServerProperties.getMonitor().getStatusInterval());</span><br><span class="line">    trigger.setLifetime(<span class="built_in">this</span>.adminServerProperties.getMonitor().getStatusLifetime());</span><br><span class="line">    <span class="keyword">return</span> trigger;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>默认每10秒会检测一下实例的状态，如果需要修改检测时间间隔，那么可以参考AdminServerProperties和MonitorProperties参数配置类进行配置。</p><h5 id="邮件通知"><a href="#邮件通知" class="headerlink" title="邮件通知"></a>邮件通知</h5><p>在Spring Boot Admin Server项目中导入spring boot starter -mail邮件启动器：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-mail<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置JavaMainSender及收件人信息：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mail:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">smtp.qq.com</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">135xxx@qq.com</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">xxxxx</span></span><br><span class="line">    <span class="attr">properties:</span></span><br><span class="line">      <span class="string">&quot;[mail.smtp.socketFactory.class]&quot;</span><span class="string">:</span> <span class="string">javax.net.ssl.SSLSocketFactory</span></span><br><span class="line">      <span class="string">&quot;[mail.smtp.socketFactory.fallback]&quot;</span><span class="string">:</span> <span class="literal">false</span></span><br><span class="line">      <span class="string">&quot;[mail.smtp.socketFactory.port]&quot;</span><span class="string">:</span> <span class="number">465</span></span><br><span class="line">      <span class="string">&quot;[mail.smtp.connectiontimeout]&quot;</span><span class="string">:</span> <span class="number">5000</span></span><br><span class="line">      <span class="string">&quot;[mail.smtp.timeout]&quot;</span><span class="string">:</span> <span class="number">3000</span></span><br><span class="line">      <span class="string">&quot;[mail.smtp.writetimeout]&quot;</span><span class="string">:</span> <span class="number">5000</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">boot:</span></span><br><span class="line">    <span class="attr">admin:</span></span><br><span class="line">      <span class="attr">notify:</span></span><br><span class="line">        <span class="attr">mail:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">from:</span> <span class="string">Spring</span> <span class="string">Boot</span> <span class="string">Admin</span> <span class="string">&lt;13xxx@qq.com&gt;</span> <span class="comment">#发件人</span></span><br><span class="line">          <span class="attr">to:</span> <span class="string">31xxx@qq.com</span> <span class="comment">#收件人</span></span><br><span class="line">          <span class="attr">cc:</span> <span class="string">13xxx@qq.com</span> <span class="comment">#抄送人</span></span><br></pre></td></tr></table></figure><p>简单配置好了发件人、收件人和抄送人后，即可尝试去启动Server和Client，Client退出后等待邮箱消息：</p><p>从服务端的控制台可以看到服务端无法连接到客户端应用的异常日志：</p><p><img src="/./image/image-20231215100640521.png" alt="image-20231215100640521"></p><p>邮件也会收到这样的内容</p><p><img src="https://s2.loli.net/2023/12/15/Zh6fyO3VoWTg5Fn.png" alt="image-20231215095932680"></p><p>从邮件的内容中可以看到应用实例下线的相关信息，为了防止敏感信息泄露，内置的默认邮件模版不会实例任何元数据信息，如果有需要，则可以自定义Thymeleaf模版。</p><p>更多的配置信息可以参考AdminServerNotifierAutoConfiguration#mailNotifier注册的MailNotifier实例，源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(&quot;spring.boot.admin.notify.mail&quot;)</span></span><br><span class="line"><span class="keyword">public</span> MailNotifier <span class="title function_">mailNotifier</span><span class="params">(JavaMailSender mailSender, InstanceRepository repository, TemplateEngine mailNotifierTemplateEngine)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MailNotifier</span>(mailSender, repository, mailNotifierTemplateEngine);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MailNotifier类源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MailNotifier</span> <span class="keyword">extends</span> <span class="title class_">AbstractStatusChangeNotifier</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> JavaMailSender mailSender;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> TemplateEngine templateEngine;</span><br><span class="line">    <span class="keyword">private</span> String[] to = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;root@localhost&quot;</span>&#125;;</span><br><span class="line">    <span class="keyword">private</span> String[] cc = <span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">from</span> <span class="operator">=</span> <span class="string">&quot;Spring Boot Admin &lt;noreply@localhost&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Object&gt; additionalProperties = <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="keyword">private</span> String baseUrl;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">template</span> <span class="operator">=</span> <span class="string">&quot;classpath:/META-INF/spring-boot-admin-server/mail/status-changed.html&quot;</span>;</span><br><span class="line"> ....   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>源码中可所有的显示参数都是可以配置的，可以看到邮件通知默认使用的是SpringBootAdmin内置的Thymeleaf模版：</p><p><img src="https://s2.loli.net/2023/12/15/4j2X3rbfBQcygsF.png" alt="image-20231215100514750"></p><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p>Spring Boot Admin 监控功能很简单，只能监控应用的状态，，而不能监控中间件的健康状况，所以不能替代专业的监控系统(比如：Prometheus+Grafana监控系统组合)，但至少Spring Boot Admin 足够轻量级，只需要启动一个服务端应用，而不需要太多复杂的组件，所以，对于那些简单的SpringBoot应用还是够用。</p><h2 id="Prometheus-Grafana"><a href="#Prometheus-Grafana" class="headerlink" title="Prometheus+Grafana"></a>Prometheus+Grafana</h2><p>暂时缺少Linux环境</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;SpringBoot监控与报警&quot;&gt;&lt;a href=&quot;#SpringBoot监控与报警&quot; class=&quot;headerlink&quot; title=&quot;SpringBoot监控与报警&quot;&gt;&lt;/a&gt;SpringBoot监控与报警&lt;/h1&gt;&lt;h2 id=&quot;Spring-Boot-A</summary>
      
    
    
    
    <category term="SpringBoot3" scheme="https://humbledong.github.io/categories/SpringBoot3/"/>
    
    
    <category term="SpringBoot3" scheme="https://humbledong.github.io/tags/SpringBoot3/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot打包与部署</title>
    <link href="https://humbledong.github.io/undefined/5d2d95e5.html"/>
    <id>https://humbledong.github.io/undefined/5d2d95e5.html</id>
    <published>2023-10-25T06:14:20.000Z</published>
    <updated>2024-01-08T07:04:41.794Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot打包与部署"><a href="#SpringBoot打包与部署" class="headerlink" title="SpringBoot打包与部署"></a>SpringBoot打包与部署</h1><h2 id="应用打包-jar"><a href="#应用打包-jar" class="headerlink" title="应用打包(jar)"></a>应用打包(jar)</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>传统的Java应用都需要打一个war包，然后把它部署到tomcat&#x2F;webapps目录下运行，虽然Java支持应用打成jar包，但它并没有提供一个标准的方式把工程代码打包成可执行的JavaWeb应用，因为它没有提供内置的Servlet容器。</p><p>有了SpringBoot框架之后，这一切都变得简单，开发者可以很方便地将SpringBoot应用打成一个可执行的jar包部署，同时支持打成war包部署，但SpringBoot首推以jar的形式打包和发布应用，因为使用jar包部署比较灵活，方便快速启动和扩容。</p><h3 id="快速打包"><a href="#快速打包" class="headerlink" title="快速打包"></a>快速打包</h3><p>基于Maven的应用，如果不指定packaging属性，那么默认就是jar打包方式，如下配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br></pre></td></tr></table></figure><p>packaging默认就是jar类型，可以省略不用指定。另外还需要引入spring-boot-maven-plugin打包插件如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后使用mvn package或者mvn install命令打包，如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ mvn package</span><br><span class="line">$ mvn install</span><br></pre></td></tr></table></figure><p>两个命令二选一即可，前者package是只打包到应用目录的target目录下，后者install是同时打包到应用的target目录并安装到本地Maven仓库中，如果是打包可执行的应用，则建议使用package命令。</p><p>在开发者工具中可以省略mvn命令的前缀。</p><p>打包命令一般可以结合clean使用，即先清理之前的包再打包新的包，执行打包命令后会在当前应用target目录下生成jar包：</p><p><img src="https://s2.loli.net/2023/12/13/wtCfs3d9x41iKR8.png" alt="image-20231213103722633"></p><p>可以通过直接运行jar包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ java -jar spring-boot-starter-0.0.1-SNAPASHOT.jar</span><br></pre></td></tr></table></figure><p>这个jar包包括了所有编译完的class类文件，还内置了Servlet容器，以及所有需要依赖的其他jar包等，这个jar包目录结构如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">|---BOOT-INF</span><br><span class="line">| |__ classes </span><br><span class="line">| |  |__com </span><br><span class="line">| |    |__ldd</span><br><span class="line">| |</span><br><span class="line">| |__lib</span><br><span class="line">|</span><br><span class="line">|---META-INF</span><br><span class="line">| | </span><br><span class="line">| |__maevn</span><br><span class="line">|   |__com.ldd</span><br><span class="line">|     |__spring-boot-<span class="keyword">package</span></span><br><span class="line">|</span><br><span class="line">|---org</span><br><span class="line">| |__springframeword</span><br><span class="line">|   |__boot</span><br><span class="line">|     |__loader</span><br><span class="line">|       |__archive</span><br><span class="line">|       |__data</span><br><span class="line">|       |__jar</span><br><span class="line">|       |__util</span><br></pre></td></tr></table></figure><p>在META-INF目录下可以找到MANIFEST.MF描述文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Manifest-Version: <span class="number">1.0</span></span><br><span class="line">Created-By: Maven JAR Plugin <span class="number">3.3</span><span class="number">.0</span></span><br><span class="line">Build-Jdk-Spec: <span class="number">17</span></span><br><span class="line">Implementation-Title: ldd-spring-boot-starter</span><br><span class="line">Implementation-Version: <span class="number">0.0</span><span class="number">.1</span>-SNAPSHOT</span><br><span class="line">Main-Class: org.springframework.boot.loader.launch.JarLauncher</span><br><span class="line">Start-Class: com.ldd.LddSpringBootStarterApplication</span><br><span class="line">Spring-Boot-Version: <span class="number">3.2</span><span class="number">.0</span></span><br><span class="line">Spring-Boot-Classes: BOOT-INF/classes/</span><br><span class="line">Spring-Boot-Lib: BOOT-INF/lib/</span><br><span class="line">Spring-Boot-Classpath-Index: BOOT-INF/classpath.idx</span><br><span class="line">Spring-Boot-Layers-Index: BOOT-INF/layers.idx</span><br></pre></td></tr></table></figure><p>它包含了一个jar包的相关信息，从中就可以找到应用的引导类和启动类，这个在SpringBoot启动过程中有描述</p><p>第二个jar包时包含了所有代码和资源文件的普通jar包</p><p>MANIFEST.MF：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Manifest-Version: <span class="number">1.0</span></span><br><span class="line">Created-By: Maven JAR Plugin <span class="number">3.3</span><span class="number">.0</span></span><br><span class="line">Build-Jdk-Spec: <span class="number">17</span></span><br><span class="line">Implementation-Title: ldd-spring-boot-starter</span><br><span class="line">Implementation-Version: <span class="number">0.0</span><span class="number">.1</span>-SNAPSHOT</span><br></pre></td></tr></table></figure><p>它没有包含应用启动入口类，只是作为一个普通的jar包存在，不能使用java命令运行，一般作为依赖被传递到其他应用中。不是所有SpringBoot应用都需要部署运行，比如一些通用模块的应用，他们只是作为普通jar包集成到可执行jar包中使用而已。</p><h3 id="自定义打包"><a href="#自定义打包" class="headerlink" title="自定义打包"></a>自定义打包</h3><p>如果应用使用的是继承spring-boot-starter-paren父依赖模块，那么它提供了spring-boot-maven-plugin打包插件的基本配置，如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>repackage<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>repackage<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>$&#123;start-class&#125;<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><p>它默认提供了repackage打包目标、配置应用启动类，所以应用可以直接继承父项目提供的spring-boot-maven-plugin插件，不用做任何配置，只修要坐标即可。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果有需要，还可以定制配置，常用的定制配置参数如下：<br>（1）layout：指定打包的项目类型，根据应用原有的类型默认打包为jar、war包，具体可以设置以下几种</p><ul><li>JAR：可执行的jar包。</li><li>WAR：可执行的war包</li><li>ZIP：和jar包相似</li><li>NONE：打包所有依赖项和项目资源，但不绑定任何启动加载器。</li></ul><p>（2）mainClass：指定SpringBoot的启动类，如果启动类在根目录则不用指定</p><p>（3）classfier：指定可执行jar包的扩展标识符，比如以下示例，对jar包名称扩展标识符进行定制。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">classifier</span>&gt;</span>exec<span class="tag">&lt;/<span class="name">classifier</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>重新打包后，可以看到可执行的jar包后多一个exec标识符，有了这个标识符就可以区分是可执行的jar包还是普通的jar包</p><p>这就是继承spring-boot-starter-parent父依赖的好处，如果使用导入spring-boot-dependencies依赖继承的方式，则需要在应用中提供插件的一整套配置，例如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">id</span>&gt;</span>repackage<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>repackage<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>$&#123;start-class&#125;<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">classifier</span>&gt;</span>exec<span class="tag">&lt;/<span class="name">classifier</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>所以选择哪种SpringBoot集成方式很重要，如果打包失败，则需要检查应用采用的集成方式。</p><h2 id="应用打包-war"><a href="#应用打包-war" class="headerlink" title="应用打包(war)"></a>应用打包(war)</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><p>SpringBoot也支持将应用打包成war包，这样应用就不会内置Servler容器，也不能直接运行，需要部署到外部的Servlet容器中。另外，基于WebFlux的响应式Web应用不会严格依赖ServletAPI，并且应用默认嵌入在Reactor Netty服务器中部署，所以WebFlux应用不支持war包部署</p><p>应用打成war包的好处就是，可以让运维人员用熟悉的方式来统一管理和维护外置的Servlet容器，从而降低了容器管理的复杂性，如果是微服务，那么建议打包成jar包，方便快速动态扩容。</p><h3 id="配置war包"><a href="#配置war包" class="headerlink" title="配置war包"></a>配置war包</h3><h4 id="1-继承SpringBootServletInitializer抽象类"><a href="#1-继承SpringBootServletInitializer抽象类" class="headerlink" title="1.继承SpringBootServletInitializer抽象类"></a>1.继承SpringBootServletInitializer抽象类</h4><p>配置war包的第一步是继承SpringBootServletInitializer抽象类，并且重写器configure配置方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringBootWarApplication</span> <span class="keyword">extends</span> <span class="title class_">SpringBootServletInitializer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> SpringApplicationBuilder <span class="title function_">configure</span><span class="params">(SpringApplicationBuilder application)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> application.sources(SpringBootWarApplication.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-修改打包类型"><a href="#2-修改打包类型" class="headerlink" title="2.修改打包类型"></a>2.修改打包类型</h4><p>在Maven pom.xml配置文件中，修改打包类型为war：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-添加插件"><a href="#3-添加插件" class="headerlink" title="3.添加插件"></a>3.添加插件</h4><p>如果是继承spring-boot-starter-parent父依赖的集成方法，那么SpringBoot也提供了一个maven-war-plugin插件，用于打包war应用，如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-war-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">archive</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">manifest</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>$&#123;start-class&#125;<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">addDefaultImplementationEntries</span>&gt;</span>true<span class="tag">&lt;/<span class="name">addDefaultImplementationEntries</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">archive</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><p>同理，继承的插件都提供了默认的配置，在应用中只需要引入坐标即可：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-war-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">classifier</span>&gt;</span>exec<span class="tag">&lt;/<span class="name">classifier</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>所以，如果导入spring-boot-dependencies依赖的集成方式，则需要在应用中提供插件的一整套配置。</p><h4 id="4-排除嵌入式容器"><a href="#4-排除嵌入式容器" class="headerlink" title="4.排除嵌入式容器"></a>4.排除嵌入式容器</h4><p>SpringBoot默认使用的是Tomcat嵌入式容器，打包成war包需要排除嵌入式容器，以免应用部署到外部Tomcat时发生冲去，排除配置如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>因为在编译启动类时候，继承的SpringBootServletInitializer类还是会用到Servlet相关的依赖，所以把嵌入式Tomcat以来的scope范围设置为provided，表示该依赖只在编译和测试时有效，但不会出现在外部Servlet的war包中，因为外部Tomcat自身会提供相关类库。</p><h4 id="5-兼容嵌入式容器（可选）"><a href="#5-兼容嵌入式容器（可选）" class="headerlink" title="5.兼容嵌入式容器（可选）"></a>5.兼容嵌入式容器（可选）</h4><p>如果既要支持将war包部署到外部Servlet容器中，又要支持直接运行war包，则可以保留应用启动类中的main方法，并把公共启动方法抽出来，然后两边同时调用公共方法，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringBootWarApplication</span> <span class="keyword">extends</span> <span class="title class_">SpringBootServletInitializer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> SpringApplicationBuilder <span class="title function_">configure</span><span class="params">(SpringApplicationBuilder application)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> application.sources(SpringBootWarApplication.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        startBuilder(<span class="keyword">new</span> <span class="title class_">SpringApplicationBuilder</span>()).run(args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SpringApplicationBuilder <span class="title function_">startBuilder</span><span class="params">(SpringApplicationBuilder builder)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> builder.sources(SpringBootWarApplication.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同时添加SpringBoot的spring-boot-maven-plugin打包插件，这个插件是专门用来打包jar包的，虽然上面把嵌入式容器排除了，但是只是在外部的Servlet的war包中排除了，此插件会再生成一个可以直接运行的war包，排除的嵌入式容器会以lib-provided目录出现在可以直接运行的war包中，这样就可以同时兼容嵌入式容器和外部容器了。</p><h3 id="开始打包"><a href="#开始打包" class="headerlink" title="开始打包"></a>开始打包</h3><p>在开发工具中使用clean  package命令将应用打包后，前往target目录：<br><img src="https://s2.loli.net/2023/12/12/AX1LdVRj8lx2CoU.png" alt="image-20231212180829361"></p><p>这里出现了两个war包，第二个war包(spring-boot-war-0.0.1-SNAPSHOT-exec.war)是可以同时部署jar和war二合一的包，如果不配置兼容嵌入式容器，则第二个war包就不会生成。</p><p>这个war包的目录结构如下：</p><p><img src="https://s2.loli.net/2023/12/12/n3a51GQehBcfVFI.png" alt="image-20231212183046653"></p><p>provided范围的依赖会放到lib-provided目录下：</p><p><img src="https://s2.loli.net/2023/12/12/vh8O1ZpyXWA5dDS.png" alt="image-20231212183136622"><img src="https://s2.loli.net/2023/12/12/3a6piXlCdHbVmkw.png" alt="image-20231212183306107"></p><p>然后通过两个idx索引文件在MANIFEST.MF描述文件中指定相关文件：</p><ul><li>classpath.idx：引入了一系列jar包的classpath索引文件</li><li>layers.idx：分层索引文件。</li></ul><p>​这两个索引文件只有在打可直接运行的包时才会出现，这个war包既包含了直接运行SpringBoot应用的所有文件，包括嵌入式容器相关的包(lib-provided)，又包含了部署到外部Servlet容器中的所有文件，所以既可以像直接运行jar包一样直接运行可执行的war包，又可以作war包部署到其他Servlet容器中。</p><p>直接运行war包命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ java -jar spring-boot-war-0.0.1-SNAPSHOT-exec.war</span><br></pre></td></tr></table></figure><p>这个war包也可以直接放到外部Servlet容器中运行，比如放在Tomcat中的webapps目录下，启动Tomcat就可以自动解压缩并部署应用了。</p><p>前面一个war包(spring-boot-war-0.0.1SNAPSHOT.war)便仅部署到外部Servlet容器中的war包，如果不配置兼容嵌入式容器，那么只会生成这个war包。</p><p>结构如下：<br><img src="https://s2.loli.net/2023/12/13/1rIZf6nMETzHt3h.png" alt="image-20231213094348791"></p><p>它仅包含了部署到外部Servlet容器中的类库，和第一个war包一样直接放到外部Servlet容器中运行，但是不能使用java -jar命令直接运行</p><p>如果把war包部署到外部Servlet容器中，那么SpringBoot应用配置文件中的server.*参数就不会生效了，相关参数需要在外部容器中配置。</p><h2 id="应用运行（嵌入式容器）"><a href="#应用运行（嵌入式容器）" class="headerlink" title="应用运行（嵌入式容器）"></a>应用运行（嵌入式容器）</h2><h3 id="使用java命令运行"><a href="#使用java命令运行" class="headerlink" title="使用java命令运行"></a>使用java命令运行</h3><p>根据前面内容知道，SpringBoot嵌入式容器的jar&#x2F;war包一般是通过<code>java -jar</code>命令运行的</p><h3 id="直接运行"><a href="#直接运行" class="headerlink" title="直接运行"></a>直接运行</h3><p>SpringBoot也支持像运行操作系统脚本一样直接运行嵌入式容器的jar&#x2F;war包，如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./spring-boot-quick-start-1.0-exec.jar</span><br></pre></td></tr></table></figure><p>这种直接运行方式需要在spring-boot-maven-plugin打包插件中指定executable配置参数为true：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">executable</span>&gt;</span>true<span class="tag">&lt;/<span class="name">executable</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">embeddedLaunchScript</span>&gt;</span>...<span class="tag">&lt;/<span class="name">embeddedLaunchScript</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样打出来的包既可以使用jar -jar命令运行，也可以直接运行，它实际上就是一种zip格式的jar包，打包的时候在zip文件的最前面打入一个额外的脚本，这样Linux操作系统就会把它当做一个脚本来运行，推荐使用这种方式打包，像运行系统脚本一样运行应用包，更简单，更方便。</p><p>打包时默认嵌入的脚本支持大部分Linux操作系统，比如CentOS、Ubuntu，其他像macOS、FreeBSD等不支持的操作系统需要在spring-boot-plugin插件中配置自定义的embeddedLaunchScript脚本：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">executable</span>&gt;</span>true<span class="tag">&lt;/<span class="name">executable</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">embeddedLaunchScript</span>&gt;</span>...<span class="tag">&lt;/<span class="name">embeddedLaunchScript</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="系统服务运行"><a href="#系统服务运行" class="headerlink" title="系统服务运行"></a>系统服务运行</h3><p>SpringBoot可执行的应用包可以使用init.d或systemd轻松启动并作为UNIX&#x2F;Linux中的服务，即以Linux中的服务启动应用，如以下参考命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ service mybatis start</span><br><span class="line">$ systemctl start mybatis</span><br></pre></td></tr></table></figure><h4 id="1-init-d"><a href="#1-init-d" class="headerlink" title="1.init.d"></a>1.init.d</h4><p>init.d服务在&#x2F;etc&#x2F;init.d目录下，只需要在该目录下创建一个SpringBoot应用的软链接即可启动init.d服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo <span class="built_in">ln</span> -s ~/spring-boot-mybatis-1.0-exec.jar /etc/init.d/mybatis</span><br></pre></td></tr></table></figure><p>软链接创建后就可以运行init.d服务了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo service mybatis start</span><br></pre></td></tr></table></figure><h4 id="2-systemd"><a href="#2-systemd" class="headerlink" title="2.systemd"></a>2.systemd</h4><p>因为init.d服务是串行启动的，启动时间较长，所以systemd是用来取代init.d服务的，systemd的功能也比init.d更强大，systemd现在已经成为各大Linux系统的标配。</p><p>systemd服务在&#x2F;etc&#x2F;systemd&#x2F;system目录下，只需要在该目录下创建一个SpringBoot应用的脚本文件即可启动systemd服务，文件格式为xxx.service,比如下面创建一个mybatis.service服务的配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[unit]</span><br><span class="line">Description=mybatis</span><br><span class="line">after=syslog.target</span><br><span class="line"></span><br><span class="line">[service]</span><br><span class="line">User=<span class="built_in">test</span></span><br><span class="line">ExecStart=/home/test/spring-boot-mybatis-1.0-exec.jar</span><br><span class="line">SuccessExitStatus=143</span><br><span class="line"></span><br><span class="line">[install]</span><br><span class="line">WantedBy=multi-user.targer</span><br></pre></td></tr></table></figure><p>然后启动服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl start mybatis</span><br></pre></td></tr></table></figure><p>将systend服务设置为开机自动启动：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl <span class="built_in">enable</span> mybatis</span><br></pre></td></tr></table></figure><p>更多服务操作指令参考：</p><table><thead><tr><th>服务操作</th><th>init.d</th><th>systemd</th></tr></thead><tbody><tr><td>启动服务</td><td>service  xxx  start</td><td>systemctl  start  xxx</td></tr><tr><td>停止服务</td><td>service  xxx  stop</td><td>systemctl  stop  xxx</td></tr><tr><td>重新加载配置</td><td>service  xxx  force-reload</td><td>systemctl  daemon-reload</td></tr><tr><td>重启服务</td><td>service  xxx  restart</td><td>systemctl  restart  xxx</td></tr></tbody></table><table><thead><tr><th>服务开机启动</th><th>chkconfig –level 5 xxx on</th><th>systemctl enable xxx</th></tr></thead><tbody><tr><td>服务开机启动(取消)</td><td>chkconfig –level 5 xxx off</td><td>systemctl disable xxx</td></tr><tr><td>查询所有开机启动服务</td><td>chkconfig –list</td><td>systemctl list-unit-files | grep enabled</td></tr><tr><td>查询服务是否开机启动</td><td>chkconfig –list | grep xxx</td><td>systemctl is enabled xxx</td></tr><tr><td>查询所有启动失败的服务</td><td></td><td>systemctl –failed</td></tr><tr><td>检查服务状态</td><td>service xxx staus</td><td>systemctl status xxx</td></tr><tr><td>删除服务</td><td>chkconfig –dek xxx</td><td>删除对应的配置文件</td></tr></tbody></table><p>通过Linux中的init.d和systemd服务可以实现优雅地部署和管理SpringBoot应用服务，并且不用担心系统重启而导致应用长时间终止运行。</p><h3 id="拆包运行"><a href="#拆包运行" class="headerlink" title="拆包运行"></a>拆包运行</h3><p>SpringBoot除了支持整包运行，还支持拆包运行，即先解压压缩包文件，再执行解压出来的启动类。</p><p>首先解压可执行应用包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ jar -xf myapp.jar</span><br></pre></td></tr></table></figure><p>然后调用java命令运行SpringBoot提供的JarLauncher类：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ java org.springframework.boot.loader.JarLauncher</span><br></pre></td></tr></table></figure><p>也可以直接运行应用的原生启动类：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ java -<span class="built_in">cp</span> BOOT-INF/classes:BOOT-INF/lib/*.com.ldd.mybatis.Application</span><br></pre></td></tr></table></figure><p>前者可以自动检测应用的启动类，后者则是直接运行启动类，前者更实用，后者的启动时间可能更短一些。但无论如何，拆包运行方式都要比整包运行方式快，快多少取决于整包的大小，其他方面并没有什么差异，不会影响应用的正常运行。</p><p>部署Docker容器和GraalVM原生镜像学了再写！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;SpringBoot打包与部署&quot;&gt;&lt;a href=&quot;#SpringBoot打包与部署&quot; class=&quot;headerlink&quot; title=&quot;SpringBoot打包与部署&quot;&gt;&lt;/a&gt;SpringBoot打包与部署&lt;/h1&gt;&lt;h2 id=&quot;应用打包-jar&quot;&gt;&lt;a </summary>
      
    
    
    
    <category term="SpringBoot3" scheme="https://humbledong.github.io/categories/SpringBoot3/"/>
    
    
    <category term="SpringBoot3" scheme="https://humbledong.github.io/tags/SpringBoot3/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot调试与单元测试</title>
    <link href="https://humbledong.github.io/undefined/e2fd590a.html"/>
    <id>https://humbledong.github.io/undefined/e2fd590a.html</id>
    <published>2023-10-24T06:14:20.000Z</published>
    <updated>2024-01-08T07:04:41.796Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot调试与单元测试"><a href="#SpringBoot调试与单元测试" class="headerlink" title="SpringBoot调试与单元测试"></a>SpringBoot调试与单元测试</h1><h2 id="断点调试"><a href="#断点调试" class="headerlink" title="断点调试"></a>断点调试</h2><h3 id="使用main方法启动调试"><a href="#使用main方法启动调试" class="headerlink" title="使用main方法启动调试"></a>使用main方法启动调试</h3><p>根据SpringBoot项目不同的启动方式，断点调试的方式也不一样。</p><p>如果直接使用main方法启动应用，那么选择Debug模式启动即可：</p><p><img src="https://s2.loli.net/2023/12/13/Z149FmGQ8gHTVwb.png" alt="image-20231213155034931"></p><p>当代码运行到断点处就可以进行调试了。</p><h3 id="使用Maven插件启动测试"><a href="#使用Maven插件启动测试" class="headerlink" title="使用Maven插件启动测试"></a>使用Maven插件启动测试</h3><p>使用main方法启动调试有一定的缺陷，因为启动应用时不能使用Maven的相关插件，比如不能使用Maven资源插件过滤配置资源，导致无法过滤参数占位符而导致应用启动失败，所以实际项目中使用SpringBootMaven插件启动应用的方式较多。</p><p>使用Spring Boot Maven 插件启动应用，它会“fork”一个子进程来运行应用，所以它不能像main方法那样直接”debug”启动调试，而需要像调试远程应用一样调试，断点调试起来略显麻烦。首先需要在Spring Boot Maven插件中配置jvmArguments调试参数启动应用，然后新建一个远程调试。</p><h4 id="1-启用调试模式"><a href="#1-启用调试模式" class="headerlink" title="1.启用调试模式"></a>1.启用调试模式</h4><p>启用调试模式有以下两种方式：</p><p>（1）在插件配置中指定调试模式的jvmArguments参数：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">jvmArguments</span>&gt;</span></span><br><span class="line">                -Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005</span><br><span class="line">            <span class="tag">&lt;/<span class="name">jvmArguments</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure><p>（2）使用mvn命令启动时候，指定调试模式的jvmArguments参数，完整运行命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mvn spring-boot:run -Despring-boot.run.jvmArguments=<span class="string">&quot;-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005&quot;</span></span><br></pre></td></tr></table></figure><p>主流的开发工具都集成了Maven插件，无需mvn关键字，否则可能运行出错</p><p>一般建议在命令行指定参数进入调试模式，只有在需要的时候启用调试。</p><h4 id="2-远程调试"><a href="#2-远程调试" class="headerlink" title="2.远程调试"></a>2.远程调试</h4><p>在IDE中新建一个Remote调试任务，主流的IDE开发工具都是支持的</p><p><img src="https://s2.loli.net/2023/12/13/OTrqVBam7MCbIEQ.png" alt="image-20231213161753673"></p><p>为了和上一步的spring-boot-web启动项进行区分，这里将对应的远程调试命名为spring-boot-web-debug，一般只需要确定host和prot参数，然后使用Debug模式启动该Remote调试任务，Debug控制台胡显示已经连接成功的日志。</p><p>一旦连接成功，上一步的spring-boot-web启动项才会继续完成启动，之后就可以打断点调试了。</p><h3 id="开发者工具"><a href="#开发者工具" class="headerlink" title="开发者工具"></a>开发者工具</h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>SpringBoot提供了一系列开发者工具，主要用于应用开发阶段，作用包括自动禁用缓存、支持应用自动重启、实时重载等，使用开发者工具可以大大提高开发效率。</p><p>只需要引入开发者工具依赖即可启用开发者工具：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中optional表示该依赖只能在本项目及其子项目中传递，而不会传递到引用该项目的项目中，其他项目需要主动引入该依赖才行。</p><p>开发者工具是在开发阶段使用的，所以，打包应用的时候，SpringBoot默认不会把开发者工具打包进去，如果有需要，也可以通过配置把开发者工具打包进去：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">excludeDevtools</span>&gt;</span>false<span class="tag">&lt;/<span class="name">excludeDevtools</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中excludeDevtools设置为false表示不排除开发者工具依赖。另外，因为开发者工具是开发阶段才使用的工具，所以使用java -jar命令运行整包时，开发者工具会被自动禁用，虽然可以通过-Dspring.devtools.restart.enabled&#x3D;true参数来启用生产环境中的开发者工具，但是不建议这样做，有安全风险，建议不要在生产环境中包含开发者工具。</p><h4 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h4><p>下表是SpringBoot开发者工具使用的参数的默认值：</p><p><img src="https://s2.loli.net/2023/12/13/TVOqvsAXL4zSplW.png" alt="image-20231213164318211"></p><p>这里以缓存项为例说明为什么需要默认值。SpringBoot的某些功能组件可能会提供缓存，这在生产环境中肯定是可以提升性能的，但在开发阶段可能因为没有及时生效而排查困难，所以SpringBoot开发者共计默认是禁用所有缓存项的。</p><p>如果不想让应用这些开发则工具带来的默认值，则可以通过指定参数来禁用默认值</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">devtools:</span></span><br><span class="line">    <span class="attr">add-properties:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h4 id="自动重启"><a href="#自动重启" class="headerlink" title="自动重启"></a>自动重启</h4><h5 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h5><p>SpringBoot开发者工具会监控类路径下的文件，一旦有文件发送变更，应用就能自动快速重启，则不需要手动重启应用。自动重启技术使用了两个类加载器：</p><ul><li>基础类加载器：用于加载不会变更的文件。比如第三方的jar包</li><li>重启类加载器：用于加载应用类文件</li></ul><p>这样做的好处就是每次重启只需要创建一个重启类加载器即可，基础类加载器已加载好的不用动，虽然不能和JRebel热部署方式相比，但和冷启动相比，自动重启技术拥有更高的启动效率。</p><p><strong>注</strong>：使用AspectJ切面编程不支持自动重启</p><h5 id="2-触发机制"><a href="#2-触发机制" class="headerlink" title="2.触发机制"></a>2.触发机制</h5><p>自动重启触发机制如下：</p><ul><li>IntelliJ IDEA：需要重新构建（Build）项目才能自动重启</li><li>构建工具：在IDE构建插件中使用mvn compile&#x2F;gradle build命令也可以触发重启</li></ul><p>IntelliJ IDEA默认是手动构建应用的，当然也可以开启自动构建应用：</p><p><img src="https://s2.loli.net/2023/12/13/qUjmMBYbu3HP5fk.png" alt="image-20231213165340347"></p><h5 id="3-排除资源"><a href="#3-排除资源" class="headerlink" title="3.排除资源"></a>3.排除资源</h5><p>某些资源是没必要触发应用自动重启的，默认情况下，以下目录下的资源不会触发自动重启：</p><ul><li>&#x2F;META-INF&#x2F;maven</li><li>&#x2F;META-INF&#x2F;resource</li><li>&#x2F;resource</li><li>&#x2F;static</li><li>&#x2F;public</li><li>&#x2F;template</li></ul><p>虽然以上目录下的文件变更不会触发应用自动重启，但是会触发应用实时重载，也可以达到快速刷新的效果</p><p>如果不想使用以上默认值，则可以通过</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">devtools:</span></span><br><span class="line">    <span class="attr">restart:</span></span><br><span class="line">      <span class="attr">exclude:</span> <span class="string">static/**</span></span><br></pre></td></tr></table></figure><p>这里只排除static目录下的所有文件，它的变更不会触发应用自动重启。如果要保留所有的默认目录，再添加其他的额外目录，则使用spring.devtools.resart.additional-exclude参数即可</p><h5 id="4-禁用日志报告"><a href="#4-禁用日志报告" class="headerlink" title="4.禁用日志报告"></a>4.禁用日志报告</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">devtools:</span></span><br><span class="line">    <span class="attr">restart:</span></span><br><span class="line">      <span class="attr">log-condition-evaluation-delta:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h5 id="5-禁用自动重启"><a href="#5-禁用自动重启" class="headerlink" title="5.禁用自动重启"></a>5.禁用自动重启</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">devtools:</span></span><br><span class="line">    <span class="attr">restart:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h4 id="实时重载"><a href="#实时重载" class="headerlink" title="实时重载"></a>实时重载</h4><p>SpringBoot开发者工具支持应用文件变更后网页实时重载内容，即不需要手动刷新页面，当类路径下的资源发生变更时可以出发浏览器自动刷新，自动刷新的前提是浏览器安装LiveReload扩展插件即可。</p><p>前面讲过那几个目录只要一更改就会触发重载。</p><p>关闭实时重载配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">devtools:</span></span><br><span class="line">    <span class="attr">liverload:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h4 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h4><p>在实际开发中，同时开发的项目可能非常多，现在都是微服务多模块开发，一个服务就是一个模块，即一个项目，如果逐个地配置是在太麻烦，可以全局配置。</p><p>全局配置文件位于<code>$HOME/.config/spring-boot</code>目录下，配置文件名为spring-boot-devtools,支持.properties、.yaml两种配置文件类型</p><p><code>$HOME</code>默认指的是用户的主目录，如果需要自定义这个目录，则可以通过一下两种方式设置：</p><ul><li>设置SPRING_DEVTOOLS_HOME环境变了</li><li>设置spring.devtools.home系统参数</li></ul><p>比如这样一个全局配置文件spring-boot-devtools.yaml：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">devtools:</span></span><br><span class="line">    <span class="attr">restart:</span></span><br><span class="line">      <span class="attr">log-condition-evaluation-delta:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">trigger-file:</span> <span class="string">&quot;.reloadtrigger&quot;</span></span><br></pre></td></tr></table></figure><p>禁用了自动重启日志报告以及指定了一个触发文件</p><p>建议使用全局配置文件，这样就不用在每个项目中单独配置开发者工具了。</p><p>需要注意的是：</p><p>（1）spring-boot-devtools配置文件不支持任何基于Profile的配置</p><p>（2）如果项目同时设计SpringBoot新老版本开发，则可以使用<code>$HOME/.spring-boot-devtools.properties</code>配置文件，新老版本都可以兼容这种文件</p><p>比如：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.devtools.restart.log-condition-evaluation-delta</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">spring.devtools.restart.trigger-file</span>=<span class="string">.reloadtrigger</span></span><br></pre></td></tr></table></figure><p>注意：.properties配置不能带双引号</p><h2 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><p>SpringBoot提供了丰富的测试功能，主要由以下两个模块组成：</p><ul><li>spring-boot-test：提供测试核心功能</li><li>spring-boot-test-autoconfigure：提供对测试的自动配置</li></ul><p>SpringBoot提供了一个spring-boot-starter-test一站式启动器：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试启动器依赖不仅包含以上两个SpringBoot模块，还包含Spring Test测试模块，以及其他第三方测试类库：</p><p><img src="https://s2.loli.net/2023/12/13/q9D4hXBJrw5ROGk.png" alt="image-20231213112105317"></p><ul><li>Junit5：Java最流行的单元测试框架</li><li>AssertJ：一款快速断言库</li><li>Hamcrest：一款单元测试匹配库</li><li>Mockito：一款Mock测试框架</li><li>JSONassert：一款json断言库</li><li>JsonPath：一款JSON XPath库</li></ul><p>以上这些都是SpringBoot提供的常用的测试类库，如果上面的测试类库还不能满足你的需要，也可以任意添加以上没有的类库。</p><p>现在基本上使用的是JUnit5，如果应用还在使用JUnit4写的单元测试用例，那么也可以使用JUnit5的Vintage引擎来运行，如下面的配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hamcrest<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hamcrest-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>需要排除hamcrest-core依赖，因为依赖坐标已经改了，并且默认内置在SpringBoot依赖管理中，如上面的依赖关系树所示，最新的Hamcrest依赖已经是org.hsmcrest:hamcrest坐标了</p><p>SpringBoot提供了一个@SpringBootTest注解，用在单元测试雷伤以启用支持SpringBoot特性的单元测试，如果使用的是JUnit4，那么测试类上还需要额外添加@RunWith(SpringRunner.class)注解，然后在测试类方法上加上@Test注解即可，每一个@Test注解修饰的方法就是一个单元测试方法。</p><p>@SpringBootTest注解有一个最重要的webEnvironment环境参数，支持以下几种环境设置：</p><ul><li>MOCK（默认）：加载一个Web ApplicationContext并提供了一个Mock Web Environment，但不会自动内嵌Web容器，并可以结合@AutoConfigureMockMvcor和@AutoConfigureWebTestClient注解一起使用进行Mock测试</li><li>RANDOM_PORT：加载一个WebServerApplicationContext，以及提供一个真实的WebEnvironment，并以随机端口启动内嵌服务器。</li><li>DEFINED_PORT：和RANDOM_PORT一样，不同的是DEFINED_PORT是一应用指定的端口运行的，默认是8080</li><li>NONE：加载一个ApplicationContext，但不会提供任何Web Environment。</li></ul><p>如果使用的@SpringBootTest注解不带任何参数，则默认为Mock环境</p><h3 id="真实环境测试"><a href="#真实环境测试" class="headerlink" title="真实环境测试"></a>真实环境测试</h3><p>在@SpringBootTest注解中指定基于随机端口的真实Web环境，然后在类成员变量或者方法参数上注入TestRestTemplate实例，就可以完成对Spring MVC接口的真实环境测试。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MvcTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getUserTest</span><span class="params">(<span class="meta">@Autowired</span> TestRestTemplate testRestTemplate)</span>&#123;</span><br><span class="line">        Map&lt;String,String&gt; multiValueMap= <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        multiValueMap.put(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;七岁就很浪&quot;</span>);</span><br><span class="line">        Result result=testRestTemplate.getForObject(<span class="string">&quot;/user/get?username=&#123;username&#125;&quot;</span>,Result.class,multiValueMap);</span><br><span class="line">        assertThat(result.getCode()).isEqualTo(<span class="number">0</span>);</span><br><span class="line">        assertThat(result.getMsg()).isEqualTo(<span class="string">&quot;ok&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试当前应用下的&#x2F;user&#x2F;get接口，传入对应的用户名参数，最后检查接口返回结果是否和预期一致，测试结果如下：</p><p><img src="https://s2.loli.net/2023/12/13/bvfzAhgTBkLZ5oS.png" alt="image-20231213143514219"></p><p>单元测试通过，从执行日志可以看到，它启动了一个嵌入式的Tomcat容器来测试真实的Web环境。</p><h3 id="Mock环境测试"><a href="#Mock环境测试" class="headerlink" title="Mock环境测试"></a>Mock环境测试</h3><p>通过在类上面使用@AutoConfigureMockMvc注解，然后在类成员变量或者方法参数上注入MockMvc实例，就可以完成对SpringMvc接口的Mock测试。</p><p>基于默认的Mock环境的测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@AutoConfigureMockMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MockMvcTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getUserTest</span><span class="params">(<span class="meta">@Autowired</span> MockMvc mvc)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        mvc.perform(MockMvcRequestBuilders.get(<span class="string">&quot;/user/get?username=&#123;username&#125;&quot;</span>,<span class="string">&quot;test&quot;</span>))</span><br><span class="line">                .andExpect(status().isOk())</span><br><span class="line">                .andExpect(content().string(<span class="string">&quot;&#123;\&quot;code\&quot;:0,\&quot;msg\&quot;:\&quot;ok\&quot;,\&quot;data\&quot;:\&quot;test\&quot;&#125;&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试一下当前应用下的&#x2F;user&#x2F;get接口，传入对应的参数名，最后检查请求状态是否OK(200)，响应的内容是否和预期一致，测试结果如下：</p><p><img src="https://s2.loli.net/2023/12/13/RZoOk3BEyGtJjuU.png" alt="image-20231213145419203"></p><p>单元测试通过，从执行日志中可以看到，它并未启动真实的Web环境来测试，而是使用Mock环境测试的。</p><h3 id="Mock组件测试"><a href="#Mock组件测试" class="headerlink" title="Mock组件测试"></a>Mock组件测试</h3><p>某些时候可能还需要模拟一些组件，比如某些服务只有上线之后才能调用，在开发阶段不可用，这是就需要Mock模拟测试了，提供各种模拟组件以完成测试。</p><p>SpringBoot提供了一个@MockBean注解，可为Spring中的Bean组件定义基于Mockito的Mock测试，他可以创建一个新Bean以覆盖Spring环境中已有的Bean，它可以用在测试类、成员变量上，或者@Configuration配置类、成员变量上，被模拟的Bean每次测试结束后自动重置。</p><p>假设现在有一个远程服务的userService，本地不能调用，现在进行Mock测试，如以下使用示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MockBeanTest</span> &#123;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//    @Autowired</span></span><br><span class="line"><span class="comment">//    private  UserService userService;</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@MockBean</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">countAllUser</span><span class="params">()</span>&#123;</span><br><span class="line">        BDDMockito.given(<span class="built_in">this</span>.userService.countAllUsers()).willReturn(<span class="number">88</span>);</span><br><span class="line">        assertThat(<span class="built_in">this</span>.userService.countAllUsers()).isEqualTo(<span class="number">88</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的@MockBean注解使用在UserService变量上，表明这个userService实例在当前测试用例中是被Mock覆盖的，如果要模拟的Bean有多个，则可以使用@Qualifier注解指定，然后通过Mockito提供的代理工具类方法创建模拟返回数据，运行该服务的测试方法，当模拟数据和预期结果一致时才会通过测试。</p><p>这里通过BDDMockito工具类模拟userService#countAllUsers方法让他返回统计的用户总数(88)，最后检查该方法的返回值是否和预期值一致，测试结果如下：</p><p><img src="https://s2.loli.net/2023/12/13/rfRL7cE2JeuYwM6.png" alt="image-20231213151210744"></p><p>单元测试通过，也可以使用@SpyBean注解代替@MockBean注解，两者区别：</p><ul><li>@SpyBean—如果没有提供Mockito代理方法，则会调用真实的Bean来获取数据。</li><li>@MockBean—不管有没有提供Mockito代理方法，都会调用Mock的Bean来获取数据。</li></ul><p>@MockBean、@SpyBean注解既可以作用于Mock环境，也可以作用于真实环境，它只是用来模拟、替换环境总指定的Bean而已，但不能用于模拟在应用上下文刷新期间Bean的行为，因为在执行测试用例时应用上下文已经刷新完成了，所以不可能再去模拟了，这种情况建议使用@Bean方法来创建模拟配置。</p><h3 id="技术框架测试"><a href="#技术框架测试" class="headerlink" title="技术框架测试"></a>技术框架测试</h3><p>除了支持SpringBoot环境的单元测试，SpringBoot还提供了各种技术组件的单元测试配置，比如JSON、SpringMVC、WebFlux、SpringDataJPA、SpringDataJDBC、SpringDataRedis等。</p><p>比如想测试JSON反序列化&#x2F;序列化功能，其自动配置类为JsonTestersAutoConfiguration，它提供了对各个JSON框架的支持，只修要在单元测试类上添加一个@JsonTest注解，注入对应的JacksonTester、GsonTester、JsonbTester实例就可以直接测试。</p><p>首先在资源目录下创建一个xxx.json文件，JSON文件内容如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span><span class="number">10001</span><span class="punctuation">,</span> <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;xiaodong&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;birthday&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2002-08-24 21:00:00&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>以下就是使用Jackson序列化&#x2F;反序列化的测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@org</span>.springframework.boot.test.autoconfigure.json.JsonTest</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JsonTest</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JacksonTester&lt;User&gt; json;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">10001L</span>, <span class="string">&quot;xiaodong&quot;</span>, LocalDateTime.of(<span class="number">2002</span>, <span class="number">8</span>, <span class="number">24</span>, <span class="number">21</span>, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">        System.out.println(<span class="built_in">this</span>.json.write(user));</span><br><span class="line">        assertThat(<span class="built_in">this</span>.json.write(user)).isEqualToJson(<span class="string">&quot;/ldd.json&quot;</span>);</span><br><span class="line">        assertThat(<span class="built_in">this</span>.json.write(user)).hasJsonPathStringValue(<span class="string">&quot;@.name&quot;</span>);</span><br><span class="line">        assertThat(<span class="built_in">this</span>.json.write(user))</span><br><span class="line">                .extractingJsonPathStringValue(<span class="string">&quot;@.name&quot;</span>).isEqualTo(<span class="string">&quot;xiaodong&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">deserialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;id\&quot;:10002, \&quot;name\&quot;:\&quot;xiaojia\&quot;, \&quot;birthday\&quot;: \&quot;2003-05-30T02:32:00\&quot;&#125;&quot;</span>;</span><br><span class="line">        assertThat(<span class="built_in">this</span>.json.parse(content))</span><br><span class="line">                .isEqualTo(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">10002L</span>, <span class="string">&quot;xiaojia&quot;</span>,</span><br><span class="line">                        LocalDateTime.of(<span class="number">2003</span>, <span class="number">5</span>, <span class="number">30</span>, <span class="number">2</span>, <span class="number">32</span>, <span class="number">0</span>)));</span><br><span class="line">        assertThat(<span class="built_in">this</span>.json.parseObject(content).getName()).isEqualTo(<span class="string">&quot;xiaojia&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里提供了两个测试方法：</p><ul><li>serialize：测试JSON序列化功能，判断序列化后的内容和资源目录下的ldd.json文件的内容是否一致，是否有name这个字段，并且这个字段是否是xiaodong。</li><li>deserialize：测试反序列化功能，判断反序列化后的用户对象和新创建的用户对象是否一致，并且反序列化后的用户对象name值是否为xiaojia。</li></ul><p>测试结果：</p><p><img src="https://s2.loli.net/2023/12/13/IlfuLHPdpZa5UtJ.png" alt="image-20231213154035975"></p><p><img src="https://s2.loli.net/2023/12/13/LBEW5gtfn4Isw9k.png" alt="image-20231213154110492"></p><p>更多技术框架的自动配置可以参考spring-boot-test-autoconfigure测试自动配置包中的自动配置文件：</p><p><img src="https://s2.loli.net/2023/12/13/6mVnJkIrWbHKe5v.png" alt="image-20231213154405460"></p><p>比如上面的JSON序列化和反序列化功能，它注册了SpringBoot所支持的几种JSON工具类的自动配置如下：</p><p><img src="https://s2.loli.net/2023/12/13/EFmJ2UzyCOjoNua.png" alt="image-20231213154602579"></p><p>这里可以看到JSON测试支持的自动配置类JsonTestersAutoConfiguration，以及JSON框架Jackson、Gson、Jsonb的自动配置类都在此处进行了注册。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;SpringBoot调试与单元测试&quot;&gt;&lt;a href=&quot;#SpringBoot调试与单元测试&quot; class=&quot;headerlink&quot; title=&quot;SpringBoot调试与单元测试&quot;&gt;&lt;/a&gt;SpringBoot调试与单元测试&lt;/h1&gt;&lt;h2 id=&quot;断点调试&quot;</summary>
      
    
    
    
    <category term="SpringBoot3" scheme="https://humbledong.github.io/categories/SpringBoot3/"/>
    
    
    <category term="SpringBoot3" scheme="https://humbledong.github.io/tags/SpringBoot3/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot任务</title>
    <link href="https://humbledong.github.io/undefined/d6c1f1a5.html"/>
    <id>https://humbledong.github.io/undefined/d6c1f1a5.html</id>
    <published>2023-10-22T06:14:20.000Z</published>
    <updated>2024-01-08T07:04:41.793Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot任务"><a href="#SpringBoot任务" class="headerlink" title="SpringBoot任务"></a>SpringBoot任务</h1><h2 id="Spring计划任务"><a href="#Spring计划任务" class="headerlink" title="Spring计划任务"></a>Spring计划任务</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>Spring3.1开始支持计划任务，SpringBoot只是在自动配置包中提供了对Spring计划任务的自动配置，其主要还是依赖于Spring中的spring-context包，所以只要任何一个Spring Boot Starter启动器包含spring-context包，他就能使用计划任务，比如spring-boot-starter-web一站式启动器。</p><p>SpringBoot提供了对任务执行、任务调度的自动配置，对应的自动配置类如下：</p><ul><li><p>TaskExecutionAutoConfiguration：任务执行自动配置类</p></li><li><p>TaskSchedulingAutoConfiguration：任务调度自动配置类</p></li></ul><p>它们都被注册在新的自动配置类中</p><p>TaskExecutionAutoConfiguration：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConditionalOnClass(ThreadPoolTaskExecutor.class)</span></span><br><span class="line"><span class="meta">@AutoConfiguration</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(TaskExecutionProperties.class)</span></span><br><span class="line"><span class="meta">@Import(&#123; TaskExecutorConfigurations.ThreadPoolTaskExecutorBuilderConfiguration.class,</span></span><br><span class="line"><span class="meta">      TaskExecutorConfigurations.TaskExecutorBuilderConfiguration.class,</span></span><br><span class="line"><span class="meta">      TaskExecutorConfigurations.SimpleAsyncTaskExecutorBuilderConfiguration.class,</span></span><br><span class="line"><span class="meta">      TaskExecutorConfigurations.TaskExecutorConfiguration.class &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TaskExecutionAutoConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Bean name of the application &#123;<span class="doctag">@link</span> TaskExecutor&#125;.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">APPLICATION_TASK_EXECUTOR_BEAN_NAME</span> <span class="operator">=</span> <span class="string">&quot;applicationTaskExecutor&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果当前上下文中没有任何Executor实例，那么它会自动注册一个默认的ThreadPoolTaskExecutor线程池任务执行器实例，它基于JDK并发包中的Executor接口实现了自己的任务执行器。同时注册了一个TaskExecutorBuilder实例，用来实现自定义的任务执行线程池，对应的参数绑定类为TaskExecutionProperties类，通过一系列spring.task.execution.*参数可以自定义默认任务执行线程池的配置。</p><p>TaskSchedulingAutoConfiguration：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConditionalOnClass(ThreadPoolTaskScheduler.class)</span></span><br><span class="line"><span class="meta">@AutoConfiguration(after = TaskExecutionAutoConfiguration.class)</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(TaskSchedulingProperties.class)</span></span><br><span class="line"><span class="meta">@Import(&#123; TaskSchedulingConfigurations.ThreadPoolTaskSchedulerBuilderConfiguration.class,</span></span><br><span class="line"><span class="meta">      TaskSchedulingConfigurations.TaskSchedulerBuilderConfiguration.class,</span></span><br><span class="line"><span class="meta">      TaskSchedulingConfigurations.SimpleAsyncTaskSchedulerBuilderConfiguration.class,</span></span><br><span class="line"><span class="meta">      TaskSchedulingConfigurations.TaskSchedulerConfiguration.class &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TaskSchedulingAutoConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="meta">@ConditionalOnBean(name = TaskManagementConfigUtils.SCHEDULED_ANNOTATION_PROCESSOR_BEAN_NAME)</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> LazyInitializationExcludeFilter <span class="title function_">scheduledBeanLazyInitializationExcludeFilter</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ScheduledBeanLazyInitializationExcludeFilter</span>();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>任务调度自动配置类在任务执行自动配置类之后启用注册，如果当前上下文中没有以下任何一个实例：</p><ul><li>SchedulingConfigurer</li><li>TaskScheduler</li><li>ScheduledExecutorService</li></ul><p>那么它会自动注册一个默认的ThreadPoolTaskScheduler线程池任务调度器实例，它同样是基于JDK并发包中的Executor接口实现了自己的任务调度器，除了ScheduledExecutorService是JDK并发包中的调度类，其他两个都是Spring调度框架中的类</p><p>同样可以注册一个TaskScheduler实例，对应的参数绑定类为，TaskSchedulingProperties，通过一系列spring.task.scheduling.*参数可以自定义的任务调度线程池配置</p><h3 id="线程池工作流程"><a href="#线程池工作流程" class="headerlink" title="线程池工作流程"></a>线程池工作流程</h3><p>任务执行参数绑定类的源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(&quot;spring.task.execution&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TaskExecutionProperties</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Pool</span> <span class="variable">pool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Pool</span>();</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Simple</span> <span class="variable">simple</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Simple</span>();</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Shutdown</span> <span class="variable">shutdown</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Shutdown</span>();</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Prefix to use for the names of newly created threads.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> <span class="type">String</span> <span class="variable">threadNamePrefix</span> <span class="operator">=</span> <span class="string">&quot;task-&quot;</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> Simple <span class="title function_">getSimple</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.simple;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> Pool <span class="title function_">getPool</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.pool;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> Shutdown <span class="title function_">getShutdown</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.shutdown;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">getThreadNamePrefix</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.threadNamePrefix;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setThreadNamePrefix</span><span class="params">(String threadNamePrefix)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.threadNamePrefix = threadNamePrefix;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Simple</span> &#123;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * Set the maximum number of parallel accesses allowed. -1 indicates no</span></span><br><span class="line"><span class="comment">       * concurrency limit at all.</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      <span class="keyword">private</span> Integer concurrencyLimit;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">public</span> Integer <span class="title function_">getConcurrencyLimit</span><span class="params">()</span> &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="built_in">this</span>.concurrencyLimit;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setConcurrencyLimit</span><span class="params">(Integer concurrencyLimit)</span> &#123;</span><br><span class="line">         <span class="built_in">this</span>.concurrencyLimit = concurrencyLimit;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Pool</span> &#123;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * Queue capacity. An unbounded capacity does not increase the pool and therefore</span></span><br><span class="line"><span class="comment">       * ignores the &quot;max-size&quot; property.</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      <span class="keyword">private</span> <span class="type">int</span> <span class="variable">queueCapacity</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * Core number of threads.</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      <span class="keyword">private</span> <span class="type">int</span> <span class="variable">coreSize</span> <span class="operator">=</span> <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * Maximum allowed number of threads. If tasks are filling up the queue, the pool</span></span><br><span class="line"><span class="comment">       * can expand up to that size to accommodate the load. Ignored if the queue is</span></span><br><span class="line"><span class="comment">       * unbounded.</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      <span class="keyword">private</span> <span class="type">int</span> <span class="variable">maxSize</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * Whether core threads are allowed to time out. This enables dynamic growing and</span></span><br><span class="line"><span class="comment">       * shrinking of the pool.</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">allowCoreThreadTimeout</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * Time limit for which threads may remain idle before being terminated.</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      <span class="keyword">private</span> <span class="type">Duration</span> <span class="variable">keepAlive</span> <span class="operator">=</span> Duration.ofSeconds(<span class="number">60</span>);</span><br><span class="line">       .......</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数名</th><th>说明</th><th>默认值</th></tr></thead><tbody><tr><td>queueCapacity</td><td>队列大小</td><td>Integer最大值</td></tr><tr><td>coreSize</td><td>核心线程数</td><td>8</td></tr><tr><td>maxSize</td><td>最大线程数</td><td>Integer最大值</td></tr><tr><td>allowCoreThreadTimeout</td><td>是否允许核心线程超时</td><td>true</td></tr><tr><td>keepAlive</td><td>线程保活时长</td><td>60秒</td></tr></tbody></table><p>除了allowCoreThreadTimeout参数，其他参数都是JDK线程池提供的，线程池工作流程及各个参数的使用如下：<br><img src="https://s2.loli.net/2023/12/12/YiehScavBDQW2k5.png" alt="image-20231212101124977"></p><p>最后，如果线程空闲时间达到keepAlive时间，则销毁线程，默认只销毁核心线程之外的线程，allowCoreThreadTimeout用于控制是否销毁核心线程。</p><h3 id="实现计划任务"><a href="#实现计划任务" class="headerlink" title="实现计划任务"></a>实现计划任务</h3><p>Spring中的计划任务十分轻量级，使用起来也比Quartz要简单的多。在使用SpringBoot计划任务之前，需要先开启计划任务，一般建议在应用主类上启用，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableScheduling</span></span><br><span class="line"><span class="meta">@EnableAsync</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringBootTaskApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(SpringBootTaskApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中最关键的注解如下：</p><ul><li>@EnableScheduling：表示启用任务调度，它导入了SchedulingConfiguration调度配置类，是通过注册一个ScheduledAnnotationBeanPostProcessor实例实现的。</li><li>@EnableAsync：表示穷任务异步执行，它导入了AsyncConfigurationSelector配置器类，其根据不同的AOP模式选择不同的配置类。</li></ul><p>这两个注解都是spring-context包中的注解，不需要引入额外的依赖，这里实现了一个简单的计划任务，每3秒打印一次日志，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleTask</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;*/3 * * * * *&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printTask</span><span class="params">()</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;这是一个简单的计划任务&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在要实现计划任务的方法上使用@Scheduled注解启用任务调度，使用它需要开启对应的@EnableScheduling注解，它使用的是ThreadPoolTaskScheduler线程池任务调度器。</p><p>启动应用后每三秒就会打印一次日志，如下：</p><p><img src="https://s2.loli.net/2023/12/12/lyE4kMoi7Z5um3T.png" alt="image-20231212103811984"></p><p>任务正常执行，可以注意到每次都是<code>scheduling-1</code>这个任务调度线程在执行，而没有使用SpringBoot自动配置的ThreadPoolTaskExecutor线程池，需要使用@Async注解开启方法异步执行才会使用该线程池，即对应之前开启的@EnableAsync来开启异步执行注解。</p><p>现在加上@Async注解之后再开启任务异步执行，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleTask</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;*/3 * * * * *&quot;)</span></span><br><span class="line">    <span class="meta">@Async</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printTask</span><span class="params">()</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;这是一个简单的计划任务&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/./image/image-20231212104821920.png" alt="image-20231212104821920"></p><p>现在可以看到，每次执行任务的线程都不一样了，因为自动配置的任务执行线程池默认是8个核心线程，系统又只有一个任务在执行，所以每次都会创建一个新的线程去运行，直到8个核心线程数，当核心线程数满了之后就会按顺序取线程池中已有的线程执行。</p><h3 id="Cron表达式"><a href="#Cron表达式" class="headerlink" title="Cron表达式"></a>Cron表达式</h3><p>Spring Task使用了类似于Cron的表达式，并扩展了常规的UN*X中的定义，和常规的Cron表达式略有不同，位数也不同，也不是完全兼容的Cron表达式，这一点需要注意。</p><p>@Scheduled注解的Cron表达式参数的源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.METHOD, ElementType.ANNOTATION_TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Repeatable(Schedules.class)</span></span><br><span class="line"><span class="meta">@Reflective</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Scheduled &#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * A special cron expression value that indicates a disabled trigger: &#123;<span class="doctag">@value</span>&#125;.</span></span><br><span class="line"><span class="comment">    * &lt;p&gt;This is primarily meant for use with &lt;code&gt;$&#123;...&#125;&lt;/code&gt; placeholders,</span></span><br><span class="line"><span class="comment">    * allowing for external disabling of corresponding scheduled methods.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@since</span> 5.1</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@see</span> ScheduledTaskRegistrar#CRON_DISABLED</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="type">String</span> <span class="variable">CRON_DISABLED</span> <span class="operator">=</span> ScheduledTaskRegistrar.CRON_DISABLED;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * A cron-like expression, extending the usual UN*X definition to include triggers</span></span><br><span class="line"><span class="comment">    * on the second, minute, hour, day of month, month, and day of week.</span></span><br><span class="line"><span class="comment">    * &lt;p&gt;For example, &#123;<span class="doctag">@code</span> &quot;0 * * * * MON-FRI&quot;&#125; means once per minute on weekdays</span></span><br><span class="line"><span class="comment">    * (at the top of the minute - the 0th second).</span></span><br><span class="line"><span class="comment">    * &lt;p&gt;The fields read from left to right are interpreted as follows.</span></span><br><span class="line"><span class="comment">    * &lt;ul&gt;</span></span><br><span class="line"><span class="comment">    * &lt;li&gt;second&lt;/li&gt;</span></span><br><span class="line"><span class="comment">    * &lt;li&gt;minute&lt;/li&gt;</span></span><br><span class="line"><span class="comment">    * &lt;li&gt;hour&lt;/li&gt;</span></span><br><span class="line"><span class="comment">    * &lt;li&gt;day of month&lt;/li&gt;</span></span><br><span class="line"><span class="comment">    * &lt;li&gt;month&lt;/li&gt;</span></span><br><span class="line"><span class="comment">    * &lt;li&gt;day of week&lt;/li&gt;</span></span><br><span class="line"><span class="comment">    * &lt;/ul&gt;</span></span><br><span class="line"><span class="comment">    * &lt;p&gt;The special value &#123;<span class="doctag">@link</span> #CRON_DISABLED &quot;-&quot;&#125; indicates a disabled cron</span></span><br><span class="line"><span class="comment">    * trigger, primarily meant for externally specified values resolved by a</span></span><br><span class="line"><span class="comment">    * &lt;code&gt;$&#123;...&#125;&lt;/code&gt; placeholder.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> an expression that can be parsed to a cron schedule</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@see</span> org.springframework.scheduling.support.CronExpression#parse(String)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   String <span class="title function_">cron</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br></pre></td></tr></table></figure><p>可以看到，Spring计划任务中的Cron表达式只能由6个字段组成，再继续看CronExpression#parse解析方法的源码：从注释中看到</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Parse the given crontab expression  string into a CronExpression. The string has six single space-separated time and date fields:</span><br><span class="line">   ┌───────────── second (<span class="number">0</span>-<span class="number">59</span>)</span><br><span class="line">   │ ┌───────────── minute (<span class="number">0</span> - <span class="number">59</span>)</span><br><span class="line">   │ │ ┌───────────── hour (<span class="number">0</span> - <span class="number">23</span>)</span><br><span class="line">   │ │ │ ┌───────────── day of the <span class="title function_">month</span> <span class="params">(<span class="number">1</span> - <span class="number">31</span>)</span></span><br><span class="line">   │ │ │ │ ┌───────────── month (<span class="number">1</span> - <span class="number">12</span>) (or JAN-DEC)</span><br><span class="line">   │ │ │ │ │ ┌───────────── day of the <span class="title function_">week</span> <span class="params">(<span class="number">0</span> - <span class="number">7</span>)</span></span><br><span class="line">   │ │ │ │ │ │          (<span class="number">0</span> or <span class="number">7</span> is Sunday, or MON-SUN)</span><br><span class="line">   │ │ │ │ │ │</span><br><span class="line">   * * * * * *</span><br></pre></td></tr></table></figure><p>SpringCron表达式中的6个字段分别表示：</p><ul><li>秒(0~59)</li><li>分(0~59)</li><li>时(0~23)</li><li>日(1~31)</li><li>月(1<del>12，或者JAN</del>DEC)</li><li>周几(0~7，其中0和7都是周日，或者MON-SUN)</li></ul><p>更多的Cron表达式可以使用：<a href="http://www.bejson.com/othertools/cron/">http://www.bejson.com/othertools/cron/</a></p><p>支持以下关键字代替对应的字段：</p><ul><li>@yearly(每年)</li><li>@monthly(每月)</li><li>@weekly(每周)</li><li>@daily(每日)</li><li>@hourly(每小时)</li></ul><p>一般不会涉及跨年任务，如果是跨年任务就只能换成Quartz计划任务框架了。</p><h3 id="自定义线程池"><a href="#自定义线程池" class="headerlink" title="自定义线程池"></a>自定义线程池</h3><p>从线程池工作流程一节中可以知道，SpringBoot任务执行的默认队列大小为Integer的最大值，可以理解为无限大，如果存放大量的执行任务，就可能导致内存溢出，这也是为什么不建议使用默认线程池的原因。</p><p>实际开发中需要自定义任务线程池，以规避默认线程池带来的内存溢出风险，既可以通过配置更改默认线程池参数，也可以通过完全自定义一个线程池Bean来实现。</p><h4 id="1-通过参数配置线程池"><a href="#1-通过参数配置线程池" class="headerlink" title="1.通过参数配置线程池"></a>1.通过参数配置线程池</h4><p>比如：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">task:</span></span><br><span class="line">    <span class="attr">execution:</span></span><br><span class="line">      <span class="attr">pool:</span></span><br><span class="line">        <span class="attr">core-size:</span> <span class="number">5</span></span><br><span class="line">        <span class="attr">max-size:</span> <span class="number">10</span></span><br><span class="line">        <span class="attr">queue-capacity:</span> <span class="number">50</span></span><br><span class="line">        <span class="attr">keep-alive:</span> <span class="string">10s</span></span><br><span class="line">        <span class="attr">allow-core-thread-timeout:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">scheduling:</span></span><br><span class="line">      <span class="attr">pool:</span></span><br><span class="line">        <span class="attr">size:</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><p>这里配置了任务执行线程池以及任务调度线程池，任务执行线程池的配置如下：</p><ul><li>核心线程数：5</li><li>最大线程数：10</li><li>任务队列大小：50</li><li>线程保活时长：10秒</li><li>是否允许核心线程超时：否</li></ul><p>任务调度线程池(默认为1)的配置如下：</p><ul><li>线程数：3</li></ul><p>任务执行拒绝策略不能通过参数配置实现，但是可以通过自定义线程池Bean的方法实现。</p><p>任务自行拒绝策略(了解)：</p><p>在Java中，任务执行拒绝策略是与线程池（ThreadPool）相关的概念，用于处理当线程池无法接受新任务时的情况。当线程池已经饱和，无法再接受新的任务时，任务执行拒绝策略定义了应该如何处理这种拒绝情况。</p><p>以下是一些常见的任务执行拒绝策略：</p><ol><li><p><strong>AbortPolicy（中止策略）：</strong></p><ul><li>当任务无法被提交执行时，会抛出<code>RejectedExecutionException</code>异常。</li><li>这是默认的拒绝策略。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">javaCopy <span class="type">codeThreadPoolExecutor</span> <span class="variable">executor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(</span><br><span class="line">    corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,</span><br><span class="line">    Executors.defaultThreadFactory(), <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.AbortPolicy()</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><p><strong>CallerRunsPolicy（调用者运行策略）：</strong></p><ul><li>如果线程池无法接受新任务，它将在调用者的线程中执行该任务。</li><li>这意味着任务会在提交者的线程中执行，而不是在线程池中的工作线程中执行。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">javaCopy <span class="type">codeThreadPoolExecutor</span> <span class="variable">executor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(</span><br><span class="line">    corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,</span><br><span class="line">    Executors.defaultThreadFactory(), <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.CallerRunsPolicy()</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><p><strong>DiscardPolicy（丢弃策略）：</strong></p><ul><li>当任务无法被提交执行时，将丢弃该任务，不提供任何通知或记录。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">javaCopy <span class="type">codeThreadPoolExecutor</span> <span class="variable">executor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(</span><br><span class="line">    corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,</span><br><span class="line">    Executors.defaultThreadFactory(), <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.DiscardPolicy()</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><p><strong>DiscardOldestPolicy（丢弃最老的策略）：</strong></p><ul><li>如果线程池无法接受新任务，它将尝试删除队列中最旧的未处理任务，然后重新尝试执行新任务。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">javaCopy <span class="type">codeThreadPoolExecutor</span> <span class="variable">executor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(</span><br><span class="line">    corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,</span><br><span class="line">    Executors.defaultThreadFactory(), <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.DiscardOldestPolicy()</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li></ol><p>这些拒绝策略提供了不同的行为，可以根据具体的需求来选择。当线程池无法处理新提交的任务时，拒绝策略决定了应该采取的措施，以防止系统不稳定或任务丢失。选择合适的拒绝策略取决于应用程序的特定需求和容错策略。</p><h4 id="2-自定义线程池Bean"><a href="#2-自定义线程池Bean" class="headerlink" title="2.自定义线程池Bean"></a>2.自定义线程池Bean</h4><p>在任务自动配置中知道，自定义线程池可以通过注册自定义的TaskExecutorBuilder或者Executor来实现，因为TaskExecutorBuilder不能自定义策略，所以这里通过注册自定义Exector的扩展类ThreadPoolTaskExecutor的方式来实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TaskConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Lazy</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ThreadPoolTaskExecutor <span class="title function_">taskExecutor1</span><span class="params">(TaskExecutionProperties taskExecutionProperties)</span> &#123;</span><br><span class="line">        <span class="type">ThreadPoolTaskExecutor</span> <span class="variable">taskExecutor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolTaskExecutor</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">PropertyMapper</span> <span class="variable">map</span> <span class="operator">=</span> PropertyMapper.get().alwaysApplyingWhenNonNull();</span><br><span class="line">        TaskExecutionProperties.<span class="type">Pool</span> <span class="variable">pool</span> <span class="operator">=</span> taskExecutionProperties.getPool();</span><br><span class="line">        map.from(pool::getQueueCapacity).to(taskExecutor::setQueueCapacity);</span><br><span class="line">        map.from(pool::getCoreSize).to(taskExecutor::setCorePoolSize);</span><br><span class="line">        map.from(pool::getMaxSize).to(taskExecutor::setMaxPoolSize);</span><br><span class="line">        map.from(pool::getKeepAlive).asInt(Duration::getSeconds).to(taskExecutor::setKeepAliveSeconds);</span><br><span class="line">        map.from(pool::isAllowCoreThreadTimeout).to(taskExecutor::setAllowCoreThreadTimeOut);</span><br><span class="line">        map.from(<span class="string">&quot;my-task1-&quot;</span>).whenHasText().to(taskExecutor::setThreadNamePrefix);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 默认不设置就是 AbortPolicy</span></span><br><span class="line">        taskExecutor.setRejectedExecutionHandler(<span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.AbortPolicy());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> taskExecutor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只要命名为taskExecutor，@Async注解就会自动选用这个线程池，可以配置多个线程池，不同的任务类型使用不同的线程池，比如再注册一个taslExecutor2如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TaskConfig</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Lazy</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ThreadPoolTaskExecutor <span class="title function_">taskExecutor2</span><span class="params">(TaskExecutionProperties taskExecutionProperties)</span> &#123;</span><br><span class="line">        <span class="type">ThreadPoolTaskExecutor</span> <span class="variable">taskExecutor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolTaskExecutor</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">PropertyMapper</span> <span class="variable">map</span> <span class="operator">=</span> PropertyMapper.get().alwaysApplyingWhenNonNull();</span><br><span class="line">        TaskExecutionProperties.<span class="type">Pool</span> <span class="variable">pool</span> <span class="operator">=</span> taskExecutionProperties.getPool();</span><br><span class="line">        map.from(<span class="number">10</span>).to(taskExecutor::setQueueCapacity);</span><br><span class="line">        map.from(<span class="number">3</span>).to(taskExecutor::setCorePoolSize);</span><br><span class="line">        map.from(<span class="number">5</span>).to(taskExecutor::setMaxPoolSize);</span><br><span class="line">        map.from(<span class="number">20</span>).to(taskExecutor::setKeepAliveSeconds);</span><br><span class="line">        map.from(<span class="literal">true</span>).to(taskExecutor::setAllowCoreThreadTimeOut);</span><br><span class="line">        map.from(<span class="string">&quot;my-task2-&quot;</span>).whenHasText().to(taskExecutor::setThreadNamePrefix);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> taskExecutor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果存在多个线程池Bean，但没有一个被命名为taskExecutor，那么使用@Async注解时要指定使用的线程池Bean名称：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleTask</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;*/3 * * * * *&quot;)</span></span><br><span class="line">    <span class="meta">@Async(&quot;taskExecutor2&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printTask</span><span class="params">()</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;这是一个简单的计划任务&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里指定了使用taskExecutor2线程池，如果不指定，也可以在线程池Bean上使用@Primary标识的默认线程，如果@Async没有指定就会使用默认线程，如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Lazy</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@Primary</span></span><br><span class="line"><span class="keyword">public</span> ThreadPoolTaskExecutor <span class="title function_">taskExecutor1</span><span class="params">(TaskExecutionProperties taskExecutionProperties)</span> &#123;</span><br><span class="line">    <span class="type">ThreadPoolTaskExecutor</span> <span class="variable">taskExecutor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolTaskExecutor</span>();</span><br><span class="line">    ....</span><br></pre></td></tr></table></figure><p>这里我们以我们默认的taskExecutor1为线程池，那么观察任务</p><p><img src="https://s2.loli.net/2023/12/12/iQKXFq1fjAxhdgV.png" alt="image-20231212114938495"></p><p>从日志得知，自定义任务线程池后，执行任务的线程名称和任务执行频次都有了变化。</p><h2 id="Quartz计划任务"><a href="#Quartz计划任务" class="headerlink" title="Quartz计划任务"></a>Quartz计划任务</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><p>一般简单的任务可以使用Spring计划任务，更为复杂的建议使用专业的Quartz框架，或者其他分布式任务框架，比如Elastic Job、xxl-job等。</p><p>Quartz是一款老牌、开源的Java作业调度框架，功能十分丰富，也十分成熟稳定。</p><p>SpringBoot除了自动配置Spring自带的计划任务和调度框架，还支持对Quartz作业调度框架的自动配置，提供了一站式启动器：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-quartz<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/12/12/nqzkQEpPICRFsYy.png" alt="image-20231212142828915"></p><p>自动配置类为QuartzAutoConfiguration，通过自动注册Spring中的SchedulerFactoryBean就能完成Scheduler调度器的创建、配置、生命周期管理等。对应的参数绑定类为QuartzProperties，通过一些列spring.quartz参数可以自定义SchedulerFactoryBean的配置。</p><h3 id="实现计划任务-1"><a href="#实现计划任务-1" class="headerlink" title="实现计划任务"></a>实现计划任务</h3><p>一样做一个每三秒打印日志的功能：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleTask</span> <span class="keyword">extends</span> <span class="title class_">QuartzJobBean</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">executeInternal</span><span class="params">(JobExecutionContext context)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;这是一个简单的Quartz计划任务&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在SpringBoot中只需继承QuartzJobBean抽象类并实现其executeInternal抽象方法即可，QuartzJobBean抽象类实现并封装了Quartz的Job作业接口。</p><p>和Spring任务不同的是，Quartz需要针对每个任务提供额外的配置，以下几个类型的Bean也会自动关联到Scheduler调度器：</p><ul><li>JobDetail：用于创建一个具体的作业实例</li><li>Calendar：用于指定&#x2F;排除特定的时间</li><li>Trigger：用于定义作业触发时机</li></ul><p>下面是JobDetail和Trigger的配置案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TaskConfig</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> JobDetail <span class="title function_">simpleTask</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> JobBuilder.newJob(SimpleTask.class)</span><br><span class="line">                .withIdentity(<span class="string">&quot;simple-task&quot;</span>)</span><br><span class="line">                .withDescription(<span class="string">&quot;简单任务&quot;</span>)</span><br><span class="line">                .storeDurably()</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Trigger <span class="title function_">simpleTaskTrigger</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">CronScheduleBuilder</span> <span class="variable">cronScheduleBuilder</span> <span class="operator">=</span> CronScheduleBuilder.cronSchedule(<span class="string">&quot;*/3 * * * * ? *&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> TriggerBuilder.newTrigger()</span><br><span class="line">                .withIdentity(<span class="string">&quot;simple-task-trigger&quot;</span>)</span><br><span class="line">                .forJob(simpleTask())</span><br><span class="line">                .withSchedule(cronScheduleBuilder)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Quartz的Cron表达式的格式如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">时 分 秒 日 月 周 [年]</span><br></pre></td></tr></table></figure><p>相比于Spring计划任务，Quartz可以多配置一位，即最后一位年，表达式的年可以省略也可以加上</p><p>任务配置好后，查看启动后的日志</p><p><img src="https://s2.loli.net/2023/12/12/xcyaVsBJCGw2p8L.png" alt="image-20231212145429795"></p><p>Quartz默认是异步多线程执行的，可以看到默认的10个线程在依次执行任务</p><h3 id="自定义配置"><a href="#自定义配置" class="headerlink" title="自定义配置"></a>自定义配置</h3><p>Quartz默认会加载Quartz包目录中的&#x2F;org&#x2F;quartz&#x2F;quartz.properties配置文件，包括Quartz调度器、线程池、持久化的相关配置，该配置文件的全部内容如下：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Default Properties file for use by StdSchedulerFactory</span></span><br><span class="line"><span class="comment"># to create a Quartz Scheduler Instance, if a different</span></span><br><span class="line"><span class="comment"># properties file is not explicitly specified.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="attr">org.quartz.scheduler.instanceName</span>: <span class="string">DefaultQuartzScheduler</span></span><br><span class="line"><span class="attr">org.quartz.scheduler.rmi.export</span>: <span class="string">false</span></span><br><span class="line"><span class="attr">org.quartz.scheduler.rmi.proxy</span>: <span class="string">false</span></span><br><span class="line"><span class="attr">org.quartz.scheduler.wrapJobExecutionInUserTransaction</span>: <span class="string">false</span></span><br><span class="line"></span><br><span class="line"><span class="attr">org.quartz.threadPool.class</span>: <span class="string">org.quartz.simpl.SimpleThreadPool</span></span><br><span class="line"><span class="attr">org.quartz.threadPool.threadCount</span>: <span class="string">10</span></span><br><span class="line"><span class="attr">org.quartz.threadPool.threadPriority</span>: <span class="string">5</span></span><br><span class="line"><span class="attr">org.quartz.threadPool.threadsInheritContextClassLoaderOfInitializingThread</span>: <span class="string">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">org.quartz.jobStore.misfireThreshold</span>: <span class="string">60000</span></span><br><span class="line"></span><br><span class="line"><span class="attr">org.quartz.jobStore.class</span>: <span class="string">org.quartz.simpl.RAMJobStore</span></span><br></pre></td></tr></table></figure><p>SpringBoot中的QuartzProperties参数绑定类提供了一个Map类型的Properties参数，可以自定义覆盖这些配置，如以下源码所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(&quot;spring.quartz&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QuartzProperties</span> &#123;</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Additional Quartz Scheduler properties.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, String&gt; properties = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">   </span><br><span class="line">.......</span><br></pre></td></tr></table></figure><p>比如要更改默认的线程数：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">quartz:</span></span><br><span class="line">    <span class="attr">properties:</span> </span><br><span class="line">      <span class="attr">org:</span></span><br><span class="line">        <span class="attr">quartz:</span></span><br><span class="line">          <span class="attr">threadPool:</span></span><br><span class="line">            <span class="attr">threadCount:</span> <span class="number">5</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/12/12/lTcDqXezaGhwx6s.png" alt="image-20231212150307830"></p><p>可以看到现在只有5个线程在执行任务。</p><h3 id="持久化任务数据"><a href="#持久化任务数据" class="headerlink" title="持久化任务数据"></a>持久化任务数据</h3><p>首先看QuartzProperties参数类源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(&quot;spring.quartz&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QuartzProperties</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Quartz job store type.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> <span class="type">JobStoreType</span> <span class="variable">jobStoreType</span> <span class="operator">=</span> JobStoreType.MEMORY;</span><br><span class="line"> ........   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">JobStoreType</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Store jobs in memory.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   MEMORY,</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Store jobs in the database.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   JDBC</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Quartz支持两种作业持久化存储方式：</p><ul><li>MEMORY</li><li>JDBC</li></ul><p>Quartz存放作业的相关数据默认使用基于MEMORY内存的方式，基于内存意味着每次应用重启后作业数据就会丢失，如果需要持久化作业数据，那么SpringBoot还支持基于JDBC存储的自动配置，只要DataSource数据源已经注册，就可以通过配置切换持久化方式，如以下配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">quartz:</span></span><br><span class="line">    <span class="attr">job-store-type:</span> <span class="string">jdbc</span></span><br><span class="line">    <span class="attr">jdbc:</span></span><br><span class="line">      <span class="attr">initialize-schema:</span> <span class="string">always</span></span><br></pre></td></tr></table></figure><p>参数initialize-schema支持以下三个枚举值：</p><ul><li>ALWAYS：总是初始化数据库</li><li>EMBEDDED：只初始化嵌入式数据库</li><li>NEVER：从不初始化数据库</li></ul><p>参数initialize-schema的值为ALWAYS，表示脚本在每次应用重启后都会删除重建表，这样持久化就没有什么意义了，可以在应用首次启动之前手动执行一次Quartz中自带的数据库脚本，或者通过spring.quartz.jdbc.schema参数指定自定义数据库构建脚本。</p><p>Quartz中自带的数据库脚本路径可以参考QuartzProperties参数类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(&quot;spring.quartz&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QuartzProperties</span> &#123;</span><br><span class="line">......</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Jdbc</span> &#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DEFAULT_SCHEMA_LOCATION</span> <span class="operator">=</span> <span class="string">&quot;classpath:org/quartz/impl/&quot;</span></span><br><span class="line">            + <span class="string">&quot;jdbcjobstore/tables_@@platform@@.sql&quot;</span>;</span><br><span class="line">.......</span><br></pre></td></tr></table></figure><p>可以看到Quartz对应的org&#x2F;quartz&#x2F;impl&#x2F;包目录中，Quartz提供了多个主流数据库的构建脚本，以MySQL数据库为例，它提供了两个不同数据库引擎的构建脚本。</p><p><img src="/./image/image-20231212151838100.png" alt="image-20231212151838100"></p><p>上面的一个脚本使用的是MySQL当前版本默认的数据库引擎，下面的脚本则使用的是指定InnoDB数据库引擎</p><p>在应用启动并完成数据库初始化后，可以通过show tables命令查看Quartz持久化相关的数据表，如下：<br><img src="https://s2.loli.net/2023/12/12/b3lTzq81MdZ6sLA.png" alt="image-20231212152626407"></p><p>默认情况下以数据库中持久化的任务配置为准。</p><p>如果你是手动初始化一次数据库的话，突然想修改为每5秒执行一次，但是它还是每3秒执行一次，那是因为应用中的新的配置不会覆盖数据库持久化的配置，如果需要覆盖，就可以通过以下参数进行配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">quartz:</span></span><br><span class="line">    <span class="attr">overwrite-existing-jobs:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="动态维护任务"><a href="#动态维护任务" class="headerlink" title="动态维护任务"></a>动态维护任务</h3><p>以上是通过Bean的方式配置任务，如果任务过多，应用就会出现大量的配置代码，不是很优雅，也不好维护。</p><p>除了使用Bean配置任务的方式，还可以使用前面介绍的SchedulerFactoryBean来动态维护任务，比如动态添加、删除任务等，现在修改一下上面的Bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TaskConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SIMPLE_TASK</span> <span class="operator">=</span> <span class="string">&quot;simple-task&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SchedulerFactoryBean schedulerFactoryBean;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 动态添加任务</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> SchedulerException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> <span class="keyword">throws</span> SchedulerException &#123;</span><br><span class="line">        <span class="type">Scheduler</span> <span class="variable">scheduler</span> <span class="operator">=</span> schedulerFactoryBean.getScheduler();</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">exists</span> <span class="operator">=</span> scheduler.checkExists(JobKey.jobKey(SIMPLE_TASK));</span><br><span class="line">        <span class="keyword">if</span> (!exists)&#123;</span><br><span class="line">            scheduler.scheduleJob(simpleTask(),simpleTaskTrigger());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="comment">//@Bean</span></span><br><span class="line">    <span class="keyword">public</span> JobDetail <span class="title function_">simpleTask</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> JobBuilder.newJob(SimpleTask.class)</span><br><span class="line">                .withIdentity(<span class="string">&quot;simple-task&quot;</span>)</span><br><span class="line">                .withDescription(<span class="string">&quot;简单任务&quot;</span>)</span><br><span class="line">                .storeDurably()</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Trigger <span class="title function_">simpleTaskTrigger</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">CronScheduleBuilder</span> <span class="variable">cronScheduleBuilder</span> <span class="operator">=</span> CronScheduleBuilder.cronSchedule(<span class="string">&quot;*/5 * * * * ? *&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> TriggerBuilder.newTrigger()</span><br><span class="line">                .withIdentity(<span class="string">&quot;simple-task-trigger&quot;</span>)</span><br><span class="line">                .forJob(simpleTask())</span><br><span class="line">                .withSchedule(cronScheduleBuilder)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先把@Bean注释掉，然后使用注入的SchedulerFactoryBean实例获取Quartz调度器来添加并启动任务，这里的逻辑是，如果没有任务持久化才添加并启动任务。</p><p>实际开发中可以把创建任务的各个方法抽取出来形成公共方法，这样做到好处就是既可以省去大量的配置代码，还可以把任务配置放到配置文件中或者配置中心来统一管理维护，如果有需要，还能以对外API接口的形式来动态维护任务。</p><p>启动应用：<br><img src="https://s2.loli.net/2023/12/12/AzGIdnkgeJo4hm7.png" alt="image-20231212154323935"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;SpringBoot任务&quot;&gt;&lt;a href=&quot;#SpringBoot任务&quot; class=&quot;headerlink&quot; title=&quot;SpringBoot任务&quot;&gt;&lt;/a&gt;SpringBoot任务&lt;/h1&gt;&lt;h2 id=&quot;Spring计划任务&quot;&gt;&lt;a href=&quot;#Spr</summary>
      
    
    
    
    <category term="SpringBoot3" scheme="https://humbledong.github.io/categories/SpringBoot3/"/>
    
    
    <category term="SpringBoot3" scheme="https://humbledong.github.io/tags/SpringBoot3/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot数据访问</title>
    <link href="https://humbledong.github.io/undefined/16cf83b7.html"/>
    <id>https://humbledong.github.io/undefined/16cf83b7.html</id>
    <published>2023-10-21T06:14:20.000Z</published>
    <updated>2024-01-08T07:04:41.795Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot数据访问"><a href="#SpringBoot数据访问" class="headerlink" title="SpringBoot数据访问"></a>SpringBoot数据访问</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>SpringBoot支持关系型数据库相关组件的自动配置，包括数据库、连接池、事务等的自动配置，还提供了JdbcTemplate及Spring Data JPA数据库技术，极大简化了关系型数据库的使用难度，帮助开发者快速集成和操作关系型数据库</p><p>SpringBoot还支持H2，HSQL，Derby等嵌入式数据库的自动配置，以及MongoDB、Neo4J、Elasticsearch、Redis、GemFire or Geode、Cassandra</p><h2 id="嵌入式数据库"><a href="#嵌入式数据库" class="headerlink" title="嵌入式数据库"></a>嵌入式数据库</h2><p>嵌入式数据库相当于“内存形式的关系型数据库”，它在应用中只有一个jar文件，而没有其他的外部环境，所有数据都存储在内存中，也不能持久化数据，应用关闭就会丢弃所有数据。</p><p>嵌入式数据库最大的好处就是足够轻量，可以集成在应用中一起打包发布，不需要连接额外的数据库服务器，这样就可以快速存储少量的结构化数据，省去了大量的连接资源消耗。</p><p>使用嵌入式数据库不需要指定数据库URL的连接地址，只需要导入对应数据库的依赖即可，比如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hsqldb<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hsqldb<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>嵌入式数据库在实际工作中很少使用，一般可用于演示Demo项目，以及单元测试时需要临时数据库场景，因为不能持久化数据，所以也不可能将嵌入式数据库用于实际生产项目，实际生产项目中还是要使用MySQL等专业持久化关系型数据库。</p><h2 id="数据源"><a href="#数据源" class="headerlink" title="数据源"></a>数据源</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><p>SpringBoot支持数据库数据源的自动配置，只需要导入spring-boot-starter-data-jdbc启动器依赖和对应的数据库驱动依赖即可</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>8.0.33<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mysql.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/12/11/fGYeRNt3LgZH5JW.png" alt="image-20231208160053825"></p><p>spring-boot-starter-data-jdbc默认的连接池：HikariCP</p><p>数据源的自动配置核心源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AutoConfiguration(before = SqlInitializationAutoConfiguration.class)</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(&#123; DataSource.class, EmbeddedDatabaseType.class &#125;)</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(type = &quot;io.r2dbc.spi.ConnectionFactory&quot;)</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(DataSourceProperties.class)</span></span><br><span class="line"><span class="meta">@Import(&#123; DataSourcePoolMetadataProvidersConfiguration.class, DataSourceCheckpointRestoreConfiguration.class &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DataSourceAutoConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line">   <span class="meta">@Conditional(EmbeddedDatabaseCondition.class)</span></span><br><span class="line">   <span class="meta">@ConditionalOnMissingBean(&#123; DataSource.class, XADataSource.class &#125;)</span></span><br><span class="line">   <span class="meta">@Import(EmbeddedDataSourceConfiguration.class)</span></span><br><span class="line">   <span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">EmbeddedDatabaseConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line">   <span class="meta">@Conditional(PooledDataSourceCondition.class)</span></span><br><span class="line">   <span class="meta">@ConditionalOnMissingBean(&#123; DataSource.class, XADataSource.class &#125;)</span></span><br><span class="line">   <span class="meta">@Import(&#123; DataSourceConfiguration.Hikari.class, DataSourceConfiguration.Tomcat.class,</span></span><br><span class="line"><span class="meta">         DataSourceConfiguration.Dbcp2.class, DataSourceConfiguration.OracleUcp.class,</span></span><br><span class="line"><span class="meta">         DataSourceConfiguration.Generic.class, DataSourceJmxConfiguration.class &#125;)</span></span><br><span class="line">   <span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">PooledDataSourceConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">      <span class="meta">@Bean</span></span><br><span class="line">      <span class="meta">@ConditionalOnMissingBean(JdbcConnectionDetails.class)</span></span><br><span class="line">      PropertiesJdbcConnectionDetails <span class="title function_">jdbcConnectionDetails</span><span class="params">(DataSourceProperties properties)</span> &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PropertiesJdbcConnectionDetails</span>(properties);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line">............   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如数据源自动配置类使用的@ConditionalOnClass注解所示，如果类路径下有以下两个类就会完成自动配置：</p><ul><li>DataSource.class</li><li>EmbeddedDatabaseType.class</li></ul><p>优先配置外部化关系型数据库的DataSource数据源，再尝试嵌入式数据库，如果没有自定义的数据源，就会通过导入的连接池配置类进行默认配置</p><p>数据源绑定配置类为DataSourceProperties，通过一系列的spring.datasource.*数据源配置参数即可完成自动配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://127.0.0.1:3306/test</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br></pre></td></tr></table></figure><p>数据库驱动参数driver-class-name可以不用指定，主流的数据库SpringBoot都可以进行自动推断，更多的配置参数可以参考DataSourceProperties参数类，另外还有特定于具体连接池的参数，比如spring.datasource.hikari.*</p><p>应用启动后即可看到连接池的相关日志</p><p><img src="https://s2.loli.net/2023/12/11/73HiLadR8jglxZn.png" alt="image-20231208162854912"></p><h3 id="自定义数据源"><a href="#自定义数据源" class="headerlink" title="自定义数据源"></a>自定义数据源</h3><p>如果想要自定义数据源，则直接注册一个DataSource数据源实现类的Bean即可，根据SpringBoot自动配置类使用的条件注解的配置规则，如果应用已注册相关数据实例，那么数据源自动配置类中的相关连接池的DataSource数据源就不会再自动配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DsConfig</span> &#123;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(&quot;spring.datasource&quot;)</span></span><br><span class="line"><span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">XxxDataSource</span>();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还可以自定义多个数据源</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DsConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties(&quot;spring.datasource.xxx.one&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">XxxDataSource</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties(&quot;spring.datasource.xxx.two&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">XxxDataSource</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：</p><p>如果出现多个相同类型的Bean，则需要使用@Primary注解定义一个主Bean，否则在根据类型注入DataSource的地方会产生Bean注入冲突错误</p><p>自定义多个数据源一般用于小型项目读写分离的场景。</p><h2 id="连接池"><a href="#连接池" class="headerlink" title="连接池"></a>连接池</h2><h3 id="概述-2"><a href="#概述-2" class="headerlink" title="概述"></a>概述</h3><p>SpringBoot默认使用的是HikariCP连接池，SpringBoot推荐和优先选择使用HikariCP连接池，因为它性能好，并发高，所以如果是使用的以下两个官方的启动器依赖：</p><ul><li>spring-boot-starter-jdbc</li><li>spring-boot-starter-data-jpa</li></ul><p>那么它们默认使用的就是HikariCP，再回到上面的DataSourceAutoConfiguration数据源自动配置类的源码，进入PooledDataSourceConfiguration配置类导入的DataSourceConfiguration类的核心源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">DataSourceConfiguration</span> &#123;</span><br><span class="line">    </span><br><span class="line">    ....</span><br><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(HikariDataSource.class)</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(DataSource.class)</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(name = &quot;spring.datasource.type&quot;, havingValue = &quot;com.zaxxer.hikari.HikariDataSource&quot;,</span></span><br><span class="line"><span class="meta">      matchIfMissing = true)</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Hikari</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="keyword">static</span> HikariJdbcConnectionDetailsBeanPostProcessor <span class="title function_">jdbcConnectionDetailsHikariBeanPostProcessor</span><span class="params">(</span></span><br><span class="line"><span class="params">         ObjectProvider&lt;JdbcConnectionDetails&gt; connectionDetailsProvider)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">HikariJdbcConnectionDetailsBeanPostProcessor</span>(connectionDetailsProvider);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="meta">@ConfigurationProperties(prefix = &quot;spring.datasource.hikari&quot;)</span></span><br><span class="line">   HikariDataSource <span class="title function_">dataSource</span><span class="params">(DataSourceProperties properties, JdbcConnectionDetails connectionDetails)</span> &#123;</span><br><span class="line">      <span class="type">HikariDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> createDataSource(connectionDetails, HikariDataSource.class,</span><br><span class="line">            properties.getClassLoader());</span><br><span class="line">      <span class="keyword">if</span> (StringUtils.hasText(properties.getName())) &#123;</span><br><span class="line">         dataSource.setPoolName(properties.getName());</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> dataSource;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SpringBoot在这里提供了常用的几个连接池的自动配置，比如：HikariCP、Tomcat、DBCP2等，因为默认导入的是HikariCP连接池依赖，所以默认也是使用HikariCP连接池，如果没有HikariCP连接池依赖，根据类路径下的包顺序选择对应连接池，选择顺序<code>HikariCP-&gt;Tomcat-&gt;DBCP2-&gt;Oracle UCP</code></p><p>如果以上连接池都不存在，则使用非连接池的通用方案，即生产并返回一个对应数据库的默认DataSource数据源为例，如下面的DataSourceConfiguration.Generic：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(DataSource.class)</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(name = &quot;spring.datasource.type&quot;)</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Generic</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   DataSource <span class="title function_">dataSource</span><span class="params">(DataSourceProperties properties, JdbcConnectionDetails connectionDetails)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> createDataSource(connectionDetails, properties.getType(), properties.getClassLoader());</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果不想通过自动检测方式使用连接池，也可以通过spring.datasource.type参数指定具体要使用的连接池</p><h3 id="使用Druid连接池"><a href="#使用Druid连接池" class="headerlink" title="使用Druid连接池"></a>使用Druid连接池</h3><p>引入Starter：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>8.0.33<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">druid.stater.version</span>&gt;</span>1.2.20<span class="tag">&lt;/<span class="name">druid.stater.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">druid.version</span>&gt;</span>1.2.16<span class="tag">&lt;/<span class="name">druid.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">log4j.version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">log4j.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mysql.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--druid starter--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;druid.stater.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--druid--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;druid.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--log4j --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;log4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/12/11/dMQhDqIOjRUYkzt.png" alt="image-20231208175907711"></p><p>启动日志中发现已经切换到Druid了,对应的自动配置类为DruidDataSourceAutoConfigure，如果不存在DataSource数据源的实例，则创建一个Druid自己的数据源，核心源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(&#123;DruidDataSource.class&#125;)</span></span><br><span class="line"><span class="meta">@AutoConfigureBefore(&#123;DataSourceAutoConfiguration.class&#125;)</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(&#123;DruidStatProperties.class, DataSourceProperties.class&#125;)</span></span><br><span class="line"><span class="meta">@Import(&#123;DruidSpringAopConfiguration.class, DruidStatViewServletConfiguration.class, DruidWebStatFilterConfiguration.class, DruidFilterConfiguration.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DruidDataSourceAutoConfigure</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">LOGGER</span> <span class="operator">=</span> LoggerFactory.getLogger(DruidDataSourceAutoConfigure.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DruidDataSourceAutoConfigure</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(</span></span><br><span class="line"><span class="meta">        initMethod = &quot;init&quot;</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span> &#123;</span><br><span class="line">        LOGGER.info(<span class="string">&quot;Init DruidDataSource&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DruidDataSourceWrapper</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(&quot;spring.datasource.druid&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DruidDataSourceWrapper</span> <span class="keyword">extends</span> <span class="title class_">DruidDataSource</span> <span class="keyword">implements</span> <span class="title class_">InitializingBean</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DataSourceProperties basicProperties;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DruidDataSourceWrapper</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">super</span>.getUsername() == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="built_in">super</span>.setUsername(<span class="built_in">this</span>.basicProperties.determineUsername());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">super</span>.getPassword() == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="built_in">super</span>.setPassword(<span class="built_in">this</span>.basicProperties.determinePassword());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">super</span>.getUrl() == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="built_in">super</span>.setUrl(<span class="built_in">this</span>.basicProperties.determineUrl());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">super</span>.getDriverClassName() == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="built_in">super</span>.setDriverClassName(<span class="built_in">this</span>.basicProperties.getDriverClassName());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired(</span></span><br><span class="line"><span class="meta">        required = false</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">autoAddFilters</span><span class="params">(List&lt;Filter&gt; filters)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.filters.addAll(filters);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMaxEvictableIdleTimeMillis</span><span class="params">(<span class="type">long</span> maxEvictableIdleTimeMillis)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>.setMaxEvictableIdleTimeMillis(maxEvictableIdleTimeMillis);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalArgumentException var4) &#123;</span><br><span class="line">            <span class="built_in">super</span>.maxEvictableIdleTimeMillis = maxEvictableIdleTimeMillis;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以使用spring.datasource.druid.*完成这一系列自动配置，同时注入了SpringBoot的数据源通用配置类DataSourceProperties，如果没有配置数据源参数（username、password、url、driverClassName）,再取SpringBoot通用的数据源配置参数，这也是为什么继承Druid之后什么都不用修改也可以正常使用的原因。</p><p>如果想配置可以这样：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/test?useSSL=false&amp;serverTimezone=Asia/Shanghai&amp;characterEncoding=utf-8&amp;autoReconnect=true</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="comment">#Spring Boot 默认是不注入这些属性值的，需要自己绑定</span></span><br><span class="line">    <span class="comment">#druid 数据源专有配置</span></span><br><span class="line">    <span class="attr">initial-size:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">min-idle:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">max-active:</span> <span class="number">20</span></span><br><span class="line">    <span class="attr">max-wait:</span> <span class="number">60000</span></span><br><span class="line">    <span class="attr">time-between-eviction-runs-millis:</span> <span class="number">60000</span></span><br><span class="line">    <span class="attr">min-evictable-idle-time-millis:</span> <span class="number">300000</span></span><br><span class="line">    <span class="attr">validation-query:</span> <span class="string">SELECT</span> <span class="number">1</span> <span class="string">FROM</span> <span class="string">DUAL</span></span><br><span class="line">    <span class="attr">test-while-idle:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">test-on-borrow:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">test-on-return:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">pool-prepared-statements:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># 配置监控拦截的filters.stat:监控统计,log4j:日志记录,wall:防止sql注入</span></span><br><span class="line">    <span class="attr">filters:</span> <span class="string">stat,wall,log4j</span></span><br><span class="line">    <span class="attr">max-pool-prepared-statement-per-connection-size:</span> <span class="number">20</span></span><br><span class="line">    <span class="attr">use-global-data-source-stat:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">connection-properties:</span> <span class="string">druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500</span></span><br><span class="line">    <span class="comment"># 在druid控制界面查看sql语句</span></span><br><span class="line">    <span class="attr">filter:</span></span><br><span class="line">      <span class="attr">stat:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">wall:</span></span><br><span class="line">        <span class="attr">config:</span></span><br><span class="line">          <span class="attr">multi-statement-allow:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="数据库初始化"><a href="#数据库初始化" class="headerlink" title="数据库初始化"></a>数据库初始化</h2><p>SpringBoot可以在应用启动时初始化数据库，包括DDL，DML操作，但是在springboot2.5中，又把数据库初始化逻辑重构了，最新的自动配置类为SqlInitializationAutoConfiguration,这个类同样在新的自动配置文件中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AutoConfiguration</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(SqlInitializationProperties.class)</span></span><br><span class="line"><span class="meta">@Import(&#123; DatabaseInitializationDependencyConfigurer.class, R2dbcInitializationConfiguration.class,</span></span><br><span class="line"><span class="meta">      DataSourceInitializationConfiguration.class &#125;)</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(prefix = &quot;spring.sql.init&quot;, name = &quot;enabled&quot;, matchIfMissing = true)</span></span><br><span class="line"><span class="meta">@Conditional(SqlInitializationModeCondition.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SqlInitializationAutoConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SqlInitializationModeCondition</span> <span class="keyword">extends</span> <span class="title class_">NoneNestedConditions</span> &#123;</span><br><span class="line"></span><br><span class="line">      SqlInitializationModeCondition() &#123;</span><br><span class="line">         <span class="built_in">super</span>(ConfigurationPhase.PARSE_CONFIGURATION);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="meta">@ConditionalOnProperty(prefix = &quot;spring.sql.init&quot;, name = &quot;mode&quot;, havingValue = &quot;never&quot;)</span></span><br><span class="line">      <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">ModeIsNever</span> &#123;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对应的参数绑定类为SqlInitializationProperties，可以通过一系列spring.sql.init.*参数配置数据库的初始化</p><p>如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line">  <span class="attr">sql:</span></span><br><span class="line">    <span class="attr">init:</span></span><br><span class="line">      <span class="attr">mode:</span> <span class="string">always</span></span><br><span class="line">      <span class="attr">continue-on-error:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">schema-locations:</span> <span class="string">classpath:sql/create_t_user.sql</span></span><br><span class="line">      <span class="attr">data-locations:</span> <span class="string">classpath:sql/insert_t_user.sql</span></span><br></pre></td></tr></table></figure><p>配置参数说明：</p><ul><li>mode：数据库初始化模式</li><li>continue-on-error：初始化错误是是否继续启动</li><li>schema-locations：需要执行初始化的数据库DDL脚本</li><li>data-locations：需要执行初始化的数据库DML脚本</li></ul><p>初始化模式：参考(DatabaseInitializationMode枚举类)</p><ul><li>ALWAYS</li><li>EMBEDDED(默认)，即只对嵌入式数据库自动初始化</li><li>NEVER</li></ul><p>所以只有使用外部关系型数据库首次启动才会设置为ALWAYS，不然会重复插入数据</p><p>最后启动应用查看数据库是否成功即可</p><p>实际项目不是这样用的，所有数据库的执行都需要专业人来操作，可以当做测试环境时候或者非正式项目这样用</p><h2 id="事务管理"><a href="#事务管理" class="headerlink" title="事务管理"></a>事务管理</h2><h3 id="概述-3"><a href="#概述-3" class="headerlink" title="概述"></a>概述</h3><p>SpringBoot提供了事务的自动配置，spring-boot-starter-data-jdbc启动器会引入事务相关的包，相关的事务自动配置类有以下几个：</p><ul><li>TransactionAutoConfiguration</li><li>DataSourceTransactionManagerAutoConfiguration</li></ul><p>它们同样被注册在新的自动配置文件中，前者是事务相关的自动配置，后者是事务管理器的自动配置，对应的参数绑定类为TransactionProperties，通过一系列spring.transaction.*参数可以自定义一些事务配置。</p><p>如果没有自定义的事务需求，那么使用默认自动配置的事务就相当简单，只需要在代理方法上使用@Transactional事务注解即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span> &#123;</span><br><span class="line">        jdbcTemplate.execute(<span class="string">&quot;update t_user set username = &#x27;xiaodong&#x27; where id = 1&quot;</span>);</span><br><span class="line">        jdbcTemplate.execute(<span class="string">&quot;update t_user set username = &#x27;xiaojia&#x27; where id = 2&quot;</span>);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;test exception&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里连续执行了两条更新语句，再手动抛出一个异常，用于测试事务回滚，当异常抛出后事务就会回滚，然后把异常代码注释后，两条语句正常更新。</p><h3 id="事务失效的场景"><a href="#事务失效的场景" class="headerlink" title="事务失效的场景"></a>事务失效的场景</h3><p>前面的事务测试为什么要单独创建一个DAO实现类呢？这是为了测试能启用Spring中的代理，使用@Transactional注解必须要注意下面几个失效的场景。</p><h4 id="1-数据库引擎不支持事务"><a href="#1-数据库引擎不支持事务" class="headerlink" title="1.数据库引擎不支持事务"></a>1.数据库引擎不支持事务</h4><p>这里以MySQL为例，MyISAM引擎是不支持事务操作的，一般要支持事务都会使用InnoDB引擎，根据MySQL官方文档说明，从MySQL5.5.5开始默认的存储引擎是InnoDB。</p><h4 id="2-没有被Spring管理"><a href="#2-没有被Spring管理" class="headerlink" title="2.没有被Spring管理"></a>2.没有被Spring管理</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="comment">//@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span> &#123;</span><br><span class="line">        jdbcTemplate.execute(<span class="string">&quot;update t_user set username = &#x27;xiaodong&#x27; where id = 1&quot;</span>);</span><br><span class="line">        jdbcTemplate.execute(<span class="string">&quot;update t_user set username = &#x27;xiaojia&#x27; where id = 2&quot;</span>);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;test exception&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里如果此时把<code>@Service</code>注解注释掉，那么这个类就不会加载成一个Bean。这个类就不会被Spring管理，事务自然就失效了。</p><h4 id="3-方法不是public的"><a href="#3-方法不是public的" class="headerlink" title="3.方法不是public的"></a>3.方法不是public的</h4><p>@Transactional注解只能用于public的方法上，否则事务不会生效，如果要用在非public的方法上，则可以开启基于AspectJ框架的静态代理模式</p><h4 id="4-发生自身调用"><a href="#4-发生自身调用" class="headerlink" title="4.发生自身调用"></a>4.发生自身调用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//update</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update2</span><span class="params">()</span>&#123;</span><br><span class="line">        update1();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>update2方法上没有加@Transactional注解，如果调用有@Transactional注解的update1方法，那么update1方法上的事务还生效吗？</p><p>比如这样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderServiceImpl</span> <span class="keyword">implements</span>  <span class="title class_">OrderService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Order order)</span> &#123;</span><br><span class="line">        updateOrder(order);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Transactional(propagation = Propagation.REQUIRES_NEW)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateOrder</span><span class="params">(Order order)</span>&#123;</span><br><span class="line">        <span class="comment">//update order</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这次在update方法上加了@Transactional。如果在updateOrder上加了REQUIRES_NEW新开启一个事务，那么新开启的事务可以生效吗？</p><p>​这两个例子中的事都不会生效，因它们发生了自身调用，就调用了该类自己的方法，而没有经过Spring的代理类，默认只会调用外部代理类的方法，事务才会生效。</p><p>​这个问题的解决方案之一就是事务所在的类中注入自己，用注入的对象再调用另外一个方法，这个不太优雅，在Spring中可以在当前线程中暴露并获取当前代理类，通过在启动类上添加一下注解来启动暴露代理类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableAspectJAutoProxy(exposePrpxy = true)</span></span><br></pre></td></tr></table></figure><p>然后通过以下代码获取当前代理类，并调用代理类的事务方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">((OrderService) AopContext.currentProxy()).updateOrder</span><br></pre></td></tr></table></figure><p>Spring默认只有调用Spring代理类的public方法，事务才会生效</p><h4 id="5-没有配置事务管理器"><a href="#5-没有配置事务管理器" class="headerlink" title="5.没有配置事务管理器"></a>5.没有配置事务管理器</h4><p>如果没有配置以下DataSourceTransactionManager数据源事务管理器，那么事务也不会生效：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> PlatiformTransactionManager <span class="title function_">transactionManager</span><span class="params">(DataSource dataSource)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DataSourceTransactionManager</span>(dataSource);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但在SpringBoot中只要引入spring-boot-starter-data-jdbc启动器依赖就会自动配置DataSourceTransactionManager数据源事务管理器，所以SpringBoot框架不存在这个问题，但是在传统的Spring框架中需要注意</p><h4 id="6-设置了不支持事务"><a href="#6-设置了不支持事务" class="headerlink" title="6.设置了不支持事务"></a>6.设置了不支持事务</h4><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderServiceImpl</span> <span class="keyword">implements</span>  <span class="title class_">OrderService</span> &#123;</span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Order order)</span> &#123;</span><br><span class="line">    updateOrder(order);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Transactional(propagation = Propagation.NOT_SUPPORTED)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateOrder</span><span class="params">(Order order)</span>&#123;</span><br><span class="line">    <span class="comment">//update order</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的Propagation.NOT_SUPPORTED表示当前方法不以事务的方式运行，当前若存在事务则挂起，这就是不主动以事务方式运行了。</p><h4 id="7-异常没有被抛出"><a href="#7-异常没有被抛出" class="headerlink" title="7.异常没有被抛出"></a>7.异常没有被抛出</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderServiceImpl</span> <span class="keyword">implements</span>  <span class="title class_">OrderService</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateOrder</span><span class="params">(Order order)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//update order</span></span><br><span class="line">        &#125; <span class="keyword">catch</span>&#123;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法把异常给捕获了，但是没有抛出来，所以事务不会回滚，只有捕捉到异常事务才会生效。</p><h4 id="8-异常类型不匹配"><a href="#8-异常类型不匹配" class="headerlink" title="8.异常类型不匹配"></a>8.异常类型不匹配</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderServiceImpl</span> <span class="keyword">implements</span>  <span class="title class_">OrderService</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateOrder</span><span class="params">(Order order)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//update order</span></span><br><span class="line">        &#125; <span class="keyword">catch</span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exception</span>(<span class="string">&quot;更新错误&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为Spring默认回滚的是RuntimeException异常，和程序抛出的Exception异常不匹配，所以事务也是不生效的。如果要触发默认RuntimeException之外异常的回滚，则需要在@Transactional事务注解上指定异常类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br></pre></td></tr></table></figure><h2 id="JdbcTemplate"><a href="#JdbcTemplate" class="headerlink" title="JdbcTemplate"></a>JdbcTemplate</h2><h3 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h3><p>JDBC的全称为Java Database Connectivity，即Java数据库连接，是Java语言规范应用访问数据库的接口，从而不需要关心底层特定数据库的细节，提供了增删查改等方法</p><p>JdbcTemplate即JDBC模版，是Spring用于简化JDBC操作的包装模版类，只需要导入spring-boot-starter-data-jdbc启动器依赖即可，它在新的自动配置文件中同样提供了对JdbcTemplateAutoConfiguration自动配置类的注册，以下是该自动配置类的源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AutoConfiguration(after = DataSourceAutoConfiguration.class)</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(&#123; DataSource.class, JdbcTemplate.class &#125;)</span></span><br><span class="line"><span class="meta">@ConditionalOnSingleCandidate(DataSource.class)</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(JdbcProperties.class)</span></span><br><span class="line"><span class="meta">@Import(&#123; DatabaseInitializationDependencyConfigurer.class, JdbcTemplateConfiguration.class,</span></span><br><span class="line"><span class="meta">      NamedParameterJdbcTemplateConfiguration.class &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcTemplateAutoConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(JdbcOperations.class)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">JdbcTemplateConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="meta">@Primary</span></span><br><span class="line">   JdbcTemplate <span class="title function_">jdbcTemplate</span><span class="params">(DataSource dataSource, JdbcProperties properties)</span> &#123;</span><br><span class="line">      <span class="type">JdbcTemplate</span> <span class="variable">jdbcTemplate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JdbcTemplate</span>(dataSource);</span><br><span class="line">      JdbcProperties.<span class="type">Template</span> <span class="variable">template</span> <span class="operator">=</span> properties.getTemplate();</span><br><span class="line">      jdbcTemplate.setFetchSize(template.getFetchSize());</span><br><span class="line">      jdbcTemplate.setMaxRows(template.getMaxRows());</span><br><span class="line">      <span class="keyword">if</span> (template.getQueryTimeout() != <span class="literal">null</span>) &#123;</span><br><span class="line">         jdbcTemplate.setQueryTimeout((<span class="type">int</span>) template.getQueryTimeout().getSeconds());</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> jdbcTemplate;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JdbcTemplateAutoConfiguration在自动配置类中导入了JdbcTemplateConfiguration配置类，它提供了默认的JdbcTemplate实例，直接在应用中注入就能使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringBootDatasourceApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(SpringBootDatasourceApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> CommandLineRunner <span class="title function_">commandLineRunner</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (args) -&gt;&#123;</span><br><span class="line">            String username=jdbcTemplate.queryForObject(<span class="string">&quot;select username from t_user where id=2&quot;</span>,String.class);</span><br><span class="line">            log.info(<span class="string">&quot;query username is:&#123;&#125;&quot;</span>,username);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>逻辑就是，在应用启动后，去数据库查询t_user表下面的id&#x3D;2的username并且日志输出</p><p><img src="https://s2.loli.net/2023/12/11/S7MbClPkeQapK8u.png" alt="image-20231211114828289"></p><h3 id="自定义JdbcTemplate"><a href="#自定义JdbcTemplate" class="headerlink" title="自定义JdbcTemplate"></a>自定义JdbcTemplate</h3><p>如果默认注册的JdbcTemplate实例不符合要求，则可以自定义JdbcTemplate，或者通过一系列的spring.jdbc.template.*参数进行定制，如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">jdbc:</span></span><br><span class="line">    <span class="attr">template:</span></span><br><span class="line">      <span class="attr">max-rows:</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><p>这里对JdbcTemplate进行了定制，最多可返回3条记录，然后新增一个查询操作测试，如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringBootDatasourceApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(SpringBootDatasourceApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试自定义jdbcTemplate</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> CommandLineRunner <span class="title function_">commandLineRunner</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (args) -&gt; &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> jdbcTemplate.queryForObject(<span class="string">&quot;select username from t_user where id = 2&quot;</span>,</span><br><span class="line">                    String.class);</span><br><span class="line">            log.info(<span class="string">&quot;query username is : &#123;&#125;&quot;</span>, username);</span><br><span class="line"></span><br><span class="line">            List&lt;Map&lt;String, Object&gt;&gt; list = jdbcTemplate.queryForList(<span class="string">&quot;select id from t_user&quot;</span>);</span><br><span class="line">            log.info(<span class="string">&quot;total list: &#123;&#125;&quot;</span>, list.size());</span><br><span class="line"></span><br><span class="line">            userDao.update();</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重启后输出以下日志：<br><img src="https://s2.loli.net/2023/12/11/tenkCZ1dmBfNyjp.png" alt="image-20231211115916169"></p><p>虽然表中数据不止三条，但是只返回了3条记录。</p><h2 id="SpringDataJPA"><a href="#SpringDataJPA" class="headerlink" title="SpringDataJPA"></a>SpringDataJPA</h2><h3 id="概述-4"><a href="#概述-4" class="headerlink" title="概述"></a>概述</h3><ul><li>JPA</li></ul><p>​JPA其实不是指具体框架，它是Java Persistence API的简称，是Java提供的持久化的API，它为POJO提供持久化的标准规范，可以把Java对象映射为数据库中的记录。</p><ul><li>Hibernate</li></ul><p>​JPA是持久化规范，而Hibernate、Toplink、OpenJPA等都是这种标准规范的实现，Hibernate则是Java最流行的JPA规范的实现框架。</p><ul><li>Spring Data JPA</li></ul><p>​Spring Data系列项目为数据访问提供基于Spring的统一编程模型，而其中之一的SpringDataJPA则是Spring为了简化JPA的使用从而推出的一个项目，底层使用的是Hibernate框架，可以将SpringDataJPA理解为对Hibernate更上一层的封装。</p><p>三者的关系如下：<br>Java Application——–&gt;Spring Data JPA——–&gt;(JPA、Hibernate)———&gt;JDBC——-&gt;Database</p><p>SpringDataJPA框架是对JPA顶层的封装，底层使用的是基于JPA规范的Hibernate框架，在通过JDBC连接数据库</p><h3 id="数据库操作-1"><a href="#数据库操作-1" class="headerlink" title="数据库操作"></a>数据库操作</h3><p>导入启动器依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/12/11/T5MzEYDdOU8xWrP.png" alt="image-20231211142601794"></p><p>spring-boot-starter-data-jpa包含了JPA访问数据库所需要的所有依赖，另外，在新的自动配置文件中注册了以下JPA自动配置类：</p><ul><li>JpaRepositoriesAutoConfiguration</li><li>HibernateJpaAutoConfiguration</li></ul><p>对应的参数绑定类为JpaProperties和HibernateProperties，通过一系列spring.jap.*和spring.jpa.hinermate.*参数可以自定义JPA配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">jpa:</span></span><br><span class="line">    <span class="attr">hibernate:</span></span><br><span class="line">      <span class="attr">ddl-auto:</span> <span class="string">update</span></span><br><span class="line">    <span class="attr">show-sql:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>这里制定了ddl-auto为update更新模式，并且输出SQL语句日志</p><p>传统的JPA实体需要在persistence.xml文件中指定，而在SpringBoot中就没有必要，实体类上面只需要一个@Entity注解，启动了上有@SpringBootApplication或者@EnableAutoConfiguration注解就能自动扫描所有的@Entity实体类，如下面的实体类所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Entity(name = &quot;t_user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(nullable = false, unique = true)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(nullable = false)</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = &quot;create_time&quot;, nullable = false)</span></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(nullable = false)</span></span><br><span class="line">    <span class="keyword">private</span> Integer status;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果自动配置注解扫描不到，则可以使用@EntityScan注解指定需要扫描的实体类所在的包，或则直接指定实体类</p><p>SpringDataJPA的数据库操作被称为repositories，Repository是所有repositories的顶级接口，它是一个空接口，官方还提供了几个常用的Repositorie，如下图：</p><p><img src="https://s2.loli.net/2023/12/11/mN3M1ySUYaeV2Kk.png" alt="image-20231211144540331"></p><p>这些Repositorie接口一般可以满足常用的需求，项目中的数据库操作可以根据需要选择对应的Repository继承&#x2F;扩展即可，比如下面的创建一个UserRepository的示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserRepository</span> <span class="keyword">extends</span> <span class="title class_">CrudRepository</span>&lt;User,Long&gt; &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>UserRepository继承了CrudRepository接口，CrudRepository又继承了Repository接口。CrudRepository接口提供了常用的CRUD的操作方法，如果有更多的复杂操作，则可以在自己的Repository接口中再额外定义即可：</p><p><img src="https://s2.loli.net/2023/12/11/bl17rZkaxtMqVIY.png" alt="image-20231211145050622"></p><p>UserRepository接口定义后也会被自动扫描，可以直接拿来注入使用，如果自动配置注解扫描不到，则可以使用@EnableJpaRepositories注解指定Repository所在的包，或者直接指定Repository类</p><p>测试</p><p>写一个接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> UserRepository userRepository;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user/info/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getUserInfo</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span><span class="type">long</span> id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userRepository.findById(id).orElseGet(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/12/11/jfypFCZEARg3Mu6.png" alt="image-20231211150249903"></p><p>结果返回正常，控制台也打印相关的Sql语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hibernate: <span class="keyword">select</span> u1_0.id,u1_0.create_time,u1_0.phone,u1_0.status,u1_0.username <span class="keyword">from</span> t_user u1_0 <span class="keyword">where</span> u1_0.id<span class="operator">=</span>?</span><br></pre></td></tr></table></figure><p>注：</p><p>一般的应用使用SpringDataJPA即可满足需求，还可以有效提升效率。如果是复杂的业务系统，涉及大量的复杂的SQL语句，则建议使用Mybatis框架。MyBatis是把SQL语句配置在XML文件中，编写灵活，易于调试和对SQL优化，另外加上JPA有一定的使用门槛，需要团队成员熟练掌握，需要团队成员熟练掌握。</p><h2 id="Mybatis"><a href="#Mybatis" class="headerlink" title="Mybatis"></a>Mybatis</h2><h3 id="概述-5"><a href="#概述-5" class="headerlink" title="概述"></a>概述</h3><p>国内一般都使用MyBatis框架，可以直接写SQL，上手容易，维护也方便</p><p>SpringBoot官方没有提供MyBatis  Starter，但是MyBatis官方提供了mybatis-spring-boot-starter一站式启动器</p><p>导入启动器依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/12/11/3MqKBRXn6JkNuPj.png" alt="image-20231211152222622"></p><p>Starter包含了SpringBoot使用MyBatis时所需要的自动配置，对应的自动配置类为MyBatisAutoConfiguration。它代替了传统的Spring项目集成MyBatis所需的XML文件，自动配置类中注册了一个SqlSessionFactory和SqlSessionTemplate实例，对应的参数绑定配置类为MybatisProperties，通过一系列mybatis.*参数可以自定义MyBatis配置。</p><h3 id="数据库操作-2"><a href="#数据库操作-2" class="headerlink" title="数据库操作"></a>数据库操作</h3><p>使用MyBatis框架一般需要以下两个组件：</p><ul><li>*Mapper.java：数据库映射接口，提供对应的数据库操作方法</li><li>*Mapper.xml：数据库SQL映射配置文件，提供数据库映射接口对应执行的SQL</li></ul><p>首先导入启动器，然后配置文件中添加MyBatis配置参数：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:/mapper/*.xml</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.ldd.pojo</span></span><br></pre></td></tr></table></figure><ul><li>mapper-locations：指定*.xml  SQL配置文件路径</li><li>type-aliases-package：指定数据库实体类的全包路径</li></ul><p>然后定义一个*Mapper映射接口，接口需要使用@Mapper注解修饰，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    User <span class="title function_">findById</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> <span class="type">long</span> id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实体类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer status;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后资源文件目录下创建对应的mapper&#x2F;UserMapper.xml文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.ldd.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;BaseResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;INTEGER&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;username&quot;</span> <span class="attr">column</span>=<span class="string">&quot;username&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;phone&quot;</span> <span class="attr">column</span>=<span class="string">&quot;phone&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;createTime&quot;</span> <span class="attr">column</span>=<span class="string">&quot;create_time&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;TIMESTAMP&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;status&quot;</span> <span class="attr">column</span>=<span class="string">&quot;status&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;INTEGER&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--根据id查询用户--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findUserById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.ldd.pojo.User&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">        select * from t.user where id=#&#123;id&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>XML配置：</p><ul><li>namespace：定义命名空间，即Mapper映射接口的全路径</li><li>resultMap：结果集映射，将数据库表字段映射为Java实体类</li><li>select：定义查询语句，id要和Mapper接口中的方法一致</li></ul><p>如果*Mapper在启动类所在的子包中，那么MyBatis自动配置会自动扫描该注解修饰的接口，应用注入后可以直接使用，否在需要使用@MapperScan注解实现自定义的Mapper扫描</p><p>控制层：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user/info/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getUserInfo</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> <span class="type">long</span> id)</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.findById(id);</span><br><span class="line">        log.info(<span class="string">&quot;user: &#123;&#125;&quot;</span>, user);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>这里修改一下前面的pom设置，因为SpringBoot为3.2.0建议升级mybatis为3.0.3</strong></p><p>启动应用</p><p><img src="https://s2.loli.net/2023/12/11/73axnWiEvwOcLPh.png" alt="image-20231211160844448"></p><p><img src="https://s2.loli.net/2023/12/11/hYq73WsXjPDuFyT.png" alt="image-20231211160919205"></p><h2 id="MyBatis-Plus"><a href="#MyBatis-Plus" class="headerlink" title="MyBatis-Plus"></a>MyBatis-Plus</h2><h3 id="概述-6"><a href="#概述-6" class="headerlink" title="概述"></a>概述</h3><p>MyBatis-Plus是针对MyBatis的开源增强框架，它只是增强，而不改变MyBatis框架本身，在MyBatis框架的基础上提供了许多人性化的功能。</p><p>导入启动器依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/12/11/TbCrwaoeGLyBiUN.png" alt="image-20231211164722733"></p><p>对应的自动配置类为MybatisPlusAutoConfiguration，它其实就是代替了官方的Mybatis Starter以及MybatisAutoConfiguration自动配置类，注册了一个SqlSessionFactory实例并且对其进行定制，如下源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration(</span></span><br><span class="line"><span class="meta">    proxyBeanMethods = false</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(&#123;SqlSessionFactory.class, SqlSessionFactoryBean.class&#125;)</span></span><br><span class="line"><span class="meta">@ConditionalOnSingleCandidate(DataSource.class)</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(&#123;MybatisPlusProperties.class&#125;)</span></span><br><span class="line"><span class="meta">@AutoConfigureAfter(&#123;DataSourceAutoConfiguration.class, MybatisPlusLanguageDriverAutoConfiguration.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisPlusAutoConfiguration</span> <span class="keyword">implements</span> <span class="title class_">InitializingBean</span> &#123;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">    <span class="keyword">public</span> SqlSessionFactory <span class="title function_">sqlSessionFactory</span><span class="params">(DataSource dataSource)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//使用MybatisSqlSessionFactoryBean而不是MybatisSqlSession</span></span><br><span class="line">        <span class="type">MybatisSqlSessionFactoryBean</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisSqlSessionFactoryBean</span>();</span><br><span class="line">       </span><br><span class="line">       ...</span><br><span class="line"></span><br><span class="line">        <span class="comment">//修改源码支持定义TransactionFactory</span></span><br><span class="line">        <span class="built_in">this</span>.getBeanThen(TransactionFactory.class, factory::setTransactionFactory);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//对源码进行修改</span></span><br><span class="line">        Class&lt;? <span class="keyword">extends</span> <span class="title class_">LanguageDriver</span>&gt; defaultLanguageDriver = <span class="built_in">this</span>.properties.getDefaultScriptingLanguageDriver();</span><br><span class="line">        <span class="keyword">if</span> (!ObjectUtils.isEmpty(<span class="built_in">this</span>.languageDrivers)) &#123;</span><br><span class="line">            factory.setScriptingLanguageDrivers(<span class="built_in">this</span>.languageDrivers);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">Optional</span> <span class="variable">var10000</span> <span class="operator">=</span> Optional.ofNullable(defaultLanguageDriver);</span><br><span class="line">        Objects.requireNonNull(factory);</span><br><span class="line">        var10000.ifPresent(factory::setDefaultScriptingLanguageDriver);</span><br><span class="line">        <span class="built_in">this</span>.applySqlSessionFactoryBeanCustomizers(factory);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//此处必须为非NULL</span></span><br><span class="line">        <span class="type">GlobalConfig</span> <span class="variable">globalConfig</span> <span class="operator">=</span> <span class="built_in">this</span>.properties.getGlobalConfig();</span><br><span class="line">        Objects.requireNonNull(globalConfig);</span><br><span class="line">        <span class="comment">//注入填充器</span></span><br><span class="line">        <span class="built_in">this</span>.getBeanThen(MetaObjectHandler.class, globalConfig::setMetaObjectHandler);</span><br><span class="line">        Objects.requireNonNull(globalConfig);</span><br><span class="line">   <span class="comment">//加入注解处理</span></span><br><span class="line">        <span class="built_in">this</span>.getBeanThen(AnnotationHandler.class, globalConfig::setAnnotationHandler);</span><br><span class="line">        Objects.requireNonNull(globalConfig);</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">this</span>.getBeanThen(PostInitTableInfoHandler.class, globalConfig::setPostInitTableInfoHandler);</span><br><span class="line">        <span class="comment">//注入主键生成器</span></span><br><span class="line">        <span class="built_in">this</span>.getBeansThen(IKeyGenerator.class, (i) -&gt; &#123;</span><br><span class="line">            globalConfig.getDbConfig().setKeyGenerators(i);</span><br><span class="line">        &#125;);</span><br><span class="line">        Objects.requireNonNull(globalConfig);</span><br><span class="line">        <span class="comment">//注入SQL注入器</span></span><br><span class="line">        <span class="built_in">this</span>.getBeanThen(ISqlInjector.class, globalConfig::setSqlInjector);</span><br><span class="line">        Objects.requireNonNull(globalConfig);</span><br><span class="line">        <span class="comment">//注入ID生成器</span></span><br><span class="line">        <span class="built_in">this</span>.getBeanThen(IdentifierGenerator.class, globalConfig::setIdentifierGenerator);</span><br><span class="line">        <span class="comment">//设置globalConfig到MybatisSqlSessionBean</span></span><br><span class="line">        factory.setGlobalConfig(globalConfig);</span><br><span class="line">        <span class="keyword">return</span> factory.getObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对应的参数绑定类为MybatisPlusProperties，通过一系列mybatis-plus.*参数可以对Mybatis-plus进行定制，mybatis-plus.*继承了mybatis.*的部分原生参数并进行了增强</p><h3 id="通用数据库操作"><a href="#通用数据库操作" class="headerlink" title="通用数据库操作"></a>通用数据库操作</h3><p>添加配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mapper/*.xml</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.ldd.pojo</span></span><br></pre></td></tr></table></figure><p>与Mybatis不同的是，MyBatis-Plus会自动加载mapper资源目录下的XML映射文件，如果使用默认目录，则这里的mapper-locations可以不用定义如源码所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(</span></span><br><span class="line"><span class="meta">    prefix = &quot;mybatis-plus&quot;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisPlusProperties</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">ResourcePatternResolver</span> <span class="variable">resourceResolver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PathMatchingResourcePatternResolver</span>();</span><br><span class="line">    <span class="keyword">private</span> String configLocation;</span><br><span class="line">    <span class="keyword">private</span> String[] mapperLocations = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;classpath*:/mapper/**/*.xml&quot;</span>&#125;;</span><br></pre></td></tr></table></figure><p>还有不同的是，因为引入的不是MyBatis官方的Starter，所以MyBatis-Plus中的Mapper映射类不能自动扫描注册，需要使用@MapperScan注解手动开启扫描：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MapperScan(basePackages = &#123;&quot;com.ldd.mapper&quot;&#125;)</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringBootMybatisPlusApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(SpringBootMybatisPlusApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建一个UserMapper接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;User&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实体类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TableName(&quot;t_user&quot;)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField()</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableId(type = IdType.AUTO)</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(insertStrategy = FieldStrategy.NOT_NULL)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(insertStrategy = FieldStrategy.NOT_NULL)</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(insertStrategy = FieldStrategy.NOT_NULL, fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createTime;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(insertStrategy = FieldStrategy.NOT_NULL)</span></span><br><span class="line">    <span class="keyword">private</span> Integer status;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>UserService接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;User&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​这里继承了IService接口，它提供了Service层常用的CRUD操作，然后创建一个实现类实现该接口，并继承mybatis-plus提供的通用ServiceImpl实现</p><p>实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;UserMapper, User&gt; <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制层：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user/info/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getUserInfoById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> <span class="type">long</span> id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.getById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为SpringBoot3.2兼容性原因修改一下pom文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mybatis-plus.version</span>&gt;</span>3.5.4.1<span class="tag">&lt;/<span class="name">mybatis-plus.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mybatis-spring.version</span>&gt;</span>3.0.3<span class="tag">&lt;/<span class="name">mybatis-spring.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis-plus.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 解决 Spring Boot 3.2.0 升级 mybatis-plus 暂未做适配的问题，后续兼容后移除 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis-spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/12/11/Db9uAkHma453sLB.png" alt="image-20231211173119529"></p><h3 id="自定义数据库操作"><a href="#自定义数据库操作" class="headerlink" title="自定义数据库操作"></a>自定义数据库操作</h3><p>如果还想自定义数据库操作，包括直接编写SQL映射文件，或者使用MyBatis-Plus提供的QueryWrapper和LambdaQueryWrapper实现无XML化操作。</p><p>下面实现了除了通用接口外的其他两种处理方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;UserMapper, User&gt; <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getByUsername</span><span class="params">(String username, <span class="type">int</span> type)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (type == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// xml</span></span><br><span class="line">            log.info(<span class="string">&quot;query from xml&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> userMapper.selectByUsername(username);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// QueryWrapper</span></span><br><span class="line">            log.info(<span class="string">&quot;query from wrapper&quot;</span>);</span><br><span class="line">            LambdaQueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>();</span><br><span class="line">            queryWrapper.eq(User::getUsername, username);</span><br><span class="line">            queryWrapper.eq(User::getStatus, <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span> userMapper.selectOne(queryWrapper);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>if的第一种就是原生的XML文件处理方式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.ldd.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;BaseResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;INTEGER&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;username&quot;</span> <span class="attr">column</span>=<span class="string">&quot;username&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;phone&quot;</span> <span class="attr">column</span>=<span class="string">&quot;phone&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;createTime&quot;</span> <span class="attr">column</span>=<span class="string">&quot;create_time&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;TIMESTAMP&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;status&quot;</span> <span class="attr">column</span>=<span class="string">&quot;status&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;INTEGER&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByUsername&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;string&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;BaseResultMap&quot;</span>&gt;</span></span><br><span class="line">        select * from t_user where username = #&#123;username&#125; and status = 1</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/12/11/MsIE7AhkRTvK6V8.png" alt="image-20231211175324131"><img src="https://s2.loli.net/2023/12/11/FOqgzKTbPsYWvS4.png" alt="image-20231211175339230"></p><p>第二中就是使用MyBatis-plus提供的条件构造器，无需xml配置</p><p><img src="https://s2.loli.net/2023/12/11/7qFl8p5t9bEkhgV.png" alt="image-20231211174638916"><img src="https://s2.loli.net/2023/12/11/fGdLNw4kCixyInv.png" alt="image-20231211174704288"></p><p>具体的Wrapper使用方法参考：<a href="https://gh.qisui.xyz/undefined/cc2af2d6.html#6-%E6%9D%A1%E4%BB%B6%E6%9F%A5%E8%AF%A2%E5%99%A8-%E6%A0%B8%E5%BF%83">MyBatis-Plus学习 | 七岁就很浪 (qisui.xyz)|条件查询器</a></p><p>更多MyBaits-Plus使用请参考：<a href="https://gh.qisui.xyz/undefined/cc2af2d6.html">MyBatis-Plus学习 | 七岁就很浪 (qisui.xyz)</a></p><h2 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h2><h2 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h2><h2 id="Elasticsearch"><a href="#Elasticsearch" class="headerlink" title="Elasticsearch"></a>Elasticsearch</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;SpringBoot数据访问&quot;&gt;&lt;a href=&quot;#SpringBoot数据访问&quot; class=&quot;headerlink&quot; title=&quot;SpringBoot数据访问&quot;&gt;&lt;/a&gt;SpringBoot数据访问&lt;/h1&gt;&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot;</summary>
      
    
    
    
    <category term="SpringBoot3" scheme="https://humbledong.github.io/categories/SpringBoot3/"/>
    
    
    <category term="SpringBoot3" scheme="https://humbledong.github.io/tags/SpringBoot3/"/>
    
  </entry>
  
  <entry>
    <title>SpringBootWeb核心应用</title>
    <link href="https://humbledong.github.io/undefined/46f3ef61.html"/>
    <id>https://humbledong.github.io/undefined/46f3ef61.html</id>
    <published>2023-10-20T06:14:20.000Z</published>
    <updated>2024-01-08T07:04:41.792Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringBootWeb核心应用"><a href="#SpringBootWeb核心应用" class="headerlink" title="SpringBootWeb核心应用"></a>SpringBootWeb核心应用</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>SpringBoot支持的两种Web类型：</p><ul><li>SERVLET(即传统的WebMVC)同步阻塞I&#x2F;O模型</li><li>REACTIVE(响应式的WebFlux)异步非阻塞I&#x2F;O模型</li></ul><p>性能上REACTIVE优于SERVLET，但是WebFlux不是很完善，也不是很成熟</p><p>SpringBoot通过spring-boot-start-web对SpringMVC的配置内容大致为：</p><ul><li>包含对ContentNegotiatingViewResolve和BeanNameView的Bean注册</li><li>支持对静态资源，包括对静态网页index.html的支持，以及对WebJars的支持</li><li>包含对Converter、GenericConverter、Formatter的Bean自动注册</li><li>支持对HTTPMessageConverters消息转换器</li><li>支持对MessageCodesResolver的自动注册</li><li>自动使用ConfigurationWebBindingInitializer的Bean</li></ul><p>​既然SpringBoot只提供了对SpringMVC的自动配置，所以我们尝试在SpringBoot中使用SpringMVC和独立使用是没有什么区别的，先导入web的启动器，然后定义两个接口，分别返回JSON、XML格式的数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResponseBodyController</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/user/json/&#123;userId&#125;&quot;, produces = MediaType.APPLICATION_JSON_VALUE)</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getJsonUserInfo</span><span class="params">(<span class="meta">@PathVariable(&quot;userId&quot;)</span> <span class="meta">@Size(min = 5, max = 8)</span> String userId)</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;Java技术栈&quot;</span>, <span class="number">18</span>);</span><br><span class="line">        user.setId(Long.valueOf(userId));</span><br><span class="line">        log.info(<span class="string">&quot;user info: &#123;&#125;&quot;</span>, user);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/user/xml/&#123;userId&#125;&quot;, produces = MediaType.APPLICATION_XML_VALUE)</span></span><br><span class="line">    <span class="keyword">public</span> UserXml <span class="title function_">getXmlUserInfo</span><span class="params">(<span class="meta">@PathVariable(&quot;userId&quot;)</span> String userId)</span> &#123;</span><br><span class="line">        <span class="type">UserXml</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserXml</span>();</span><br><span class="line">        user.setName(<span class="string">&quot;栈长&quot;</span>);</span><br><span class="line">        user.setId(userId);</span><br><span class="line"></span><br><span class="line">        List&lt;OrderInfo&gt; orderList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">OrderInfo</span> <span class="variable">orderInfo1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OrderInfo</span>(<span class="string">&quot;123456001&quot;</span>, <span class="number">999</span>, <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        <span class="type">OrderInfo</span> <span class="variable">orderInfo2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OrderInfo</span>(<span class="string">&quot;123456002&quot;</span>, <span class="number">777</span>, <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        <span class="type">OrderInfo</span> <span class="variable">orderInfo3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OrderInfo</span>(<span class="string">&quot;123456003&quot;</span>, <span class="number">666</span>, <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        orderList.add(orderInfo1);</span><br><span class="line">        orderList.add(orderInfo2);</span><br><span class="line">        orderList.add(orderInfo3);</span><br><span class="line">        user.setOrderList(orderList);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注解还是MVC那一套，Springboot只是完成了框架上的配置而已</p><h2 id="嵌入式容器"><a href="#嵌入式容器" class="headerlink" title="嵌入式容器"></a>嵌入式容器</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><p>Springboot支持的容器：</p><table><thead><tr><th>容器</th><th>依赖</th></tr></thead><tbody><tr><td>Tomcat（默认）</td><td>spring-boot-starter-tomcat</td></tr><tr><td>Jetty</td><td>spring-boot-starter-jetty</td></tr><tr><td>Undertow</td><td>spring-boot-starter-undertow</td></tr></tbody></table><p><img src="https://s2.loli.net/2023/12/11/3eANdXu89vqJZsM.png" alt="image-20231207145249936"></p><p>自动导入好了默认的容器</p><h3 id="容器配置"><a href="#容器配置" class="headerlink" title="容器配置"></a>容器配置</h3><p>容器参数绑定类为ServletProperties类，可以通过server.*开头的参数来配置所有容器的通用配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="string">port:8081</span></span><br><span class="line">  <span class="string">servlet</span></span><br><span class="line">  <span class="attr">context-path:</span> <span class="string">/ldd</span></span><br></pre></td></tr></table></figure><p>更多的参看ServletProperties类，Tomcat容器的可以通过：server.tomcat.*参数配置</p><p>也可以通过Java类自定义Servlet容器，只需要实现WebServerFactoryCustomizer<ConfigurableWebServerFactory>接口即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomWebServerFactoryCustomizer</span> <span class="keyword">implements</span> <span class="title class_">WebServerFactoryCustomizer</span>&lt;ConfigurableWebServerFactory&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">customize</span><span class="params">(ConfigurableWebServerFactory server)</span> &#123;</span><br><span class="line">        server.setPort(<span class="number">8081</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除了ConfigurableWebServerFactory，还有TomcatServletWebServerFactory，JettyServletWebServerFactory和UndertowServletWebServerFactory。</p><p><img src="https://s2.loli.net/2023/12/11/ixHdWVlJpzSo86y.png" alt="image-20231207150756284"></p><h3 id="切换容器"><a href="#切换容器" class="headerlink" title="切换容器"></a>切换容器</h3><p>直接在spring-boot-starter-web启动依赖包中把Tomcat依赖替换成其他容器即可</p><h3 id="随机空闲端口"><a href="#随机空闲端口" class="headerlink" title="随机空闲端口"></a>随机空闲端口</h3><p>为了防止端口冲突，Springboot可以配置并使用系统随机空闲的端口，只需要把server.port设置为0即可</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p>SpringBoot会自动扫描系统空闲的端口，并且随机选择一个使用</p><h3 id="SSL"><a href="#SSL" class="headerlink" title="SSL"></a>SSL</h3><p>通过server.ssl.*参数来配置SSL支持HTTPS的访问</p><p>本地环境中可以用JDK的keytool工具生成一个自签名的证书</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keytool -genkey -<span class="built_in">alias</span> https -keyalg RSA</span><br></pre></td></tr></table></figure><p>然后把证书复制到应用资源根目录</p><p>再配置application即可，这样你的应用就是支持HTTPS不是原来的HTTP了</p><p>当然也可以支持同时支持</p><p>SpringBoot建议，把HTTPS用配置文件形式，HTTP用java程序配置，然后再启动应用就可以看到同时支持两个协议的日志</p><p>一般情况Springboot应用不会直接对外开放，一般是内网部署，都需要负载均衡组件或者服务网关进行路由转发，所以HTTPS会配置在外网负载均衡的组件上</p><h3 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h3><p>支持会话持久化配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: <span class="number">8080</span></span><br><span class="line">  servlet:</span><br><span class="line">    session:</span><br><span class="line">      #开启持久化</span><br><span class="line">      persistent: <span class="literal">true</span></span><br><span class="line">      #持久化目录</span><br><span class="line">      store-dir: /tmp/session-store</span><br><span class="line">      #追踪模式</span><br><span class="line">      tracking-modes: </span><br><span class="line">        - cookie</span><br><span class="line">        - url</span><br></pre></td></tr></table></figure><p>更多配置参考：org.springframework.boot.web.servlet.server.Session类</p><h3 id="优雅关闭"><a href="#优雅关闭" class="headerlink" title="优雅关闭"></a>优雅关闭</h3><p>也就是在应用正常退出时可以完成对现有请求的处理并关闭相应的资源，已达到平滑退出的目的</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">shutdown:</span> <span class="string">graceful</span></span><br></pre></td></tr></table></figure><p>并且还支持一个超时参数配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">lifecycle:</span></span><br><span class="line">    <span class="attr">timeout-per-shutdown-phase:</span> <span class="string">20s</span></span><br></pre></td></tr></table></figure><p>具体可以参考启动流程的第一步。</p><h2 id="自定义Web配置"><a href="#自定义Web配置" class="headerlink" title="自定义Web配置"></a>自定义Web配置</h2><p>如果不想使用SpringBoot默认的Web配置，那么可以通过实现SpringMVC中的WebMvcConfigurer接口自定义Web配置，比如自定义拦截器，格式化器，资源处理器等…..</p><p>接口中所有方法：</p><p><img src="https://s2.loli.net/2023/12/11/zY17vXWmFeCSEUn.png" alt="image-20231207161110758"></p><p>我们可以创建一个@Configuration配置类，实现WebMvcConfigurer接口自定义拓展的方法即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    .....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="注册拦截器"><a href="#注册拦截器" class="headerlink" title="注册拦截器"></a>注册拦截器</h2><p>实现SpringMVC中的HandlerInterceptor接口创建一个拦截器</p><p>比如一个简单的登录拦截器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line">        <span class="type">String</span> <span class="variable">userSession</span> <span class="operator">=</span> (String) session.getAttribute(<span class="string">&quot;userSession&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (userSession == <span class="literal">null</span>) &#123;</span><br><span class="line">            response.sendRedirect(<span class="string">&quot;/login&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后把他注册到自定义的Web配置中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> LoginInterceptor loginInterceptor;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        registry.addInterceptor(loginInterceptor)</span><br><span class="line">                .addPathPatterns(<span class="string">&quot;/**&quot;</span>)</span><br><span class="line">                .excludePathPatterns(<span class="string">&quot;/login/**&quot;</span>)</span><br><span class="line">                .excludePathPatterns(<span class="string">&quot;/static/**&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="注册消息转换器"><a href="#注册消息转换器" class="headerlink" title="注册消息转换器"></a>注册消息转换器</h2><p>在SpringMVC中，使用了一个HttpMessageConverter消息转换器接口来转换HTTP请求和响应，比如JSON或者XML数据类型和JavaBean对象之间的互转。</p><p>SpringBoot支持以下三种JSON库的自动配置</p><ul><li>Jackson(默认)</li><li>JSON—B</li><li>Gson</li></ul><p>在Jackson的JacksonHttpMessageConvertersConfiguration消息转换器的自动配置类中就提供了JSON、XML的默认自动配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">JacksonHttpMessageConvertersConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line">   <span class="meta">@ConditionalOnClass(ObjectMapper.class)</span></span><br><span class="line">   <span class="meta">@ConditionalOnBean(ObjectMapper.class)</span></span><br><span class="line">   <span class="meta">@ConditionalOnProperty(name = HttpMessageConvertersAutoConfiguration.PREFERRED_MAPPER_PROPERTY,</span></span><br><span class="line"><span class="meta">         havingValue = &quot;jackson&quot;, matchIfMissing = true)</span></span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MappingJackson2HttpMessageConverterConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">      <span class="meta">@Bean</span></span><br><span class="line">      <span class="meta">@ConditionalOnMissingBean(value = MappingJackson2HttpMessageConverter.class,</span></span><br><span class="line"><span class="meta">            ignoredType = &#123;</span></span><br><span class="line"><span class="meta">                  &quot;org.springframework.hateoas.server.mvc.TypeConstrainedMappingJackson2HttpMessageConverter&quot;,</span></span><br><span class="line"><span class="meta">                  &quot;org.springframework.data.rest.webmvc.alps.AlpsJsonHttpMessageConverter&quot; &#125;)</span></span><br><span class="line">      MappingJackson2HttpMessageConverter <span class="title function_">mappingJackson2HttpMessageConverter</span><span class="params">(ObjectMapper objectMapper)</span> &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MappingJackson2HttpMessageConverter</span>(objectMapper);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line">   <span class="meta">@ConditionalOnClass(XmlMapper.class)</span></span><br><span class="line">   <span class="meta">@ConditionalOnBean(Jackson2ObjectMapperBuilder.class)</span></span><br><span class="line">   <span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MappingJackson2XmlHttpMessageConverterConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">      <span class="meta">@Bean</span></span><br><span class="line">      <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">      <span class="keyword">public</span> MappingJackson2XmlHttpMessageConverter <span class="title function_">mappingJackson2XmlHttpMessageConverter</span><span class="params">(</span></span><br><span class="line"><span class="params">            Jackson2ObjectMapperBuilder builder)</span> &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MappingJackson2XmlHttpMessageConverter</span>(builder.createXmlMapper(<span class="literal">true</span>).build());</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果默认的配置不符合要求，则可以在自己的配置文件中进行自定义覆盖，如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> MappingJackson2HttpMessageConverter <span class="title function_">mappingJackson2HttpMessageConverter</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">MappingJackson2HttpMessageConverter</span> <span class="variable">converter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MappingJackson2HttpMessageConverter</span>();</span><br><span class="line">    <span class="type">ObjectMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">    mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">SimpleModule</span> <span class="variable">module</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleModule</span>();</span><br><span class="line">    <span class="keyword">module</span>.addDeserializer(String.class, <span class="keyword">new</span> <span class="title class_">StringWithoutSpaceDeserializer</span>(String.class));</span><br><span class="line">    mapper.registerModule(<span class="keyword">module</span>);</span><br><span class="line"></span><br><span class="line">    converter.setObjectMapper(mapper);</span><br><span class="line">    <span class="keyword">return</span> converter;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringWithoutSpaceDeserializer</span> <span class="keyword">extends</span> <span class="title class_">StdDeserializer</span>&lt;String&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">6972065572263950443L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">StringWithoutSpaceDeserializer</span><span class="params">(Class&lt;String&gt; vc)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(vc);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">deserialize</span><span class="params">(JsonParser p, DeserializationContext deserializationContext)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">return</span> StringUtils.trimToEmpty(p.getText());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个自定义的JSON消息转换器设置类反序列化过程中遇到不明确的参数时不用失败，并且配置了一个字符串的反序列化器，用来过滤HTTP请求字符串参数首尾的空格</p><p>如果不是覆盖自动配置已有的消息转换器，而是需要额外添加自定义的转换器，则需要使用SpringBoot的HttpMessageConverters类(支持多个自定义的HttpMessageConverter的添加和注册)</p><h2 id="注册类型转换器"><a href="#注册类型转换器" class="headerlink" title="注册类型转换器"></a>注册类型转换器</h2><p>SpringMVC中的Converter接口可以转换参数的类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomConverter</span> <span class="keyword">implements</span> <span class="title class_">Converter</span>&lt;String, String&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">convert</span><span class="params">(String source)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNoneEmpty(source)) &#123;</span><br><span class="line">            source = source.trim();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> source;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addFormatters</span><span class="params">(FormatterRegistry registry)</span> &#123;</span><br><span class="line">        registry.addConverter(<span class="keyword">new</span> <span class="title class_">CustomConverter</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个转换器逻辑很简单，就是去掉请求参数中的首位空格。</p><h2 id="注册Servlet、Filter、Listener"><a href="#注册Servlet、Filter、Listener" class="headerlink" title="注册Servlet、Filter、Listener"></a>注册Servlet、Filter、Listener</h2><h3 id="SpringBoot手动注册"><a href="#SpringBoot手动注册" class="headerlink" title="SpringBoot手动注册"></a>SpringBoot手动注册</h3><p>SpringBoot提供了以下三个注册类：</p><ul><li>ServletRegistrationBean</li><li>FilterRegistrationBean</li><li>ServletListenerRegistrationBean</li></ul><p>分别用来注册Servlet、Filter、Listener</p><p>尝试注册Servlet，创建一个Servlet：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegisterServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> getServletConfig().getInitParameter(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">sex</span> <span class="operator">=</span> getServletConfig().getInitParameter(<span class="string">&quot;sex&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        resp.getOutputStream().println(<span class="string">&quot;name: &quot;</span>+name);</span><br><span class="line">        resp.getOutputStream().println(<span class="string">&quot;sex: &quot;</span>+sex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后随便一个@Configuration配置类中注册即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> ServletRegistrationBean <span class="title function_">registerServlet</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ServletRegistrationBean</span> <span class="variable">servletRegistrationBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServletRegistrationBean</span>(<span class="keyword">new</span> <span class="title class_">RegisterServlet</span>(), <span class="string">&quot;/registerServlet&quot;</span>);</span><br><span class="line">    servletRegistrationBean.addInitParameter(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;registerServlet&quot;</span>);</span><br><span class="line">    servletRegistrationBean.addInitParameter(<span class="string">&quot;sex&quot;</span>, <span class="string">&quot;boy&quot;</span>);</span><br><span class="line">    servletRegistrationBean.setIgnoreRegistrationFailure(<span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">return</span> servletRegistrationBean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后测试的时候记住：要关一下我们的登录拦截器，因为还没有存Session会被拦下来</p><p><img src="https://s2.loli.net/2023/12/11/UgCVE7K3OQwSDdy.png" alt="image-20231207171730734"></p><p>注册Filter和Listener是一样的操作。</p><h3 id="组件扫描注册"><a href="#组件扫描注册" class="headerlink" title="组件扫描注册"></a>组件扫描注册</h3><p>Servlet3.0之前，Servlet、Filter、Listener都需要在web.xml中配置，Servlet3.0之后就不需要了，所有的组件都可以通过代码配置或者注解来实现相关功能。</p><p><img src="https://s2.loli.net/2023/12/11/xVihmJHuzMPtZTb.png" alt="image-20231207172540835"></p><p>提供了这三个注解来代替相关配置：</p><ul><li>@WebServlet—&gt;代替Servlet配置</li><li>@WebFilter—&gt;代替Filter配置</li><li>@WebListener—&gt;代替Listener配置</li></ul><p>Servlet配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(name = &quot;javaServlet&quot;, urlPatterns = &quot;/javaServlet&quot;, asyncSupported = true,</span></span><br><span class="line"><span class="meta">        initParams = &#123;</span></span><br><span class="line"><span class="meta">                @WebInitParam(name = &quot;name&quot;, value = &quot;javaServlet&quot;),</span></span><br><span class="line"><span class="meta">                @WebInitParam(name = &quot;sex&quot;, value = &quot;girl&quot;)</span></span><br><span class="line"><span class="meta">        &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JavaServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> getServletConfig().getInitParameter(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">sex</span> <span class="operator">=</span> getServletConfig().getInitParameter(<span class="string">&quot;sex&quot;</span>);</span><br><span class="line"></span><br><span class="line">        resp.getOutputStream().println(<span class="string">&quot;name: &quot;</span> + name);</span><br><span class="line">        resp.getOutputStream().println(<span class="string">&quot;sex: &quot;</span> + sex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Filter配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebFilter(filterName = &quot;javaFilter&quot;, urlPatterns = &quot;/*&quot;,</span></span><br><span class="line"><span class="meta">        initParams = &#123;</span></span><br><span class="line"><span class="meta">                @WebInitParam(name = &quot;name&quot;, value = &quot;javaServlet&quot;),</span></span><br><span class="line"><span class="meta">                @WebInitParam(name = &quot;code&quot;, value = &quot;1234&quot;)</span></span><br><span class="line"><span class="meta">        &#125;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JavaFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        log.info(<span class="string">&quot;javaFilter init&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> filterConfig.getInitParameter(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> filterConfig.getInitParameter(<span class="string">&quot;code&quot;</span>);</span><br><span class="line">        log.info(<span class="string">&quot;name：&quot;</span> + name);</span><br><span class="line">        log.info(<span class="string">&quot;code：&quot;</span> + code);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        log.info(<span class="string">&quot;java filter processing&quot;</span>);</span><br><span class="line">        filterChain.doFilter(servletRequest, servletResponse);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;java filter destroy&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为是SpringBoot项目记得去主启动添加扫描包的操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ServletComponentScan(&quot;com.ldd.servlet&quot;)</span></span><br></pre></td></tr></table></figure><p>现在随便去访问一个地址比如刚刚的javaServlet</p><p>控制台信息：</p><p><img src="https://s2.loli.net/2023/12/11/fioLwMEzAvNceFU.png" alt="image-20231207174629261"></p><p>Listener一样的不写了。</p><h3 id="动态注册"><a href="#动态注册" class="headerlink" title="动态注册"></a>动态注册</h3><p>如果想在SpringBoot中完成Servlet、Filter、Listener的初始化操作，则需要在Spring中实现ServletContextInitializer接口并注册一个Bean，然后通过ServletContext提供的几个方法动态注册Web组件。</p><p><img src="https://s2.loli.net/2023/12/11/ev1BlAMR2pIYC6q.png" alt="image-20231207175532904"></p><p>先创建一个Servlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InitServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> getServletConfig().getInitParameter(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">sex</span> <span class="operator">=</span> getServletConfig().getInitParameter(<span class="string">&quot;sex&quot;</span>);</span><br><span class="line"></span><br><span class="line">        resp.getOutputStream().println(<span class="string">&quot;name: &quot;</span> + name);</span><br><span class="line">        resp.getOutputStream().println(<span class="string">&quot;sex: &quot;</span> + sex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用组件的方式注册</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletConfig</span> <span class="keyword">implements</span> <span class="title class_">ServletContextInitializer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onStartup</span><span class="params">(ServletContext servletContext)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        ServletRegistration.<span class="type">Dynamic</span> <span class="variable">initServlet</span> <span class="operator">=</span> servletContext.addServlet(<span class="string">&quot;initServlet&quot;</span>, InitServlet.class);</span><br><span class="line">        initServlet.addMapping(<span class="string">&quot;/initServlet&quot;</span>);</span><br><span class="line">        initServlet.setInitParameter(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;initServlet&quot;</span>);</span><br><span class="line">        initServlet.setInitParameter(<span class="string">&quot;sex&quot;</span>,<span class="string">&quot;none&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><p><img src="https://s2.loli.net/2023/12/11/kOtx5Zd2cKFUn1E.png" alt="image-20231207180431329"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>注册Servlet、Filter、Listener的方式只有有上面三种，但是第二中扫描组件+注解的形式是最简洁的。</p><h2 id="静态资源处理"><a href="#静态资源处理" class="headerlink" title="静态资源处理"></a>静态资源处理</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;classpath:/META-INF/resources/&quot;, </span><br><span class="line">&quot;classpath:/resources/&quot;, </span><br><span class="line">&quot;classpath:/static/&quot;, </span><br><span class="line">&quot;classpath:/public/&quot;</span><br></pre></td></tr></table></figure><p>默认情况下，SpringBoot加载的classpath下的静态资源目录如上面</p><p>如果需要替换这些默认的资源目录位置，则可以通过spring.web.resources.static-location参数指定自定义的资源目录</p><p>Springboot默认把静态资源映射到&#x2F;**访问路径，但是也可以使用spring.mvc.static-path-pattern参数进行调整</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mvc:</span></span><br><span class="line">    <span class="attr">static-path-pattern:</span> <span class="string">&quot;/pub/**&quot;</span></span><br></pre></td></tr></table></figure><p>这里将所有资源访问路径重新定到&#x2F;pub&#x2F;**，比如以前static目录下的静态资源是直接用&#x2F;**访问的，现在需要用&#x2F;pub&#x2F;**访问</p><p>当然SpringMVC默认使用addResourceHandlers处理器类来处理静态资源，也可以实现自己的处理器来改变默认的处理器行为</p><p>WebConfig重写addResourceHandlers方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> &#123;</span><br><span class="line">    registry.addResourceHandler(<span class="string">&quot;/assets/**&quot;</span>).addResourceLocations(<span class="string">&quot;classpath:/assets/&quot;</span>);</span><br><span class="line">    registry.addResourceHandler(<span class="string">&quot;/dist/**&quot;</span>).addResourceLocations(<span class="string">&quot;classpath:/dist/&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里就添加了两个classpath下静态目录的映射</p><p>测试：</p><p>我们在resources目录下新建一个dist目录，然后放一个index.html</p><p><img src="https://s2.loli.net/2023/12/11/WDN4PuVpfEJ2b6q.png" alt="image-20231207182632248"></p><h2 id="模版引擎"><a href="#模版引擎" class="headerlink" title="模版引擎"></a>模版引擎</h2><p>支持的模版引擎：</p><ul><li>FreeMarker</li><li>Thymeleaf(默认)</li><li>Mustache</li></ul><p>导入Thymeleaf启动器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>具体有什么配置可以参考ThymeleafProperties：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;spring.thymeleaf&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThymeleafProperties</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Charset</span> <span class="variable">DEFAULT_ENCODING</span> <span class="operator">=</span> StandardCharsets.UTF_8;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DEFAULT_PREFIX</span> <span class="operator">=</span> <span class="string">&quot;classpath:/templates/&quot;</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DEFAULT_SUFFIX</span> <span class="operator">=</span> <span class="string">&quot;.html&quot;</span>;</span><br><span class="line">   ...</span><br></pre></td></tr></table></figure><p>具体Thymeleaf使用可以参考：<a href="https://gh.qisui.xyz/undefined/e20c50ed.html#11-Thymeleaf%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E">SpringBoot-Config | 七岁就很浪 (qisui.xyz)-Thymeleaf使用</a></p><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><h3 id="默认的异常处理"><a href="#默认的异常处理" class="headerlink" title="默认的异常处理"></a>默认的异常处理</h3><p>SpringBoot提供了一个默认的&#x2F;error映射处理所有的异常错误，并且提供了一个默认的Whitelabel</p><p><img src="https://s2.loli.net/2023/12/11/hvij2UYqtsbFgXk.png" alt="image-20231208101816420"></p><p>对应的错误处理器实现类为BasicErrorController，它实现了ErrorController接口</p><p>该错误处理器可以通过server.error系列参数配置一些错误信息</p><h3 id="自定义全局异常"><a href="#自定义全局异常" class="headerlink" title="自定义全局异常"></a>自定义全局异常</h3><p>使用@ControllerAdvice+@ExceptionHandler注解实现全局异常处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionHandler</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(value = &#123;Exception.class&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;?&gt; handlerException(HttpServletRequest request,Throwable ex)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;&gt;(<span class="string">&quot;global exception&quot;</span>, HttpStatus.OK);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@ExceptionHandler(value &#x3D; {Exception.class})可以指定要处理的方法，value也可以指定多个异常，@ControllerAdvice类中也可以指定多个@ExceptionHandler处理方法</p><h3 id="自定义异常状态码页面"><a href="#自定义异常状态码页面" class="headerlink" title="自定义异常状态码页面"></a>自定义异常状态码页面</h3><p>可以在任何一个静态目录下创建一个&#x2F;error目录，并创建对应状态码静态模版文件</p><h2 id="参数校验"><a href="#参数校验" class="headerlink" title="参数校验"></a>参数校验</h2><h3 id="概述-2"><a href="#概述-2" class="headerlink" title="概述"></a>概述</h3><p>和配置参数校验一样，SpringBoot同样支持基于JSR-303规范对接口参数校验</p><p>比如常用的hibernate-validator就是基于JSR-303规范实现的依赖</p><p>导入启动器：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-validation<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="注解约束"><a href="#注解约束" class="headerlink" title="注解约束"></a>注解约束</h3><p><img src="https://s2.loli.net/2023/12/11/V3nNCY1sAgzLmWD.png" alt="image-20231208103741239"></p><h3 id="参数校验演示"><a href="#参数校验演示" class="headerlink" title="参数校验演示"></a>参数校验演示</h3><p>使用@Valid(Jakarta规范)或者@Validated(Spring支持的JSR-303)注解来校验参数</p><p>一般使用@Validated，因为功能更强大，支持分组校验等</p><p>用法：</p><ul><li>校验接口参数类时，将@Validated注解放在方法参数之前，然后将约束注解放在类成员变量前面</li><li>检验单个参数时，将@Validated注解放在Controller类上面，然后将约束注解放在方法参数类之前</li></ul><p>参数类示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(String userName, Integer age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userName = userName;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="meta">@Size(min = 5, max = 10)</span></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="keyword">private</span> String memo;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用户年龄不能为空，用户名长度在5-10之间</p><p>校验这种参数类时需要再接口方法参数之前放置@Validated注解，校验单个参数时就在Controller类上面放置</p><p>@Validated注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResponseBodyController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/user/json/&#123;userId&#125;&quot;, produces = MediaType.APPLICATION_JSON_VALUE)</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getJsonUserInfo</span><span class="params">(<span class="meta">@PathVariable(&quot;userId&quot;)</span> <span class="meta">@Size(min = 5, max = 8)</span> String userId)</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;大大怪&quot;</span>, <span class="number">18</span>);</span><br><span class="line">        user.setId(Long.valueOf(userId));</span><br><span class="line">        log.info(<span class="string">&quot;user info: &#123;&#125;&quot;</span>, user);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity <span class="title function_">saveUser</span><span class="params">(<span class="meta">@RequestBody</span> <span class="meta">@Validated</span> User user)</span>&#123;</span><br><span class="line">        user.setId(RandomUtils.nextLong());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>(user, HttpStatus.OK);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果要返回具体的参数错误，则需要拦截对应的MethodArgumentNotValidException异常，并做出对应的返回处理</p><p>注：实际开发中把接口响应信息封装成带有code、msg、data的标准化Json格式的数据返回，然后将错误信息放在msg中</p><h2 id="国际化"><a href="#国际化" class="headerlink" title="国际化"></a>国际化</h2><h3 id="概述-3"><a href="#概述-3" class="headerlink" title="概述"></a>概述</h3><p>也就是满足不同语言偏好的用户</p><p>SpringBoot已经对国际化做了自动配置，国际化自动配置类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.boot.autoconfigure.context.MessageSourceAutoConfiguration</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AutoConfiguration</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(name = AbstractApplicationContext.MESSAGE_SOURCE_BEAN_NAME, search = SearchStrategy.CURRENT)</span></span><br><span class="line"><span class="meta">@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE)</span></span><br><span class="line"><span class="meta">@Conditional(ResourceBundleCondition.class)</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span></span><br><span class="line"><span class="meta">@ImportRuntimeHints(MessageSourceRuntimeHints.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MessageSourceAutoConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Resource[] NO_RESOURCES = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="meta">@ConfigurationProperties(prefix = &quot;spring.messages&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> MessageSourceProperties <span class="title function_">messageSourceProperties</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MessageSourceProperties</span>();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="keyword">public</span> MessageSource <span class="title function_">messageSource</span><span class="params">(MessageSourceProperties properties)</span> &#123;</span><br><span class="line">      <span class="type">ResourceBundleMessageSource</span> <span class="variable">messageSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ResourceBundleMessageSource</span>();</span><br><span class="line">      <span class="keyword">if</span> (StringUtils.hasText(properties.getBasename())) &#123;</span><br><span class="line">         messageSource.setBasenames(StringUtils</span><br><span class="line">            .commaDelimitedListToStringArray(StringUtils.trimAllWhitespace(properties.getBasename())));</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (properties.getEncoding() != <span class="literal">null</span>) &#123;</span><br><span class="line">         messageSource.setDefaultEncoding(properties.getEncoding().name());</span><br><span class="line">      &#125;</span><br><span class="line">      messageSource.setFallbackToSystemLocale(properties.isFallbackToSystemLocale());</span><br><span class="line">      <span class="type">Duration</span> <span class="variable">cacheDuration</span> <span class="operator">=</span> properties.getCacheDuration();</span><br><span class="line">      <span class="keyword">if</span> (cacheDuration != <span class="literal">null</span>) &#123;</span><br><span class="line">         messageSource.setCacheMillis(cacheDuration.toMillis());</span><br><span class="line">      &#125;</span><br><span class="line">      messageSource.setAlwaysUseMessageFormat(properties.isAlwaysUseMessageFormat());</span><br><span class="line">      messageSource.setUseCodeAsDefaultMessage(properties.isUseCodeAsDefaultMessage());</span><br><span class="line">      <span class="keyword">return</span> messageSource;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   .....</span><br></pre></td></tr></table></figure><p>主要是注册了一个MessageSource实例，通过一系列spring.messagee.*参数可以完成自动配置，查看参数绑定类MessageSourceProperties源码，以下是几个重要参数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MessageSourceProperties</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="type">String</span> <span class="variable">basename</span> <span class="operator">=</span> <span class="string">&quot;messages&quot;</span>;</span><br><span class="line">    </span><br><span class="line">   <span class="keyword">private</span> <span class="type">Charset</span> <span class="variable">encoding</span> <span class="operator">=</span> StandardCharsets.UTF_8</span><br><span class="line">       </span><br><span class="line">   <span class="meta">@DurationUnit(ChronoUnit.SECONDS)</span></span><br><span class="line">   <span class="keyword">private</span> Duration cacheDuration;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">fallbackToSystemLocale</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>basename：指定要扫描的国际化文件名</li><li>encoding：默认的编码</li><li>cacheDuration：国家化资源文件被加载后的缓存时间，默认单位是秒，不指定则默认为永久</li><li>fallbackToSystemLocale：找不到当前语言文件是否降级为当前操作系统的语言对应文件，默认是true</li></ul><h3 id="自动国际化"><a href="#自动国际化" class="headerlink" title="自动国际化"></a>自动国际化</h3><p>需要用到web启动器和thymeleaf启动器即可</p><p>配置国际化资源文件的搜索路径：</p><p><img src="https://s2.loli.net/2023/12/11/GdlHj2DP9tgrzY7.png" alt="image-20231208113117580"></p><p>记得编译器文件编码设置成UTF-8不然绝对错误</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">messages:</span></span><br><span class="line">    <span class="attr">besename:</span> <span class="string">i18n/common,</span> <span class="string">i18n/index</span></span><br><span class="line">    <span class="attr">fallback-to-system-locale:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>common.properties:</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">brand</span>=<span class="string">七岁就很浪</span></span><br></pre></td></tr></table></figure><p>index.properties:</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">index.hi</span>=<span class="string">Hello</span></span><br><span class="line"><span class="attr">index.welcome</span>=<span class="string">Welcome</span></span><br></pre></td></tr></table></figure><p>index_zh_CN.properties:</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">index.hi</span>=<span class="string">你好</span></span><br><span class="line"><span class="attr">index.welcome</span>=<span class="string">欢迎光临</span></span><br></pre></td></tr></table></figure><p>index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>index<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">th:text</span>=<span class="string">&quot;#&#123;brand&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">th:text</span>=<span class="string">&quot;#&#123;index.hi&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">th:text</span>=<span class="string">&quot;#&#123;index.welcome&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(value = &quot;/index&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">index</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/12/11/hTn9aPsumpwKt8M.png" alt="image-20231208113213421"></p><h3 id="切换国际化"><a href="#切换国际化" class="headerlink" title="切换国际化"></a>切换国际化</h3><p>注册一个LocalResolver区域解析器和区域拦截器</p><p>WebConfig:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Locale 默认设置为英文</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> LocaleResolver</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> LocaleResolver <span class="title function_">localeResolver</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">SessionLocaleResolver</span> <span class="variable">sessionLocaleResolver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SessionLocaleResolver</span>();</span><br><span class="line">    sessionLocaleResolver.setDefaultLocale(Locale.US);</span><br><span class="line">    <span class="keyword">return</span> sessionLocaleResolver;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">    registry.addInterceptor(localeChangeInterceptor());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 切换语言拦截器，通过url?lang=zh_CN形式进行切换</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> LocaleChangeInterceptor <span class="title function_">localeChangeInterceptor</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">LocaleChangeInterceptor</span> <span class="variable">localeChangeInterceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LocaleChangeInterceptor</span>();</span><br><span class="line">    localeChangeInterceptor.setParamName(<span class="string">&quot;lang&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> localeChangeInterceptor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li><p>首先注册了一个LocaleResolver实例，LocaleResolver接口有很多实现类，比如通过Session、Cookie…</p><p>上面使用的就是SessionLocaleResolver，并且设置默认为英文</p></li><li><p>然后注册了一个LocaleChangeInterceptor拦截器实例，设置参数名</p></li></ul><p>测试：</p><p>默认显示英文，因为common是公共资源没有国际化</p><p><img src="https://s2.loli.net/2023/12/11/lwsu5xHnk8K4erZ.png" alt="image-20231208114614598"></p><p>传递中文区域参数</p><p><img src="https://s2.loli.net/2023/12/11/2L8isTe7DJV9fWH.png" alt="image-20231208114653396"></p><p>再传一个不存在的，又回到默认</p><p><img src="https://s2.loli.net/2023/12/11/YLD613G57pQOPNo.png" alt="image-20231208114713986"></p><h2 id="分布式会话"><a href="#分布式会话" class="headerlink" title="分布式会话"></a>分布式会话</h2><p>传统的会话机制保存在应用服务器端，会话共享需要借助Servlet容器来实现，比如Tomcat提供了Session复制的功能，简单的集群复制没有什么问题，但是，如果集群节点过多，就会因网络延迟造成会话不能及时同步，进而影响用户体验。</p><p>SpringSession让集群变得轻而易举，它是Spring提供的一个用于管理用户会话的框架，可以将Session数据存储到第三方存储中替换容器中的HttpSession机制，而无需绑定特定对的应用容器。</p><p>SpringBoot支持的Session存储：</p><ul><li>Redis</li><li>JDBC</li><li>Hazelcast</li><li>MongoDB</li></ul><p>如果类路径中存在以上单个SpringSession模块，则SpringBoot会自动使用该存储实现，如果有多个实现，则SpringBoot按以上列举顺序的组件来选择，如果一个没有就选择默认的SpringSession</p><p>Session的自动配置类为org.springframework.boot.autoconfigure.session.SessionAutoConfiguration,它同样被注册在新的org.springframework.boot.autoconfigure.AutoConfiguration.imports自动配置文件中，SpringBoot自动配置后，就不需要使用@Enable*HttpSession注解了,redis也是这样</p><p>Session参数绑定类为SessionProperties，通过一系列spring.session.*参数配置Session会话，每个存储也都有自己的扩展实现，比如Redis就是spring.session.redis.*</p><p>在此之前一定要有Redis容器，自行安装。</p><p>首先添加Redis和相关的会话依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.session<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-session-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后添加Redis</p><p>会话及连接配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">session:</span></span><br><span class="line">    <span class="attr">timeout:</span> <span class="string">30s</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br></pre></td></tr></table></figure><p>spring.session.timeout默认是30分钟</p><p>然后新建几个接口来测试会话</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IndexController</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> HttpSession httpSession;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 登录页面</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/login&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">login</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;login  page&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 登录请求</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/login/submit&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">loginSubmit</span><span class="params">(<span class="meta">@RequestParam(&quot;username&quot;)</span> String username)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotBlank(username))&#123;</span><br><span class="line">            httpSession.setAttribute(<span class="string">&quot;username&quot;</span>,username);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;/index&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;/login&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 首页</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/index2&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">index</span><span class="params">()</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;session  id  :&#123;&#125;&quot;</span>,httpSession.getId());</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index page:&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 退出登录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/logout&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">logout</span><span class="params">()</span>&#123;</span><br><span class="line">        httpSession.invalidate();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;/login&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>验证Redis是否存储了会话</p><p>127.0.0.1:6379&gt;<code>keys*</code>即可</p><h2 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h2><p>首先了解同源策略</p><p>同源策略（Same-Origin Policy）是一种在Web浏览器中实施的安全机制，它旨在防止一个网页上的脚本通过XMLHttpRequest或Fetch API等方式去请求另一个域下的资源。同源策略有助于防止恶意网站利用用户身份在其他站点上执行恶意操作。</p><p>同源策略的要求是：</p><ol><li>协议相同：两个页面的协议必须相同，例如，一个页面使用HTTP协议，另一个页面也必须使用HTTP协议，而不是HTTPS协议。</li><li>域名相同：两个页面的域名必须相同，即二级域名、三级域名等必须相同。</li><li>端口相同：如果两个页面使用了端口号，那么端口号也必须相同。</li></ol><p>如果以上任一条件不满足，就认为两个页面不同源，同源策略将会阻止它们之间的一些操作。这有助于减少潜在的安全风险，比如阻止恶意网站通过脚本访问用户在其他站点上的敏感信息。</p><p>同源策略并不是绝对的安全措施，因为有时候确实需要不同源的页面之间进行一些交互。为了在不同源的页面之间实现交互，可以使用一些跨域通信的技术，如JSONP、CORS（跨域资源共享）等。这些技术允许开发者有限度地突破同源策略的限制，以实现安全的跨域通信。</p><p>SpringMVC本身是支持跨域请求的，只需要在需要跨域的方法上使用@CrossOrigin注解即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResponseBodyController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CrossOrigin</span></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/user/json/&#123;userId&#125;&quot;, produces = MediaType.APPLICATION_JSON_VALUE)</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getJsonUserInfo</span><span class="params">(<span class="meta">@PathVariable(&quot;userId&quot;)</span> <span class="meta">@Size(min = 5, max = 8)</span> String userId)</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;大大怪&quot;</span>, <span class="number">18</span>);</span><br><span class="line">        user.setId(Long.valueOf(userId));</span><br><span class="line">        log.info(<span class="string">&quot;user info: &#123;&#125;&quot;</span>, user);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>默认的@CrossOrigin支持：</p><ul><li>所有的请求来源</li><li>所有的HTTP头</li><li>所有的HTTP方法</li></ul><p>如果有需要可以在@CrossOrigin注解中指定跨域的详细参数，除了作用在方法上，也可以作用在类上，这样它的所有方法都可以跨域了，也可以在WebMvcConfigurer配置类中全局添加跨域注册的功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> &#123;</span><br><span class="line">    registry.addMapping(<span class="string">&quot;/user/**&quot;</span>)</span><br><span class="line">            .allowedMethods(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;POST&quot;</span>)</span><br><span class="line">            .allowedOrigins(<span class="string">&quot;https://gh.qisui.xyz&quot;</span>)</span><br><span class="line">            .allowedHeaders(<span class="string">&quot;header1&quot;</span>, <span class="string">&quot;header2&quot;</span>, <span class="string">&quot;header3&quot;</span>)</span><br><span class="line">            .exposedHeaders(<span class="string">&quot;header1&quot;</span>, <span class="string">&quot;header2&quot;</span>)</span><br><span class="line">            .allowCredentials(<span class="literal">true</span>).maxAge(<span class="number">3600</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是一般接口不会对外暴露，这时候统一用Nginx上配置跨域</p><h2 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h2><p>具体参考：<a href="https://gh.qisui.xyz/undefined/6d7b34b1.html#SpringBoot-Security">SpringBoot-Security | 七岁就很浪 (qisui.xyz)</a></p><p>默认的密码：</p><p><img src="https://s2.loli.net/2023/12/11/RFVLqKCguZt1Ycl.png" alt="image-20231208152255416"></p><h2 id="REST服务调用"><a href="#REST服务调用" class="headerlink" title="REST服务调用"></a>REST服务调用</h2><p>SpringBoot中实现REST服务调用有以下两种方式：</p><ul><li>RestTemplate（Servlet）</li><li>WebClient（Reactive）</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;SpringBootWeb核心应用&quot;&gt;&lt;a href=&quot;#SpringBootWeb核心应用&quot; class=&quot;headerlink&quot; title=&quot;SpringBootWeb核心应用&quot;&gt;&lt;/a&gt;SpringBootWeb核心应用&lt;/h1&gt;&lt;h2 id=&quot;概述&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="SpringBoot3" scheme="https://humbledong.github.io/categories/SpringBoot3/"/>
    
    
    <category term="SpringBoot3" scheme="https://humbledong.github.io/tags/SpringBoot3/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot日志管理</title>
    <link href="https://humbledong.github.io/undefined/7d4079d0.html"/>
    <id>https://humbledong.github.io/undefined/7d4079d0.html</id>
    <published>2023-10-18T06:14:20.000Z</published>
    <updated>2024-01-08T07:04:41.795Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot日志管理"><a href="#SpringBoot日志管理" class="headerlink" title="SpringBoot日志管理"></a>SpringBoot日志管理</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>SpringBoot框架内部提供了几种日志框架的启动器：</p><table><thead><tr><th>日志框架</th><th>启动器</th></tr></thead><tbody><tr><td>Java Util Logging</td><td>spring-boot-starter-logging(默认)</td></tr><tr><td>Logback</td><td>spring-boot-starter-logging</td></tr><tr><td>Log4j2</td><td>spring-boot-starter-log4j</td></tr></tbody></table><h2 id="日志格式"><a href="#日志格式" class="headerlink" title="日志格式"></a>日志格式</h2><p>日志主要包含以下信息：</p><ul><li>日期时间：精确到毫秒，易于排序</li><li>日志级别：文章后面单独介绍</li><li>应用进程ID</li><li>分隔符(–)：用来区分实际开始的日志</li><li>线程名称：</li><li>日志名称：一般值日志出的当前类的缩写</li><li>日志具体内容</li></ul><h2 id="控制台日志"><a href="#控制台日志" class="headerlink" title="控制台日志"></a>控制台日志</h2><p>SpringBoot默认从控制台输出日志，默认情况下，会记录ERROR，WARN，INFO级别的日志，如果要让应用输出更多日志，可以在应用启动时使用–debug标志来启动调试模式</p><p>注：</p><ul><li>启动应用的Debug调试模式，并不是让应用输出所有DEBUG级别的日志，而是让应用输出更多的框架核心日志，框架核心日志包括嵌入式容器，SpringBoot等组件的更多日志</li><li>另外，还可以开启应用的trace追踪模式，日志要比Debug调试模式更详细</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java-jar xxx.jar -trace</span><br></pre></td></tr></table></figure><h2 id="日志文件"><a href="#日志文件" class="headerlink" title="日志文件"></a>日志文件</h2><p>SpringBoot默认是把日志输出到控制台</p><p>将日志输出到日志文件，可以设置这两个属性</p><table><thead><tr><th>配置参数</th><th>说明</th></tr></thead><tbody><tr><td>loggin.file.name</td><td>指定需要输出日志文件名称</td></tr><tr><td>logging.file.path</td><td>指定需要输出日志文件路径</td></tr></tbody></table><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">file:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">spring-boot-logging/logs/ldd.log</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/12/11/5XgryI3V4cNQBmH.png" alt="image-20231207105913236"></p><p>其原理就是在SpringBoot主包的自动配置文件中注册一个LoggingApplicationListener监听器，然后监听ApplicationEnvironmentPreparedEvent事件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">onApplicationEnvironmentPreparedEvent</span><span class="params">(ApplicationEnvironmentPreparedEvent event)</span> &#123;</span><br><span class="line">   <span class="type">SpringApplication</span> <span class="variable">springApplication</span> <span class="operator">=</span> event.getSpringApplication();</span><br><span class="line">   <span class="keyword">if</span> (<span class="built_in">this</span>.loggingSystem == <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="built_in">this</span>.loggingSystem = LoggingSystem.get(springApplication.getClassLoader());</span><br><span class="line">   &#125;</span><br><span class="line">   initialize(event.getEnvironment(), springApplication.getClassLoader());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">initialize</span><span class="params">(ConfigurableEnvironment environment, ClassLoader classLoader)</span> &#123;</span><br><span class="line">   getLoggingSystemProperties(environment).apply();</span><br><span class="line">   <span class="built_in">this</span>.logFile = LogFile.get(environment);</span><br><span class="line">   <span class="keyword">if</span> (<span class="built_in">this</span>.logFile != <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="built_in">this</span>.logFile.applyToSystemProperties();</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="built_in">this</span>.loggerGroups = <span class="keyword">new</span> <span class="title class_">LoggerGroups</span>(DEFAULT_GROUP_LOGGERS);</span><br><span class="line">   initializeEarlyLoggingLevel(environment);</span><br><span class="line">   initializeSystem(environment, <span class="built_in">this</span>.loggingSystem, <span class="built_in">this</span>.logFile);</span><br><span class="line">   initializeFinalLoggingLevels(environment, <span class="built_in">this</span>.loggingSystem);</span><br><span class="line">   registerShutdownHookIfNecessary(environment, <span class="built_in">this</span>.loggingSystem);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后initialize初始化方法中通过LogFile#get方法获取具体的日志文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> LogFile <span class="title function_">get</span><span class="params">(PropertyResolver propertyResolver)</span> &#123;</span><br><span class="line">   <span class="type">String</span> <span class="variable">file</span> <span class="operator">=</span> propertyResolver.getProperty(FILE_NAME_PROPERTY);</span><br><span class="line">   <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> propertyResolver.getProperty(FILE_PATH_PROPERTY);</span><br><span class="line">   <span class="keyword">if</span> (StringUtils.hasLength(file) || StringUtils.hasLength(path)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LogFile</span>(file, path);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个ApplicationEnvironmentPreparedEvent是在PreparedEnvironment方法准备环境阶段时发布的</p><p>SpringBoot在获取日志配置的时候为什么不是用@ConfigurationProperties注解绑定配置而是手动获取配置呢？这是因为日志是在ApplicationContext创建之前初始化的，所以此时还无法获取环境中的配置</p><h2 id="日志级别"><a href="#日志级别" class="headerlink" title="日志级别"></a>日志级别</h2><table><thead><tr><th>日志级别</th><th>说明</th></tr></thead><tbody><tr><td>OFF</td><td>关闭日志</td></tr><tr><td>TRACE</td><td>追踪</td></tr><tr><td>DEBUG</td><td>调试</td></tr><tr><td>INFO</td><td>信息</td></tr><tr><td>WARN</td><td>警告</td></tr><tr><td>ERROR</td><td>错误</td></tr><tr><td>FATAL</td><td>致命</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">LogLevel</span> &#123;</span><br><span class="line"></span><br><span class="line">   TRACE(Log::trace),</span><br><span class="line"></span><br><span class="line">   DEBUG(Log::debug),</span><br><span class="line"></span><br><span class="line">   INFO(Log::info),</span><br><span class="line"></span><br><span class="line">   WARN(Log::warn),</span><br><span class="line"></span><br><span class="line">   ERROR(Log::error),</span><br><span class="line"></span><br><span class="line">   FATAL(Log::fatal),</span><br><span class="line"></span><br><span class="line">   OFF(<span class="literal">null</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>所有级别可查看的类LogLevel</p><p>默认输出INFO级别及以上的日志，Logback不支持FATAL级别，它会映射到ERROR级别上</p><p>日志级别配置格式为：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">logging.level.&lt;logger-name&gt;</span> =<span class="string">&lt;level&gt;</span></span><br></pre></td></tr></table></figure><p>根包的日志配置格式为：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">logging.level.root</span>=<span class="string">&lt;level&gt;</span></span><br></pre></td></tr></table></figure><p>比如这一段配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">root:</span> <span class="string">info</span></span><br><span class="line">    <span class="attr">org.springframework:</span> <span class="string">warn</span></span><br></pre></td></tr></table></figure><p>还可以通过环境变量配置日志级别：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LOGGINF_LEVEL_ORG_SPRINGFRAMEWORK=DEBUG</span><br></pre></td></tr></table></figure><p>日志级别是在LoggingApplicationListener监听器的Initialize&gt;…setLogLevels初始化方法中设置的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">setLogLevels</span><span class="params">(LoggingSystem system, ConfigurableEnvironment environment)</span> &#123;</span><br><span class="line">   BiConsumer&lt;String, LogLevel&gt; customizer = getLogLevelConfigurer(system);</span><br><span class="line">   <span class="type">Binder</span> <span class="variable">binder</span> <span class="operator">=</span> Binder.get(environment);</span><br><span class="line">   Map&lt;String, LogLevel&gt; levels = binder.bind(LOGGING_LEVEL, STRING_LOGLEVEL_MAP).orElseGet(Collections::emptyMap);</span><br><span class="line">   levels.forEach((name, level) -&gt; configureLogLevel(name, level, customizer));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="日志分组"><a href="#日志分组" class="headerlink" title="日志分组"></a>日志分组</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">tomcat:</span> <span class="string">error</span></span><br><span class="line">  <span class="attr">group:</span> </span><br><span class="line">    <span class="attr">tomcat:</span> <span class="string">org.apache.catalina,org.apache.coyote,org.apache.tomcat</span></span><br></pre></td></tr></table></figure><p>这里配置了一个tomcat组包含了三个包，级别是Error</p><p>SpringBoot提供的日志组：web和sql，这两个可以直接配置级别即可</p><h2 id="日志归档"><a href="#日志归档" class="headerlink" title="日志归档"></a>日志归档</h2><p>SpringBoot的日志达到默认的10MB之后就会自动归档，如果使用的是默认的Logback日志框架则可直接在Application配置文件中配置日志滚动规则，其他日志框架需要在其日志配置文件中配置(如Log4j2)</p><p>Logback日志归档的配置参数对应参数类LogbackLoggingSystemProperties</p><table><thead><tr><th>日志滚动配置参数</th><th>说明</th></tr></thead><tbody><tr><td>logging.logback.rollingpolicy.file-name-pattern</td><td>创建日志归档的文件名模式</td></tr><tr><td>logging.logback.rollingpolicy.clean-history-on-start</td><td>应用启动是否进行日志归档清理</td></tr><tr><td>logging.logback.rollingpolicy.max-file-size</td><td>日志归档文件的最大文件容量，超过就会进行归档(默认10MB)</td></tr><tr><td>logging.logback.rollingpolicy.total-size-cap</td><td>日志归档可占用的最大容量，超过就会删除旧的归档日志文件</td></tr><tr><td>logging.logback.rollingpolicy.max-histoty</td><td>日志归档文件要保留的最长天数(默认7天)</td></tr></tbody></table><h2 id="日志配置文件"><a href="#日志配置文件" class="headerlink" title="日志配置文件*"></a>日志配置文件*</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><p>SpringBoot默认加载的日志配置文件：</p><table><thead><tr><th>日志框架</th><th>配置文件</th></tr></thead><tbody><tr><td>Logback</td><td>logback-spring.xml         logbakc-spring.groovy       logback.xml     logback.groovy</td></tr><tr><td>Log4j2</td><td>log4j2-spring.xml            log4j2.xml</td></tr><tr><td>Java Util Logging</td><td>logging.properties</td></tr></tbody></table><p>SpringBoot建议使用*-spring格式的配置文件，因为标准号的日志配置文件初始化太早，会导致Spring无法完全控制日志的初始化,*-spring格式的好处就是可以使用Spring中的日志拓展功能</p><p>但是可以通过SystemProperty系统参数的方式进行配置。</p><h3 id="日志配置模版"><a href="#日志配置模版" class="headerlink" title="日志配置模版"></a>日志配置模版</h3><p>Logback默认的内置配置模版：</p><ul><li>default.xml</li><li>console-appender.xml</li><li>file-appender.xml</li></ul><p>这些模版定义在org.springframework&#x2F;boot&#x2F;logging&#x2F;logback目录下</p><p><img src="https://s2.loli.net/2023/12/11/QoLmhpBwgyEu3H6.png" alt="image-20231207111330046"></p><p>default.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">Default logback configuration provided for import</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">included</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">conversionRule</span> <span class="attr">conversionWord</span>=<span class="string">&quot;clr&quot;</span> <span class="attr">converterClass</span>=<span class="string">&quot;org.springframework.boot.logging.logback.ColorConverter&quot;</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">conversionRule</span> <span class="attr">conversionWord</span>=<span class="string">&quot;correlationId&quot;</span> <span class="attr">converterClass</span>=<span class="string">&quot;org.springframework.boot.logging.logback.CorrelationIdConverter&quot;</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">conversionRule</span> <span class="attr">conversionWord</span>=<span class="string">&quot;wex&quot;</span> <span class="attr">converterClass</span>=<span class="string">&quot;org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter&quot;</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">conversionRule</span> <span class="attr">conversionWord</span>=<span class="string">&quot;wEx&quot;</span> <span class="attr">converterClass</span>=<span class="string">&quot;org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;CONSOLE_LOG_PATTERN&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;CONSOLE_LOG_PATTERN:-%clr(%d&#123;$&#123;LOG_DATEFORMAT_PATTERN:-yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSXXX&#125;&#125;)&#123;faint&#125; %clr($&#123;LOG_LEVEL_PATTERN:-%5p&#125;) %clr($&#123;PID:- &#125;)&#123;magenta&#125; %clr(---)&#123;faint&#125; %clr($&#123;LOGGED_APPLICATION_NAME:-&#125;[%15.15t])&#123;faint&#125; %clr($&#123;LOG_CORRELATION_PATTERN:-&#125;)&#123;faint&#125;%clr(%-40.40logger&#123;39&#125;)&#123;cyan&#125; %clr(:)&#123;faint&#125; %m%n$&#123;LOG_EXCEPTION_CONVERSION_WORD:-%wEx&#125;&#125;&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;CONSOLE_LOG_CHARSET&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;CONSOLE_LOG_CHARSET:-$&#123;file.encoding:-UTF-8&#125;&#125;&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;CONSOLE_LOG_THRESHOLD&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;CONSOLE_LOG_THRESHOLD:-TRACE&#125;&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;FILE_LOG_PATTERN&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;FILE_LOG_PATTERN:-%d&#123;$&#123;LOG_DATEFORMAT_PATTERN:-yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSXXX&#125;&#125; $&#123;LOG_LEVEL_PATTERN:-%5p&#125; $&#123;PID:- &#125; --- $&#123;LOGGED_APPLICATION_NAME:-&#125;[%t] $&#123;LOG_CORRELATION_PATTERN:-&#125;%-40.40logger&#123;39&#125; : %m%n$&#123;LOG_EXCEPTION_CONVERSION_WORD:-%wEx&#125;&#125;&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;FILE_LOG_CHARSET&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;FILE_LOG_CHARSET:-$&#123;file.encoding:-UTF-8&#125;&#125;&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;FILE_LOG_THRESHOLD&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;FILE_LOG_THRESHOLD:-TRACE&#125;&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;org.apache.catalina.startup.DigesterFactory&quot;</span> <span class="attr">level</span>=<span class="string">&quot;ERROR&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;org.apache.catalina.util.LifecycleBase&quot;</span> <span class="attr">level</span>=<span class="string">&quot;ERROR&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;org.apache.coyote.http11.Http11NioProtocol&quot;</span> <span class="attr">level</span>=<span class="string">&quot;WARN&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;org.apache.sshd.common.util.SecurityUtils&quot;</span> <span class="attr">level</span>=<span class="string">&quot;WARN&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;org.apache.tomcat.util.net.NioSelectorPool&quot;</span> <span class="attr">level</span>=<span class="string">&quot;WARN&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;org.eclipse.jetty.util.component.AbstractLifeCycle&quot;</span> <span class="attr">level</span>=<span class="string">&quot;ERROR&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;org.hibernate.validator.internal.util.Version&quot;</span> <span class="attr">level</span>=<span class="string">&quot;WARN&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;org.springframework.boot.actuate.endpoint.jmx&quot;</span> <span class="attr">level</span>=<span class="string">&quot;WARN&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">included</span>&gt;</span></span><br></pre></td></tr></table></figure><p>default.xml提供了一些转换规则、模式参数和常用的包的日志级别配置</p><p>console-appender.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">Console appender logback configuration provided for import, equivalent to the programmatic</span></span><br><span class="line"><span class="comment">initialization performed by Boot</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">included</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;CONSOLE&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">level</span>&gt;</span>$&#123;CONSOLE_LOG_THRESHOLD&#125;<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;CONSOLE_LOG_PATTERN&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">charset</span>&gt;</span>$&#123;CONSOLE_LOG_CHARSET&#125;<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">included</span>&gt;</span></span><br></pre></td></tr></table></figure><p>file-appender.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">File appender logback configuration provided for import, equivalent to the programmatic</span></span><br><span class="line"><span class="comment">initialization performed by Boot</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">included</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;FILE&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">level</span>&gt;</span>$&#123;FILE_LOG_THRESHOLD&#125;<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;FILE_LOG_PATTERN&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">charset</span>&gt;</span>$&#123;FILE_LOG_CHARSET&#125;<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;LOG_FILE&#125;<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy&quot;</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;LOGBACK_ROLLINGPOLICY_FILE_NAME_PATTERN:-$&#123;LOG_FILE&#125;.%d&#123;yyyy-MM-dd&#125;.%i.gz&#125;<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">cleanHistoryOnStart</span>&gt;</span>$&#123;LOGBACK_ROLLINGPOLICY_CLEAN_HISTORY_ON_START:-false&#125;<span class="tag">&lt;/<span class="name">cleanHistoryOnStart</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>$&#123;LOGBACK_ROLLINGPOLICY_MAX_FILE_SIZE:-10MB&#125;<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">totalSizeCap</span>&gt;</span>$&#123;LOGBACK_ROLLINGPOLICY_TOTAL_SIZE_CAP:-0&#125;<span class="tag">&lt;/<span class="name">totalSizeCap</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>$&#123;LOGBACK_ROLLINGPOLICY_MAX_HISTORY:-7&#125;<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">included</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="自定义日志配置文件"><a href="#自定义日志配置文件" class="headerlink" title="自定义日志配置文件"></a>自定义日志配置文件</h3><p>资源目录下创建一个logback-spring.xml日志配置文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;LOG_FILE&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;LOG_FILE:-$&#123;LOG_PATH:-$&#123;LOG_TEMP:-$&#123;java.io.tmpdir:-/tmp&#125;&#125;&#125;/ldd.log&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;CONSOLE_LOG_PATTERN&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;CONSOLE_LOG_PATTERN:-%clr(%d&#123;$&#123;LOG_DATEFORMAT_PATTERN:-yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSXXX&#125;&#125;)&#123;faint&#125; %clr($&#123;LOG_LEVEL_PATTERN:-%5p&#125;) %clr($&#123;PID:- &#125;)&#123;magenta&#125; %clr(---)&#123;faint&#125; %clr([%15.15t])&#123;faint&#125; %clr(%-40.40logger&#123;39&#125;)&#123;cyan&#125; %clr(:)&#123;faint&#125; %clr(%m%n)&#123;yellow&#125;$&#123;LOG_EXCEPTION_CONVERSION_WORD:-%wEx&#125;&#125;&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">resource</span>=<span class="string">&quot;org/springframework/boot/logging/logback/defaults.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">resource</span>=<span class="string">&quot;org/springframework/boot/logging/logback/console-appender.xml&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">resource</span>=<span class="string">&quot;org/springframework/boot/logging/logback/file-appender.xml&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;INFO&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;CONSOLE&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;FILE&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">&quot;dev | test&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;com.ldd&quot;</span> <span class="attr">level</span>=<span class="string">&quot;DEBUG&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">&quot;prod&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;com.ldd&quot;</span> <span class="attr">level</span>=<span class="string">&quot;INFO&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;org.springframework.web&quot;</span> <span class="attr">level</span>=<span class="string">&quot;INFO&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>include引用内置模版配置文件</p><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringBootLoggingApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.setProperty(<span class="string">&quot;LOG_PATH&quot;</span>, <span class="string">&quot;spring-boot-logging/logs/&quot;</span>);</span><br><span class="line">        System.setProperty(<span class="string">&quot;LOGBACK_ROLLINGPOLICY_MAX_FILE_SIZE&quot;</span>, <span class="string">&quot;1KB&quot;</span>);</span><br><span class="line">        SpringApplication.run(SpringBootLoggingApplication.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> org.apache.commons.logging.<span class="type">Log</span> <span class="variable">logger1</span> <span class="operator">=</span> org.apache.commons.logging</span><br><span class="line">            .LogFactory</span><br><span class="line">            .getLog(SpringBootLoggingApplication.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> org.slf4j.<span class="type">Logger</span> <span class="variable">logger2</span> <span class="operator">=</span> org.slf4j.LoggerFactory</span><br><span class="line">            .getLogger(SpringBootLoggingApplication.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> CommandLineRunner <span class="title function_">commandLineRunner</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (args) -&gt; &#123;</span><br><span class="line">            logger1.error(<span class="string">&quot;commons logging error...&quot;</span>);</span><br><span class="line">            logger1.warn(<span class="string">&quot;commons logging warn&quot;</span>);</span><br><span class="line">            logger1.info(<span class="string">&quot;commons logging info...&quot;</span>);</span><br><span class="line">            logger1.debug(<span class="string">&quot;commons logging debug...&quot;</span>);</span><br><span class="line"></span><br><span class="line">            logger2.error(<span class="string">&quot;slf4j error...&quot;</span>);</span><br><span class="line">            logger2.warn(<span class="string">&quot;commons logging warn&quot;</span>);</span><br><span class="line">            logger2.info(<span class="string">&quot;slf4j info...&quot;</span>);</span><br><span class="line">            logger2.debug(<span class="string">&quot;slf4j debug...&quot;</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/12/11/mjUFQyiXJYDWIBS.png" alt="image-20231207112827212"></p><p>这里故意设置为1kb就是为了看到归档，<strong>xx.log.日期.索引(0开始).gz</strong></p><h3 id="切换log4j2"><a href="#切换log4j2" class="headerlink" title="切换log4j2"></a>切换log4j2</h3><p>导入启动器依赖和写配置不赘述</p><h3 id="切换日志框架版本"><a href="#切换日志框架版本" class="headerlink" title="切换日志框架版本"></a>切换日志框架版本</h3><p>太简单了，不赘述</p><h3 id="输出彩色日志"><a href="#输出彩色日志" class="headerlink" title="输出彩色日志"></a>输出彩色日志</h3><h4 id="1-开启彩色日志输出"><a href="#1-开启彩色日志输出" class="headerlink" title="1.开启彩色日志输出"></a>1.开启彩色日志输出</h4><p>你的终端支持ANSI字符标准，即可输出彩色日志</p><table><thead><tr><th>日志级别</th><th>颜色</th></tr></thead><tbody><tr><td>TRACE</td><td>绿</td></tr><tr><td>DEBUG</td><td>绿</td></tr><tr><td>INFO</td><td>绿</td></tr><tr><td>WARN</td><td>黄</td></tr><tr><td>ERROR</td><td>红</td></tr><tr><td>FATAL</td><td>红</td></tr></tbody></table><p>开启配置参数为：<code>spring.output.ansi.enabled</code></p><p>值：</p><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>ALWAYS</td><td>开启ANSI颜色输出</td></tr><tr><td>DETECT(默认)</td><td>尝试检测ANSI功能是否可用</td></tr><tr><td>NEVER</td><td>禁用ANSI颜色输出</td></tr></tbody></table><p>最新选项参考AnsiOutput.Enabled枚举类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Enabled</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Try to detect whether ANSI coloring capabilities are available. The default</span></span><br><span class="line"><span class="comment">    * value for &#123;<span class="doctag">@link</span> AnsiOutput&#125;.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   DETECT,</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Enable ANSI-colored output.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   ALWAYS,</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Disable ANSI-colored output.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   NEVER</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">output:</span></span><br><span class="line">    <span class="attr">ansi:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="string">always</span></span><br></pre></td></tr></table></figure><p>开启后：</p><p><img src="https://s2.loli.net/2023/12/11/x9EfQeY8CG5bJNH.png" alt="image-20231207113836414"></p><h4 id="2-日志上色原理"><a href="#2-日志上色原理" class="headerlink" title="2.日志上色原理"></a>2.日志上色原理</h4><p>SpringBoot中的日志颜色是使用%clr转换词来配置的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%clr（日志）&#123;颜色&#125;</span><br></pre></td></tr></table></figure><p>内置的default.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">included</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">conversionRule</span> <span class="attr">conversionWord</span>=<span class="string">&quot;clr&quot;</span> <span class="attr">converterClass</span>=<span class="string">&quot;org.springframework.boot.logging.logback.ColorConverter&quot;</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">conversionRule</span> <span class="attr">conversionWord</span>=<span class="string">&quot;correlationId&quot;</span> <span class="attr">converterClass</span>=<span class="string">&quot;org.springframework.boot.logging.logback.CorrelationIdConverter&quot;</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">conversionRule</span> <span class="attr">conversionWord</span>=<span class="string">&quot;wex&quot;</span> <span class="attr">converterClass</span>=<span class="string">&quot;org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter&quot;</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">conversionRule</span> <span class="attr">conversionWord</span>=<span class="string">&quot;wEx&quot;</span> <span class="attr">converterClass</span>=<span class="string">&quot;org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;CONSOLE_LOG_PATTERN&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;CONSOLE_LOG_PATTERN:-%clr(%d&#123;$&#123;LOG_DATEFORMAT_PATTERN:-yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSXXX&#125;&#125;)&#123;faint&#125; %clr($&#123;LOG_LEVEL_PATTERN:-%5p&#125;) %clr($&#123;PID:- &#125;)&#123;magenta&#125; %clr(---)&#123;faint&#125; %clr($&#123;LOGGED_APPLICATION_NAME:-&#125;[%15.15t])&#123;faint&#125; %clr($&#123;LOG_CORRELATION_PATTERN:-&#125;)&#123;faint&#125;%clr(%-40.40logger&#123;39&#125;)&#123;cyan&#125; %clr(:)&#123;faint&#125; %m%n$&#123;LOG_EXCEPTION_CONVERSION_WORD:-%wEx&#125;&#125;&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>定义了clr、wex和wEx这三个转换词，clr对应ColorConverter类，源码上分析只有Logback和Log4j2实现了颜色日志</p><h4 id="3-自定义日志颜色"><a href="#3-自定义日志颜色" class="headerlink" title="3.自定义日志颜色"></a>3.自定义日志颜色</h4><p>直接去覆盖掉就行了</p><p><img src="https://s2.loli.net/2023/12/11/tA5eWxO3EGmbKFu.png" alt="image-20231207114836518"></p><h2 id="日志关闭钩子"><a href="#日志关闭钩子" class="headerlink" title="日志关闭钩子"></a>日志关闭钩子</h2><p>启动过程中，SpringBoot提供了一个优雅关闭的钩子，在日志系统中，SpringBoot也注册了日志相关的关闭钩子，该钩子可以在JVM退出时触发日子系统清理，以保证应用终止时及时释放日志使用的资源</p><p>关闭参数：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">register-shutdown-hook:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;SpringBoot日志管理&quot;&gt;&lt;a href=&quot;#SpringBoot日志管理&quot; class=&quot;headerlink&quot; title=&quot;SpringBoot日志管理&quot;&gt;&lt;/a&gt;SpringBoot日志管理&lt;/h1&gt;&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot;</summary>
      
    
    
    
    <category term="SpringBoot3" scheme="https://humbledong.github.io/categories/SpringBoot3/"/>
    
    
    <category term="SpringBoot3" scheme="https://humbledong.github.io/tags/SpringBoot3/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot启动过程与拓展应用</title>
    <link href="https://humbledong.github.io/undefined/c4b502db.html"/>
    <id>https://humbledong.github.io/undefined/c4b502db.html</id>
    <published>2023-10-17T06:14:20.000Z</published>
    <updated>2024-01-08T07:04:41.794Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot启动过程与拓展应用"><a href="#SpringBoot启动过程与拓展应用" class="headerlink" title="SpringBoot启动过程与拓展应用"></a>SpringBoot启动过程与拓展应用</h1><h2 id="启动入口"><a href="#启动入口" class="headerlink" title="启动入口"></a>启动入口</h2><h3 id="应用启动类"><a href="#应用启动类" class="headerlink" title="应用启动类"></a>应用启动类</h3><p>SpringBoot启动类必须包含一个标准的main方法，这也是启动Java应用的入口方法，然后在main方法中添加SpringApplication.run方法启动SpringBoot应用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(SpringBootMailApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@SpringBootApplication注解用于标识应用启动的入口类，也负责启动类统一筹划配置类、组件扫描、自动配置等工作，它是SpringBoot启动类上的核心注解。源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan(excludeFilters = &#123; @Filter(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class),</span></span><br><span class="line"><span class="meta">      @Filter(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class) &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootApplication &#123;</span><br><span class="line">......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>@SpringBootConfiguration：标识为一个SpringBoot配置类</li><li>@EnableAutoConfiguration：开启应用自动配置功能</li><li>@ComponentScan：开启自动Spring组件的功能</li></ul><h4 id="1-SpringBootConfiguration"><a href="#1-SpringBootConfiguration" class="headerlink" title="1.@SpringBootConfiguration"></a>1.@SpringBootConfiguration</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Indexed</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootConfiguration &#123;</span><br><span class="line">    <span class="meta">@AliasFor(</span></span><br><span class="line"><span class="meta">        annotation = Configuration.class</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">proxyBeanMethods</span><span class="params">()</span> <span class="keyword">default</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@Configuration结合这个注解使用，标识这是Springboot的配置类。</p><h4 id="2-EnableAutoConfiguration"><a href="#2-EnableAutoConfiguration" class="headerlink" title="2.@EnableAutoConfiguration"></a>2.@EnableAutoConfiguration</h4><p>标识开启SpringBoot的自动配置功能，一般不会单独使用，如果单独使用，则可以用来关闭某个自动配置的选项，如：关闭数据源自动配置功能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@AutoConfigurationPackage</span></span><br><span class="line"><span class="meta">@Import(AutoConfigurationImportSelector.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableAutoConfiguration &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-ComponentScan"><a href="#3-ComponentScan" class="headerlink" title="3.@ComponentScan"></a>3.@ComponentScan</h4><p>​@ComponentScan注解是Spring框架扫描Spring组件并进行注册的注解，这也是新加的一个注解，用来代替配置文件中的component-scan配置，默认扫描当前目录及其所有子目录。@ComponentScan是可以重复注解，即可以配置多个，用来扫描并注册不同的子包。</p><h3 id="启动方法"><a href="#启动方法" class="headerlink" title="启动方法"></a>启动方法</h3><h4 id="1-SpringApplication"><a href="#1-SpringApplication" class="headerlink" title="1.SpringApplication"></a>1.SpringApplication</h4><p>SpringBoot应用的启动是通过一个带有main方法的启动类完成的，SpringApplication默认调用的是run静态方法，第一个参数一般为应用启动类，也可以是多个其他的@Configuration类或者@Component，第二个参数为传递给应用的main方法参数。这个方法源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ConfigurableApplicationContext <span class="title function_">run</span><span class="params">(Class&lt;?&gt; primarySource, String... args)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> run(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;primarySource&#125;, args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它最终也构建了一个默认的SpringApplication实例，并调用实例的run普通方法，所以，可以在application配置文件中配置启动环境，还可以自定义创建SpringApplication实例的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringBootMailApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">SpringApplication</span> <span class="variable">springApplication</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpringApplication</span>(SpringBootApplication.class);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//自定义设置</span></span><br><span class="line">        springApplication.xxx();</span><br><span class="line">        </span><br><span class="line">        springApplication.run(args);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-SpringApplicationBuilder"><a href="#2-SpringApplicationBuilder" class="headerlink" title="2.SpringApplicationBuilder"></a>2.SpringApplicationBuilder</h4><p>除了使用SpringApplication启动，还可以使用SpringApplicationBuilder<strong>链式的API</strong></p><p>SpringApplicationBuilder部分源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">SpringApplicationBuilder</span><span class="params">(Class&lt;?&gt;... sources)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>((ResourceLoader)<span class="literal">null</span>, sources);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">SpringApplicationBuilder</span><span class="params">(ResourceLoader resourceLoader, Class&lt;?&gt;... sources)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.running = <span class="keyword">new</span> <span class="title class_">AtomicBoolean</span>();</span><br><span class="line">    <span class="built_in">this</span>.sources = <span class="keyword">new</span> <span class="title class_">LinkedHashSet</span>();</span><br><span class="line">    <span class="built_in">this</span>.defaultProperties = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>();</span><br><span class="line">    <span class="built_in">this</span>.additionalProfiles = <span class="keyword">new</span> <span class="title class_">LinkedHashSet</span>();</span><br><span class="line">    <span class="built_in">this</span>.configuredAsChild = <span class="literal">false</span>;</span><br><span class="line">    <span class="built_in">this</span>.application = <span class="built_in">this</span>.createSpringApplication(resourceLoader, sources);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> SpringApplication <span class="title function_">createSpringApplication</span><span class="params">(ResourceLoader resourceLoader, Class&lt;?&gt;... sources)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SpringApplication</span>(resourceLoader, sources);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">....</span><br></pre></td></tr></table></figure><p>可以看到SpringApplicationBuilder其实也是对SpringApplication类的包装，其中sources和child方法用于构建多应用上下文，两者共享同一个Environment环境，但是web组件必须包含在child上下文环境中。</p><h3 id="启动引导类"><a href="#启动引导类" class="headerlink" title="启动引导类"></a>启动引导类</h3><p>​Spring应用虽然会有一个带有main方法的Application启动类，但它一般只会在开发工具中执行启动，也就是SpringBoot应用未打包的情况下运行，如果打包成可执行的jar包运行，它就不是启动SpringBoot应用最前置的入口了。</p><p>java打包命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar 需要打包的模块名字-版本号.jar</span><br></pre></td></tr></table></figure><p>jar包中的重要目录：</p><ul><li>BOOT-INF：包含应用启动所需要的类库</li><li>META-INF：包含应用打包的相关扫描文件</li><li>org：包含SpringBoot启动是需要的引导类</li></ul><p>在META-INF目录下可以找到MANIFEST.MF文件：</p><p>它主要包括一个jar包的相关信息描述，除了基本的项目构建信息，两个最重要的应用启动信息：</p><ul><li>Main-Class：应用的启动引导类，即打包后最前置的启动入类，启动jar包的引导类为org.springframework.boot.loader.JarLauncher，启动war包的引导类为：org.springframework.boot.loader.WarLauncher</li><li>Start-Class：即Application启动类。</li></ul><p>​Main-Class制定了SpringBoot应用具体要使用的引导类，SpringBoot应用的引导机制是由spring-boot-loader模块实现的，引导实现类顶层是Launcher抽象类，结构如下：</p><p><img src="https://s2.loli.net/2023/12/11/HnNweR9hjTu4z6D.png" alt="image-20231206105202335"></p><p>Launcher引导类主要分为两种引导类型：</p><ul><li><strong>根据可执行文件引导</strong>：ExecutableArchiveLauncher抽象类，按打包类型又分为JarLauncher和WarLauncher引导实现类。</li><li><strong>根据参数文件引导</strong>：PropertiesLauncher引导实现类。</li></ul><p>具体的JarLauncher源码可以网上自己了解。</p><h2 id="关闭启动日志"><a href="#关闭启动日志" class="headerlink" title="关闭启动日志"></a>关闭启动日志</h2><p>启动Springboot，系统会打印一些日志</p><p><img src="https://s2.loli.net/2023/12/11/ZpJP7mlSXWr1gT9.png" alt="image-20231206111135630"></p><p>第一种关闭方式，Properties参数关闭：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">main:</span></span><br><span class="line">    <span class="attr">log-startup-info:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>第二种关闭方式：启动方法上关闭</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">SpringApplication</span> <span class="variable">springApplication</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpringApplication</span>(Application.class);</span><br><span class="line">        springApplication.setLogStartupInfo(<span class="literal">false</span>);</span><br><span class="line">        springApplication.run();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="启动失败分析"><a href="#启动失败分析" class="headerlink" title="启动失败分析"></a>启动失败分析</h2><h3 id="失败分析器"><a href="#失败分析器" class="headerlink" title="失败分析器"></a>失败分析器</h3><p>最常见的启动失败案例：<br><strong>端口占用</strong></p><p>SpringBoot应用启动失败的场景是由FailureAnalyzer失败分析器拦截并处理的，SpringBoot注册了许多FailureAnalyzer，它能分析启动失败异常并给用户显示有用的诊断信息。</p><p>FailureAnalyzer失败分析器对应的FailureAnalyzer接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A &#123;<span class="doctag">@code</span> FailureAnalyzer&#125; is used to analyze a failure and provide diagnostic</span></span><br><span class="line"><span class="comment"> * information that can be displayed to the user.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Andy Wilkinson</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.4.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">FailureAnalyzer</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Returns an analysis of the given &#123;<span class="doctag">@code</span> failure&#125;, or &#123;<span class="doctag">@code</span> null&#125; if no analysis</span></span><br><span class="line"><span class="comment">    * was possible.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> failure the failure</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> the analysis or &#123;<span class="doctag">@code</span> null&#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   FailureAnalysis <span class="title function_">analyze</span><span class="params">(Throwable failure)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SpringBoot内置的失败分析器目前还是在老的自动配置类注册文件中，比如SpringBoot基础包中的spring.factories文件：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Failure Analyzers</span></span><br><span class="line"><span class="attr">org.springframework.boot.diagnostics.FailureAnalyzer</span>=<span class="string">\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.data.redis.RedisUrlSyntaxFailureAnalyzer,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.diagnostics.analyzer.NoSuchBeanDefinitionFailureAnalyzer,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.flyway.FlywayMigrationScriptMissingFailureAnalyzer,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.jdbc.DataSourceBeanCreationFailureAnalyzer,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.jdbc.HikariDriverConfigurationFailureAnalyzer,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.jooq.NoDslContextBeanFailureAnalyzer,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.r2dbc.ConnectionFactoryBeanCreationFailureAnalyzer,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.r2dbc.MissingR2dbcPoolDependencyFailureAnalyzer,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.r2dbc.MultipleConnectionPoolConfigurationsFailureAnalyzer,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.r2dbc.NoConnectionFactoryBeanFailureAnalyzer</span></span><br></pre></td></tr></table></figure><p>再回到端口占用这个情况，它其实就是注册了PortInUseFailureAnalyzers失败分析器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A &#123;<span class="doctag">@code</span> FailureAnalyzer&#125; that performs analysis of failures caused by a</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> PortInUseException&#125;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Andy Wilkinson</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PortInUseFailureAnalyzer</span> <span class="keyword">extends</span> <span class="title class_">AbstractFailureAnalyzer</span>&lt;PortInUseException&gt; &#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">protected</span> FailureAnalysis <span class="title function_">analyze</span><span class="params">(Throwable rootFailure, PortInUseException cause)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">FailureAnalysis</span>(<span class="string">&quot;Web server failed to start. Port &quot;</span> + cause.getPort() + <span class="string">&quot; was already in use.&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Identify and stop the process that&#x27;s listening on port &quot;</span> + cause.getPort() + <span class="string">&quot; or configure this &quot;</span></span><br><span class="line">                  + <span class="string">&quot;application to listen on another port.&quot;</span>,</span><br><span class="line">            cause);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自定义失败分析器"><a href="#自定义失败分析器" class="headerlink" title="自定义失败分析器"></a>自定义失败分析器</h3><p>通过拓展FailureAnalyzer失败分析器接口来达到自定义错误信息的目的</p><ul><li>我们要知道所有的分析器都继承了这个AbstractFailureAnalyzer抽象类，然后由它实现FailureAnalyzer接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PortInuseFailureAnalyzer</span> <span class="keyword">extends</span> <span class="title class_">AbstractFailureAnalyzer</span>&lt;PortInUseException&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> FailureAnalysis <span class="title function_">analyze</span><span class="params">(Throwable rootFailure, PortInUseException cause)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">FailureAnalysis</span>(</span><br><span class="line">                <span class="string">&quot;你启动的端口&quot;</span> + cause.getPort() + <span class="string">&quot; 被占用了.&quot;</span>,</span><br><span class="line">                <span class="string">&quot;请你检查你的端口&quot;</span> + cause.getPort() + <span class="string">&quot; 被哪一个程序占用了,或者强制杀掉进程&quot;</span>,</span><br><span class="line">                cause);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重写analyzer需要返回一个FailureAnalysis对象，它的主要信息如源码所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">FailureAnalysis</span><span class="params">(String description, String action, Throwable cause)</span> &#123;</span><br><span class="line">   <span class="built_in">this</span>.description = description;</span><br><span class="line">   <span class="built_in">this</span>.action = action;</span><br><span class="line">   <span class="built_in">this</span>.cause = cause;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>可读性的错误描述</li><li>建议的检查修复动作</li><li>原始异常</li></ul><p>然后去META-INF&#x2F;spring.factories配置中注册</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">org.springframework.boot.diagnostics.FailureAnalyzer</span>=<span class="string">\</span></span><br><span class="line"><span class="string">com.ldd.analyzer.PortInuseFailureAnalyzer</span></span><br></pre></td></tr></table></figure><p>然后我们把数据库运行起来，去设置我们的服务端口为3306，故意和数据库端口冲突</p><p><img src="https://s2.loli.net/2023/12/11/1NztYLIABE5Kapo.png" alt="image-20231206120629781"></p><p>在定义一个新的失败分析器</p><p>我们现在希望在创建Bean的时候手动抛出一个异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> CommandLineRunner <span class="title function_">commandLineRunner</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (args) -&gt; &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MyStackException</span>(<span class="string">&quot;我的栈异常&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyStackException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyStackException</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​现在我们并没有去注册我们的失败分析器，自定义的异常不会被失败分析器拦截，应用启动后就会输出很多异常信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">java.lang.IllegalStateException: Failed to execute CommandLineRunner</span><br><span class="line">at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:<span class="number">789</span>) ~[spring-boot-<span class="number">3.2</span><span class="number">.0</span>.jar:<span class="number">3.2</span><span class="number">.0</span>]</span><br><span class="line">at org.springframework.boot.SpringApplication.lambda$callRunners$<span class="number">3</span>(SpringApplication.java:<span class="number">770</span>) ~[spring-boot-<span class="number">3.2</span><span class="number">.0</span>.jar:<span class="number">3.2</span><span class="number">.0</span>]</span><br><span class="line">at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:<span class="number">183</span>) ~[na:na]</span><br><span class="line">at java.base/java.util.stream.SortedOps$SizedRefSortingSink.end(SortedOps.java:<span class="number">357</span>) ~[na:na]</span><br><span class="line">at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:<span class="number">510</span>) ~[na:na]</span><br><span class="line">at .......</span><br><span class="line">... <span class="number">14</span> common frames omitted</span><br></pre></td></tr></table></figure><p>现在我们可以添加一个失败分析器拦截该异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyStackFailureAnalyzer</span> <span class="keyword">extends</span> <span class="title class_">AbstractFailureAnalyzer</span>&lt;MyStackException&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> FailureAnalysis <span class="title function_">analyze</span><span class="params">(Throwable rootFailure, MyStackException cause)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">FailureAnalysis</span>(<span class="string">&quot;我的栈发生异常了……&quot;</span>,</span><br><span class="line">                <span class="string">&quot;赶快去检查一下吧！&quot;</span>,</span><br><span class="line">                cause);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着注册到失败分析器里面：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">org.springframework.boot.diagnostics.FailureAnalyzer</span>=<span class="string">\</span></span><br><span class="line"><span class="string">com.ldd.analyzer.PortInuseFailureAnalyzer,\</span></span><br><span class="line"><span class="string">com.ldd.analyzer.MyStackFailureAnalyzer</span></span><br></pre></td></tr></table></figure><p>然后重启应用：</p><p><img src="https://s2.loli.net/2023/12/11/faRkMwrSeuYop29.png" alt="image-20231206143036836"></p><p>总结：<br>Spring提供的失败分析器以友好的错误信息和修复建议代替了大堆的错误异常信息，使用失败分析器能很直观地看出是什么错误和如何修复这个错误，可以帮助我们更加直观地定位应用启动故障。</p><h2 id="全局懒加载"><a href="#全局懒加载" class="headerlink" title="全局懒加载"></a>全局懒加载</h2><p>SpringBoot可以开启全局懒加载，懒加载的意识就是Bean不会在应用启动时全部创建，只会在使用的时候创建，SpringBoot默认不开启懒加载，如需开启，则可以在应用配置文件中创建：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">main:</span></span><br><span class="line">    <span class="attr">lazy-initialization:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>也可以在SpringApplication或者SpringApplicationBuilder启动类上设置</p><p>懒加载优点：</p><ul><li>减少应用启动时间</li><li>节省系统资源</li></ul><p>缺点：</p><ul><li>JVM内存配置问题，因为不是全部加载，所以不能在启动时判断所需内存的大小，在应用真正运行时可能引发内存不足等问题。</li><li>运行时找不到指定类等运行时异常，或者是配置错误引发的系列问题，如果能在启动时及时发现问题，就不要等运行时再去处理</li><li>如果是HTTP服务，则可能因为临时实例化而造成第一个请求变慢，响应延迟，体验不是很好，对负载均衡和自动伸缩也可能造成影响</li></ul><p>因为懒加载时真正使用的时候才会去实例化，所以是否开启全局懒加载完全看应用类型，如果是HTTP服务为主的应用，要求及时响应，则不建议开启全局懒加载。</p><h2 id="启动图案"><a href="#启动图案" class="headerlink" title="启动图案"></a>启动图案</h2><h3 id="默认图案"><a href="#默认图案" class="headerlink" title="默认图案"></a>默认图案</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  .   ____          _            __ _ _</span><br><span class="line"> /\\ / ___<span class="string">&#x27;_ __ _ _(_)_ __  __ _ \ \ \ \</span></span><br><span class="line"><span class="string">( ( )\___ | &#x27;</span>_ | <span class="string">&#x27;_| | &#x27;</span>_ \/ _` | \ \ \ \</span><br><span class="line"> \\/  ___)| |_)| | | | | || (_| |  ) ) ) )</span><br><span class="line">  <span class="string">&#x27;  |____| .__|_| |_|_| |_\__, | / / / /</span></span><br><span class="line"><span class="string"> =========|_|==============|___/=/_/_/_/</span></span><br><span class="line"><span class="string"> :: Spring Boot ::                (v3.2.0)</span></span><br></pre></td></tr></table></figure><h3 id="输出模式"><a href="#输出模式" class="headerlink" title="输出模式"></a>输出模式</h3><p>SpringBoot是通过Banner接口在日志中输出启动图案的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Banner</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Print the banner to the specified print stream.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> environment the spring environment</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> sourceClass the source class for the application</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> out the output print stream</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">void</span> <span class="title function_">printBanner</span><span class="params">(Environment environment, Class&lt;?&gt; sourceClass, PrintStream out)</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * An enumeration of possible values for configuring the Banner.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">enum</span> <span class="title class_">Mode</span> &#123;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * Disable printing of the banner.</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      OFF,</span><br><span class="line"></span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * Print the banner to System.out.</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      CONSOLE,</span><br><span class="line"></span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * Print the banner to the log file.</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      LOG</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从Banner.Mode接口枚举可以看到支持的输出模式：</p><ul><li>OFF：关闭图案</li><li>CONSOLE：默认到System.out</li><li>LOG：输出到日志文件</li></ul><p>关闭图案：<br>参数配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">main:</span></span><br><span class="line">    <span class="attr">banner-mode:</span> <span class="string">off</span></span><br></pre></td></tr></table></figure><p>启动类上关闭：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 图案输出模式</span></span><br><span class="line">springApplication.setBannerMode(Banner.Mode.CONSOLE);</span><br></pre></td></tr></table></figure><h3 id="图案实现类"><a href="#图案实现类" class="headerlink" title="图案实现类"></a>图案实现类</h3><p><img src="https://s2.loli.net/2023/12/11/WFAd9LJVTjDbP6t.png" alt="image-20231206145300422"></p><p>*<em>新版SpringBoot 3已经删除了Image图案类，即不再支持spring.banner.image.<em>系列参数配置</em></em></p><p>SpringBootBanner源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SpringBootBanner</span> <span class="keyword">implements</span> <span class="title class_">Banner</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] BANNER = &#123; <span class="string">&quot;&quot;</span>, <span class="string">&quot;  .   ____          _            __ _ _&quot;</span>,</span><br><span class="line">         <span class="string">&quot; /\\\\ / ___&#x27;_ __ _ _(_)_ __  __ _ \\ \\ \\ \\&quot;</span>, <span class="string">&quot;( ( )\\___ | &#x27;_ | &#x27;_| | &#x27;_ \\/ _` | \\ \\ \\ \\&quot;</span>,</span><br><span class="line">         <span class="string">&quot; \\\\/  ___)| |_)| | | | | || (_| |  ) ) ) )&quot;</span>, <span class="string">&quot;  &#x27;  |____| .__|_| |_|_| |_\\__, | / / / /&quot;</span>,</span><br><span class="line">         <span class="string">&quot; =========|_|==============|___/=/_/_/_/&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SPRING_BOOT</span> <span class="operator">=</span> <span class="string">&quot; :: Spring Boot :: &quot;</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">STRAP_LINE_SIZE</span> <span class="operator">=</span> <span class="number">42</span>;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printBanner</span><span class="params">(Environment environment, Class&lt;?&gt; sourceClass, PrintStream printStream)</span> &#123;</span><br><span class="line">      <span class="keyword">for</span> (String line : BANNER) &#123;</span><br><span class="line">         printStream.println(line);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="type">String</span> <span class="variable">version</span> <span class="operator">=</span> SpringBootVersion.getVersion();</span><br><span class="line">      version = (version != <span class="literal">null</span>) ? <span class="string">&quot; (v&quot;</span> + version + <span class="string">&quot;)&quot;</span> : <span class="string">&quot;&quot;</span>;</span><br><span class="line">      <span class="type">StringBuilder</span> <span class="variable">padding</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">      <span class="keyword">while</span> (padding.length() &lt; STRAP_LINE_SIZE - (version.length() + SPRING_BOOT.length())) &#123;</span><br><span class="line">         padding.append(<span class="string">&quot; &quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      printStream.println(AnsiOutput.toString(AnsiColor.GREEN, SPRING_BOOT, AnsiColor.DEFAULT, padding.toString(),</span><br><span class="line">            AnsiStyle.FAINT, version));</span><br><span class="line">      printStream.println();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>默认的Spring启动图案来源这个类</p><h3 id="自定义图案"><a href="#自定义图案" class="headerlink" title="自定义图案"></a>自定义图案</h3><p>直接在资源根目录下创建一个banner.txt即可</p><p>也可以通过spring.banner.location参数指定图案文件位置</p><p>还可以使用spring.banner.charset指定具体编码</p><h2 id="启动事件和监听器"><a href="#启动事件和监听器" class="headerlink" title="启动事件和监听器"></a>启动事件和监听器</h2><p>spring.factories文件：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Application Listeners</span></span><br><span class="line"><span class="attr">org.springframework.context.ApplicationListener</span>=<span class="string">\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.BackgroundPreinitializer</span></span><br></pre></td></tr></table></figure><h3 id="启动事件顺序"><a href="#启动事件顺序" class="headerlink" title="启动事件顺序"></a>启动事件顺序</h3><p>当SpringBoot应用启动后，事件会按以下顺序发送：</p><ul><li>ApplicationStartingEvent</li></ul><p>这个事件在SpringBoot应用运行开始时，且进行任何处理之前发送(除了监听器和初始化器)</p><ul><li>ApplicationEnvironmentPrepareEvent</li></ul><p>这个事件当已知要在上下文使用Spring环境Environment时，在Spring上下文context创建之前发送</p><ul><li>ApplicationContextInitializedEvent</li></ul><p>这个事件在Spring应用上下文ApplicationContext准备好了，并且应用初始化器ApplicationContextInitialized已经被调用，在bean definitions被加载之前发送</p><ul><li>ApplicationPreparedEvent</li></ul><p>这个事件是在Spring上下文context刷新之前，且在bean definitions被加载之后发送</p><ul><li>ApplicationStartedEVent</li></ul><p>这个事件是在Spring上下文context刷新之后，且在任何application&#x2F;command-line-runners被加载之前发送</p><ul><li>AvailabilityChangeEvent</li></ul><p>这个事件紧跟随上个事件之后发送，激活状态ReadinessState.CORRECT，表示应用已处于活动状态</p><ul><li>ApplicationReadyEvent</li></ul><p>这个事件在任何application&#x2F;command-line-runners被加载之后发送</p><ul><li>AvailabilityChangeEvent</li></ul><p>这个事件紧跟随上个事件之后发送，激活状态ReadinessState.ACCEPTING_TRAFFIC，表示应用可以开始准备接收请求了</p><ul><li>ApplicationFailedEvent</li></ul><p>这个事件在应用启动异常时候发送</p><p>​上面的这些事件仅包括SpringApplication启动类发出的SpringApplicationEvents事件，下面的事件也会在ApplicationPrepareEvent之后和ApplicationStartedEvent之前发送</p><ul><li>WebServerInitializedEvent</li></ul><p>这个Web服务器初始化事件在WebServer启动之后发送</p><ul><li>ContextRefreshedEvent</li></ul><p>这个上下文刷新事件在Spring应用上下文ApplicationContext刷新之后发送</p><h3 id="自定义事件监听器"><a href="#自定义事件监听器" class="headerlink" title="自定义事件监听器"></a>自定义事件监听器</h3><p>假如我们需要在某一个环节处理一些我们想要处理的事情，那么只需要自定义一个监听器来监听某个时间就可以了</p><p>比如：我们监听上面的启动事件(AvailabilityChangeEvent)，即启动完成可以接受请求了</p><p>自定义监听器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyListener</span> <span class="keyword">implements</span> <span class="title class_">ApplicationListener</span>&lt;AvailabilityChangeEvent&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onApplicationEvent</span><span class="params">(AvailabilityChangeEvent event)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;监听到事件：&quot;</span>,event);</span><br><span class="line">        <span class="keyword">if</span> (ReadinessState.ACCEPTING_TRAFFIC==event.getState())&#123;</span><br><span class="line">            log.info(<span class="string">&quot;应用启动完成，可以接受请求了.......&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>监听器需要实现ApplicationListener接口，泛型表示需要监听的事件</p><p>方法逻辑：因启动事件</p><p>AvailabilityChangeEvent发送了两次，每次状态不同，所以监听该事件可以根据事件的状态来区分到底是哪一环节的事件</p><p>因为是Spring应用上下文ApplicationContext创建之后的事件，所以可以直接在监听器上使用@Component注解注册。如果ApplicationContext没有创建，就需要在spring.factories配置文件中注册了</p><p>或者使用SpringApplication.addListeners（..）注册</p><p>启动应用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2023</span>-<span class="number">12</span>-06T15:<span class="number">37</span>:<span class="number">36.372</span>+08:<span class="number">00</span>  INFO <span class="number">3372</span> --- [           main] com.ldd.listener.MyListener              : 监听到事件：</span><br><span class="line"><span class="number">2023</span>-<span class="number">12</span>-06T15:<span class="number">37</span>:<span class="number">36.374</span>+08:<span class="number">00</span>  INFO <span class="number">3372</span> --- [           main] com.ldd.listener.MyListener              : 监听到事件：</span><br><span class="line"><span class="number">2023</span>-<span class="number">12</span>-06T15:<span class="number">37</span>:<span class="number">36.374</span>+08:<span class="number">00</span>  INFO <span class="number">3372</span> --- [           main] com.ldd.listener.MyListener              : 应用启动完成，可以接受请求了.......</span><br></pre></td></tr></table></figure><p>可以看到同时输出了两次监听日志，但是只有输出最后一步才表示启动完成。</p><p>注：一般不建议使用事件和监听器实现耗时比较繁重的任务，推荐使用Runners实现，即启动后再处理。</p><h2 id="启动运行器"><a href="#启动运行器" class="headerlink" title="启动运行器"></a>启动运行器</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>Runners运行器允许SpringBoot应用启动完成后再接收请求之前运行一些特定的代码逻辑</p><p>SpringBootRunner运行器可以实现以下两个接口：</p><ul><li>ApplicationRunnner</li><li>CommandLineRunnner</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ApplicationRunner</span> <span class="keyword">extends</span> <span class="title class_">Runner</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Callback used to run the bean.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> args incoming application arguments</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> Exception on error</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(ApplicationArguments args)</span> <span class="keyword">throws</span> Exception;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CommandLineRunner</span> <span class="keyword">extends</span> <span class="title class_">Runner</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Callback used to run the bean.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> args incoming main method arguments</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> Exception on error</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这两个接口的工作原理是一样的，它们都只提供了一个run运行方法，只是接收的方法参数不同而已，ApplicationRunnner用来接收ApplicationArguments，即SpringApplication启动时的应用参数</p><p>CommandLineRunner接收String可变参数，灵活一点</p><h3 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h3><p>1.实现接口</p><p>2.Lambda表达式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> CommandLineRunner <span class="title function_">commandLineRunner</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (args) -&gt; &#123;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="应用启动流程"><a href="#应用启动流程" class="headerlink" title="应用启动流程"></a>应用启动流程</h2><h3 id="实例化流程"><a href="#实例化流程" class="headerlink" title="实例化流程"></a>实例化流程</h3><p>追踪run方法：</p><p>找到SpringApplication的构造</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">SpringApplication</span><span class="params">(ResourceLoader resourceLoader, Class&lt;?&gt;... primarySources)</span> &#123;</span><br><span class="line">   <span class="built_in">this</span>.resourceLoader = resourceLoader;<span class="comment">//1</span></span><br><span class="line">   Assert.notNull(primarySources, <span class="string">&quot;PrimarySources must not be null&quot;</span>);<span class="comment">//2</span></span><br><span class="line">   <span class="built_in">this</span>.primarySources = <span class="keyword">new</span> <span class="title class_">LinkedHashSet</span>&lt;&gt;(Arrays.asList(primarySources));<span class="comment">//3</span></span><br><span class="line">   <span class="built_in">this</span>.webApplicationType = WebApplicationType.deduceFromClasspath();<span class="comment">//4</span></span><br><span class="line">   <span class="built_in">this</span>.bootstrapRegistryInitializers = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(</span><br><span class="line">         getSpringFactoriesInstances(BootstrapRegistryInitializer.class));<span class="comment">//5</span></span><br><span class="line">   setInitializers((Collection) getSpringFactoriesInstances(ApplicationContextInitializer.class));<span class="comment">//6</span></span><br><span class="line">   setListeners((Collection) getSpringFactoriesInstances(ApplicationListener.class));<span class="comment">//7</span></span><br><span class="line">   <span class="built_in">this</span>.mainApplicationClass = deduceMainApplicationClass();<span class="comment">//8</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-设置资源加载器"><a href="#1-设置资源加载器" class="headerlink" title="1.设置资源加载器"></a>1.设置资源加载器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.resourceLoader = resourceLoader;</span><br></pre></td></tr></table></figure><p>ResourceLoader是加载资源的策略接口，默认为null，不需要指定，如果需要自定义资源加载策略，可手动new SpringApplication(…)方式实例SpringApplication</p><h4 id="2-判断主资源类是否存在"><a href="#2-判断主资源类是否存在" class="headerlink" title="2.判断主资源类是否存在"></a>2.判断主资源类是否存在</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Assert.notNull(primarySources, <span class="string">&quot;PrimarySources must not be null&quot;</span>);</span><br></pre></td></tr></table></figure><p>这个主资源类一般指应用启动类</p><p>可以指定多个，但不能为null，否则直接报错</p><h4 id="3-设置主资源类集合"><a href="#3-设置主资源类集合" class="headerlink" title="3.设置主资源类集合"></a>3.设置主资源类集合</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.primarySources = <span class="keyword">new</span> <span class="title class_">LinkedHashSet</span>&lt;&gt;(Arrays.asList(primarySources));</span><br></pre></td></tr></table></figure><p>用LinkedHashSet<strong>初始化</strong>主资源类并且<strong>去重</strong></p><h4 id="4-推断设置Web应用类型"><a href="#4-推断设置Web应用类型" class="headerlink" title="4.推断设置Web应用类型"></a>4.推断设置Web应用类型</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.webApplicationType = WebApplicationType.deduceFromClasspath();</span><br><span class="line"></span><br><span class="line">deduceFromClasspath()源码：</span><br><span class="line">    </span><br><span class="line"><span class="keyword">static</span> WebApplicationType <span class="title function_">deduceFromClasspath</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (ClassUtils.isPresent(WEBFLUX_INDICATOR_CLASS, <span class="literal">null</span>) &amp;&amp; !ClassUtils.isPresent(WEBMVC_INDICATOR_CLASS, <span class="literal">null</span>)</span><br><span class="line">&amp;&amp; !ClassUtils.isPresent(JERSEY_INDICATOR_CLASS, <span class="literal">null</span>)) &#123;</span><br><span class="line"><span class="keyword">return</span> WebApplicationType.REACTIVE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (String className : SERVLET_INDICATOR_CLASSES) &#123;</span><br><span class="line"><span class="keyword">if</span> (!ClassUtils.isPresent(className, <span class="literal">null</span>)) &#123;</span><br><span class="line"><span class="keyword">return</span> WebApplicationType.NONE;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> WebApplicationType.SERVLET;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>根据类路径下是否有对应应用类型的Class推断对应的Web应用类型</p><p>当前支持的WebApplicationType</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">WebApplicationType</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * The application should not run as a web application and should not start an</span></span><br><span class="line"><span class="comment">    * embedded web server.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   NONE,</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * The application should run as a servlet-based web application and should start an</span></span><br><span class="line"><span class="comment">    * embedded servlet web server.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   SERVLET,</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * The application should run as a reactive web application and should start an</span></span><br><span class="line"><span class="comment">    * embedded reactive web server.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   REACTIVE;</span><br><span class="line">...   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两种主流Web应用类型：</p><ul><li>Servlet：导入spring-boot-starter-web依赖，主流</li><li>Reactive：导入spring-boot-starter-webflux依赖</li></ul><h4 id="5-设置引导注册初始化器"><a href="#5-设置引导注册初始化器" class="headerlink" title="5.设置引导注册初始化器"></a>5.设置引导注册初始化器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.bootstrapRegistryInitializers = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(</span><br><span class="line">      getSpringFactoriesInstances(BootstrapRegistryInitializer.class));</span><br></pre></td></tr></table></figure><p>首先从spring.factories文件中获取注册的BootstrapRegistryInitializer接口的实现类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BootstrapRegistryInitializer</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Initialize the given &#123;<span class="doctag">@link</span> BootstrapRegistry&#125; with any required registrations.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> registry the registry to initialize</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">void</span> <span class="title function_">initialize</span><span class="params">(BootstrapRegistry registry)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>BootstrapRegistryInitializer是一个回调接口，主要用于在后面创建BootstrapRegistry的实例时对它进行初始化回调操作，例如 DefaultBootstrapContext实例源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> DefaultBootstrapContext <span class="title function_">createBootstrapContext</span><span class="params">()</span> &#123;</span><br><span class="line">   <span class="type">DefaultBootstrapContext</span> <span class="variable">bootstrapContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultBootstrapContext</span>();</span><br><span class="line">   <span class="built_in">this</span>.bootstrapRegistryInitializers.forEach((initializer) -&gt; initializer.initialize(bootstrapContext));</span><br><span class="line">   <span class="keyword">return</span> bootstrapContext;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> DefaultBootstrapContext是BootstrapContext和BootstrapRegistry接口默认的实例</p><p><img src="https://s2.loli.net/2023/12/11/zOYBuaV6fenTkP9.png" alt="image-20231206161025787"></p><ul><li>BootstrapContext：一个简单的引导上下文接口，在应用启动期间和环境后处理启动可用，直到准备好ApplicationContext为止，对创建成本很高或则需要在ApplicationContext可用之前共享单例对象提供延迟访问</li><li>BootstrapRegistry：一个简单的对象注册表接口，在应用启动期间和环境后处理启动可用，直到准备好ApplicationContext为止，用于创建成本很高的实例，或者在ApplicationContext可用之前需要共享的实例</li></ul><h4 id="6-设置应用上下文初始化器"><a href="#6-设置应用上下文初始化器" class="headerlink" title="6.设置应用上下文初始化器"></a>6.设置应用上下文初始化器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setInitializers((Collection) getSpringFactoriesInstances(ApplicationContextInitializer.class));</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ApplicationContextInitializer</span>&lt;C <span class="keyword">extends</span> <span class="title class_">ConfigurableApplicationContext</span>&gt; &#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Initialize the given application context.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> applicationContext the application to configure</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">void</span> <span class="title function_">initialize</span><span class="params">(C applicationContext)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个回调接口，主要用来在Spring应用上下文ConfigurableApplicationContext刷新之前进行一些初始化操作，如：注册属性资源、激活Profile等….</p><p>他在SpringBoot基础包和自动配置包中都做了不同的实现Spring.factories</p><p>打个断点可以查看所有的实现：</p><p><img src="https://s2.loli.net/2023/12/11/MhzAP4HFgrqED16.png" alt="image-20231206162114406"></p><p>这里一共注册了七个应用上下文初始化器</p><h4 id="7-设置应用事件监听器"><a href="#7-设置应用事件监听器" class="headerlink" title="7.设置应用事件监听器"></a>7.设置应用事件监听器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setListeners((Collection) getSpringFactoriesInstances(ApplicationListener.class));</span><br></pre></td></tr></table></figure><p>Spring中的事件监听器是ApplicationListener接口，是所有Spring事件的抽象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ApplicationListener</span>&lt;E <span class="keyword">extends</span> <span class="title class_">ApplicationEvent</span>&gt; <span class="keyword">extends</span> <span class="title class_">EventListener</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Handle an application event.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> event the event to respond to</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">void</span> <span class="title function_">onApplicationEvent</span><span class="params">(E event)</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Return whether this listener supports asynchronous execution.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; if this listener instance can be executed asynchronously</span></span><br><span class="line"><span class="comment">    * depending on the multicaster configuration (the default), or &#123;<span class="doctag">@code</span> false&#125; if it</span></span><br><span class="line"><span class="comment">    * needs to immediately run within the original thread which published the event</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@since</span> 6.1</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@see</span> org.springframework.context.event.SimpleApplicationEventMulticaster#setTaskExecutor</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">default</span> <span class="type">boolean</span> <span class="title function_">supportsAsyncExecution</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Create a new &#123;<span class="doctag">@code</span> ApplicationListener&#125; for the given payload consumer.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> consumer the event payload consumer</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> &lt;T&gt; the type of the event payload</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> a corresponding &#123;<span class="doctag">@code</span> ApplicationListener&#125; instance</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@since</span> 5.3</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@see</span> PayloadApplicationEvent</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">static</span> &lt;T&gt; ApplicationListener&lt;PayloadApplicationEvent&lt;T&gt;&gt; <span class="title function_">forPayload</span><span class="params">(Consumer&lt;T&gt; consumer)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> event -&gt; consumer.accept(event.getPayload());</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继承了JDK中的java.util.EventListener接口，实现了观察者模式，一般用来监听对应事件，事件类型限定与ApplicationEvent及其子接口</p><p>同样需要再spring.factories文件中进行注册：</p><p>基础包：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Application Listeners</span></span><br><span class="line"><span class="attr">org.springframework.context.ApplicationListener</span>=<span class="string">\</span></span><br><span class="line"><span class="string">org.springframework.boot.ClearCachesApplicationListener,\</span></span><br><span class="line"><span class="string">org.springframework.boot.builder.ParentContextCloserApplicationListener,\</span></span><br><span class="line"><span class="string">org.springframework.boot.context.FileEncodingApplicationListener,\</span></span><br><span class="line"><span class="string">org.springframework.boot.context.config.AnsiOutputApplicationListener,\</span></span><br><span class="line"><span class="string">org.springframework.boot.context.config.DelegatingApplicationListener,\</span></span><br><span class="line"><span class="string">org.springframework.boot.context.logging.LoggingApplicationListener,\</span></span><br><span class="line"><span class="string">org.springframework.boot.env.EnvironmentPostProcessorApplicationListener</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/12/11/q5PFHtwe6ly8kao.png" alt="image-20231206162839279"></p><p>也就是它们几个</p><h4 id="8-推断并设置应用启动类"><a href="#8-推断并设置应用启动类" class="headerlink" title="8.推断并设置应用启动类"></a>8.推断并设置应用启动类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.mainApplicationClass = deduceMainApplicationClass();</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Class&lt;?&gt; deduceMainApplicationClass() &#123;</span><br><span class="line">   <span class="keyword">return</span> StackWalker.getInstance(StackWalker.Option.RETAIN_CLASS_REFERENCE)</span><br><span class="line">      .walk(<span class="built_in">this</span>::findMainClass)</span><br><span class="line">      .orElse(<span class="literal">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Optional&lt;Class&lt;?&gt;&gt; findMainClass(Stream&lt;StackFrame&gt; stack) &#123;</span><br><span class="line">   <span class="keyword">return</span> stack.filter((frame) -&gt; Objects.equals(frame.getMethodName(), <span class="string">&quot;main&quot;</span>))</span><br><span class="line">      .findFirst()</span><br><span class="line">      .map(StackWalker.StackFrame::getDeclaringClass);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="9-总结"><a href="#9-总结" class="headerlink" title="9.总结"></a>9.总结</h4><p>SpringApplication实例化大致流程：</p><p><img src="https://s2.loli.net/2023/12/11/L7GQqACd2byjZuY.png" alt="image-20231206163542514"></p><h3 id="启动流程"><a href="#启动流程" class="headerlink" title="启动流程"></a>启动流程</h3><p>前面只是构造器实例化了一些初始数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> ConfigurableApplicationContext <span class="title function_">run</span><span class="params">(String... args)</span> &#123;</span><br><span class="line">   <span class="type">Startup</span> <span class="variable">startup</span> <span class="operator">=</span> Startup.create();<span class="comment">//1</span></span><br><span class="line">   <span class="keyword">if</span> (<span class="built_in">this</span>.registerShutdownHook) &#123;</span><br><span class="line">      SpringApplication.shutdownHook.enableShutdownHookAddition();</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="type">DefaultBootstrapContext</span> <span class="variable">bootstrapContext</span> <span class="operator">=</span> createBootstrapContext();<span class="comment">//2</span></span><br><span class="line">   <span class="type">ConfigurableApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">   configureHeadlessProperty();<span class="comment">//3</span></span><br><span class="line">   <span class="type">SpringApplicationRunListeners</span> <span class="variable">listeners</span> <span class="operator">=</span> getRunListeners(args);<span class="comment">//4</span></span><br><span class="line">   listeners.starting(bootstrapContext, <span class="built_in">this</span>.mainApplicationClass);</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">       <span class="comment">//5</span></span><br><span class="line">      <span class="type">ApplicationArguments</span> <span class="variable">applicationArguments</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultApplicationArguments</span>(args);</span><br><span class="line">       <span class="comment">//6</span></span><br><span class="line">      <span class="type">ConfigurableEnvironment</span> <span class="variable">environment</span> <span class="operator">=</span> prepareEnvironment(listeners, bootstrapContext, applicationArguments);</span><br><span class="line">       <span class="comment">//7</span></span><br><span class="line">      <span class="type">Banner</span> <span class="variable">printedBanner</span> <span class="operator">=</span> printBanner(environment);</span><br><span class="line">       <span class="comment">//8</span></span><br><span class="line">      context = createApplicationContext();</span><br><span class="line">      context.setApplicationStartup(<span class="built_in">this</span>.applicationStartup);</span><br><span class="line">       <span class="comment">//9</span></span><br><span class="line">      prepareContext(bootstrapContext, context, environment, listeners, applicationArguments, printedBanner);</span><br><span class="line">       <span class="comment">//10</span></span><br><span class="line">      refreshContext(context);</span><br><span class="line">       <span class="comment">//11</span></span><br><span class="line">      afterRefresh(context, applicationArguments);</span><br><span class="line">      </span><br><span class="line">       <span class="comment">//12</span></span><br><span class="line">      startup.started();</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.logStartupInfo) &#123;</span><br><span class="line">         <span class="keyword">new</span> <span class="title class_">StartupInfoLogger</span>(<span class="built_in">this</span>.mainApplicationClass).logStarted(getApplicationLog(), startup);</span><br><span class="line">      &#125;</span><br><span class="line">      listeners.started(context, startup.timeTakenToStarted());</span><br><span class="line">       </span><br><span class="line">       <span class="comment">//13</span></span><br><span class="line">      callRunners(context, applicationArguments);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">      <span class="keyword">if</span> (ex <span class="keyword">instanceof</span> AbandonedRunException) &#123;</span><br><span class="line">         <span class="keyword">throw</span> ex;</span><br><span class="line">      &#125;</span><br><span class="line">      handleRunFailure(context, ex, listeners);</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(ex);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">       <span class="comment">//14</span></span><br><span class="line">      <span class="keyword">if</span> (context.isRunning()) &#123;</span><br><span class="line">         listeners.ready(context, startup.ready());</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">      <span class="keyword">if</span> (ex <span class="keyword">instanceof</span> AbandonedRunException) &#123;</span><br><span class="line">         <span class="keyword">throw</span> ex;</span><br><span class="line">      &#125;</span><br><span class="line">      handleRunFailure(context, ex, <span class="literal">null</span>);</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(ex);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> context;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-选择环境和JVM处理"><a href="#1-选择环境和JVM处理" class="headerlink" title="1.选择环境和JVM处理"></a>1.选择环境和JVM处理</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Startup</span> <span class="variable">startup</span> <span class="operator">=</span> Startup.create();</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.registerShutdownHook) &#123;</span><br><span class="line">   SpringApplication.shutdownHook.enableShutdownHookAddition();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据两个类的存在性，动态地选择返回不同的 <code>Startup</code> 接口的实现类的实例。</p><p>如果应用配置要求注册 JVM 关闭钩子，那么通过调用 <code>enableShutdownHookAddition()</code> 方法来启用 JVM 关闭钩子的添加。</p><h4 id="2-初始化默认引导上下文"><a href="#2-初始化默认引导上下文" class="headerlink" title="2.初始化默认引导上下文"></a>2.初始化默认引导上下文</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">DefaultBootstrapContext</span> <span class="variable">bootstrapContext</span> <span class="operator">=</span> createBootstrapContext();</span><br><span class="line"><span class="type">ConfigurableApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><p>创建一个默认的引导上下文createBootstrapContext</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> DefaultBootstrapContext <span class="title function_">createBootstrapContext</span><span class="params">()</span> &#123;</span><br><span class="line">   <span class="type">DefaultBootstrapContext</span> <span class="variable">bootstrapContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultBootstrapContext</span>();</span><br><span class="line">   <span class="built_in">this</span>.bootstrapRegistryInitializers.forEach((initializer) -&gt; initializer.initialize(bootstrapContext));</span><br><span class="line">   <span class="keyword">return</span> bootstrapContext;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实例化中有描述</p><h4 id="3-设置Headless模式"><a href="#3-设置Headless模式" class="headerlink" title="3.设置Headless模式"></a>3.设置Headless模式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">configureHeadlessProperty();</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">configureHeadlessProperty</span><span class="params">()</span> &#123;</span><br><span class="line">   System.setProperty(SYSTEM_PROPERTY_JAVA_AWT_HEADLESS,</span><br><span class="line">         System.getProperty(SYSTEM_PROPERTY_JAVA_AWT_HEADLESS, Boolean.toString(<span class="built_in">this</span>.headless)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>逻辑：如果没有java.awt.headless参数的值，就默认设置为true</p><p>在Spring Boot应用中设置<code>java.awt.headless=true</code>通常是为了确保应用在没有图形用户界面（GUI）环境下正常运行。在服务器端应用程序中，特别是在没有图形界面的环境中（例如Linux服务器），Java AWT和Swing等图形库可能会导致一些问题，因为它们通常依赖于图形环境。</p><p>设置<code>java.awt.headless=true</code>告诉Java虚拟机（JVM）在缺少图形环境的情况下运行。这通常用于服务器端应用，其中图形用户界面是不需要的，但可能存在使用到AWT或Swing的库的情况。</p><p>在Spring Boot应用中，特别是在Web应用中，如果你的应用不需要图形界面支持，设置<code>java.awt.headless=true</code>可以帮助避免一些潜在的问题，并确保应用在非图形环境下能够正常运行。这是一个良好的实践，特别是在部署到服务器上时。</p><h4 id="4-初始化启动方法监听器"><a href="#4-初始化启动方法监听器" class="headerlink" title="4.初始化启动方法监听器"></a>4.初始化启动方法监听器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">SpringApplicationRunListeners</span> <span class="variable">listeners</span> <span class="operator">=</span> getRunListeners(args);</span><br><span class="line">listeners.starting(bootstrapContext, <span class="built_in">this</span>.mainApplicationClass);</span><br></pre></td></tr></table></figure><p>从spring.factories文件中获取所有SpringApplicationRunListener类型的监听器，并封装成SpringApplicationRunListeners包装类，SpringApplicationRunListener目前只有一个实现类EventPublishingRunListener</p><p>SpringApplicationRunListeners包装类主要信息：</p><ul><li>Log：日志对象</li><li>List<SpringApplicationRunListener>：SpringApplicationRunListener监听器集合</li><li>ApplicationStartup：应用启动管理类，他能步骤化监视应用的启动阶段</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SpringApplicationRunListeners</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> Log log;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> List&lt;SpringApplicationRunListener&gt; listeners;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> ApplicationStartup applicationStartup;</span><br><span class="line"></span><br><span class="line">.......</span><br><span class="line"></span><br><span class="line">   <span class="keyword">void</span> <span class="title function_">starting</span><span class="params">(ConfigurableBootstrapContext bootstrapContext, Class&lt;?&gt; mainApplicationClass)</span> &#123;</span><br><span class="line">      doWithListeners(<span class="string">&quot;spring.boot.application.starting&quot;</span>, (listener) -&gt; listener.starting(bootstrapContext),</span><br><span class="line">            (step) -&gt; &#123;</span><br><span class="line">               <span class="keyword">if</span> (mainApplicationClass != <span class="literal">null</span>) &#123;</span><br><span class="line">                  step.tag(<span class="string">&quot;mainApplicationClass&quot;</span>, mainApplicationClass.getName());</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">..............</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">doWithListeners</span><span class="params">(String stepName, Consumer&lt;SpringApplicationRunListener&gt; listenerAction)</span> &#123;</span><br><span class="line">      doWithListeners(stepName, listenerAction, <span class="literal">null</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">doWithListeners</span><span class="params">(String stepName, Consumer&lt;SpringApplicationRunListener&gt; listenerAction,</span></span><br><span class="line"><span class="params">         Consumer&lt;StartupStep&gt; stepAction)</span> &#123;</span><br><span class="line">      <span class="type">StartupStep</span> <span class="variable">step</span> <span class="operator">=</span> <span class="built_in">this</span>.applicationStartup.start(stepName);</span><br><span class="line">      <span class="built_in">this</span>.listeners.forEach(listenerAction);</span><br><span class="line">      <span class="keyword">if</span> (stepAction != <span class="literal">null</span>) &#123;</span><br><span class="line">         stepAction.accept(step);</span><br><span class="line">      &#125;</span><br><span class="line">      step.end();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先标记启动步骤，然后执行EventPublishingRunListener的starting方法，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">EventPublishingRunListener</span> <span class="keyword">implements</span> <span class="title class_">SpringApplicationRunListener</span>, Ordered &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> SpringApplication application;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> String[] args;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> SimpleApplicationEventMulticaster initialMulticaster;</span><br><span class="line"></span><br><span class="line">   EventPublishingRunListener(SpringApplication application, String[] args) &#123;</span><br><span class="line">      <span class="built_in">this</span>.application = application;</span><br><span class="line">      <span class="built_in">this</span>.args = args;</span><br><span class="line">      <span class="built_in">this</span>.initialMulticaster = <span class="keyword">new</span> <span class="title class_">SimpleApplicationEventMulticaster</span>();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getOrder</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">starting</span><span class="params">(ConfigurableBootstrapContext bootstrapContext)</span> &#123;</span><br><span class="line">      multicastInitialEvent(<span class="keyword">new</span> <span class="title class_">ApplicationStartingEvent</span>(bootstrapContext, <span class="built_in">this</span>.application, <span class="built_in">this</span>.args));</span><br><span class="line">   &#125;</span><br><span class="line">.....................   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到这里，发布了ApplicationStartingEvent应用启动事件</p><h4 id="5-初始化应用参数类"><a href="#5-初始化应用参数类" class="headerlink" title="5.初始化应用参数类"></a>5.初始化应用参数类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ApplicationArguments</span> <span class="variable">applicationArguments</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultApplicationArguments</span>(args);</span><br></pre></td></tr></table></figure><p>先通过main方法提供的入口参数构建一个默认的DefaultApplicationArguments应用参数类，后续可以通过这个类来获取应用参数</p><h4 id="6-准备Spring环境"><a href="#6-准备Spring环境" class="headerlink" title="6.准备Spring环境"></a>6.准备Spring环境</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ConfigurableEnvironment</span> <span class="variable">environment</span> <span class="operator">=</span> prepareEnvironment(listeners, bootstrapContext, applicationArguments);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> ConfigurableEnvironment <span class="title function_">prepareEnvironment</span><span class="params">(SpringApplicationRunListeners listeners,</span></span><br><span class="line"><span class="params">      DefaultBootstrapContext bootstrapContext, ApplicationArguments applicationArguments)</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//a</span></span><br><span class="line">   <span class="comment">// Create and configure the environment</span></span><br><span class="line">   <span class="type">ConfigurableEnvironment</span> <span class="variable">environment</span> <span class="operator">=</span> getOrCreateEnvironment();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//b</span></span><br><span class="line">   configureEnvironment(environment, applicationArguments.getSourceArgs());</span><br><span class="line">   ConfigurationPropertySources.attach(environment);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//c</span></span><br><span class="line">   listeners.environmentPrepared(bootstrapContext, environment);</span><br><span class="line">   DefaultPropertiesPropertySource.moveToEnd(environment);</span><br><span class="line">   Assert.state(!environment.containsProperty(<span class="string">&quot;spring.main.environment-prefix&quot;</span>),</span><br><span class="line">         <span class="string">&quot;Environment prefix cannot be set via properties.&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//d</span></span><br><span class="line">   bindToSpringApplication(environment);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//e</span></span><br><span class="line">   <span class="keyword">if</span> (!<span class="built_in">this</span>.isCustomEnvironment) &#123;</span><br><span class="line">      <span class="type">EnvironmentConverter</span> <span class="variable">environmentConverter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EnvironmentConverter</span>(getClassLoader());</span><br><span class="line">      environment = environmentConverter.convertEnvironmentIfNecessary(environment, deduceEnvironmentClass());</span><br><span class="line">   &#125;</span><br><span class="line">   ConfigurationPropertySources.attach(environment);</span><br><span class="line">   <span class="keyword">return</span> environment;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里主要是根据上面获得的listeners、bootstrapConext、ApplicationArguments再去准备SpringEnvironment</p><p>环境，大致步骤：</p><p>a创建对应的Web类型的SpringEnvironment</p><p>b把ApplicationArguments参数类及其他应用参数设置到SpringEnvironment环境中</p><p>c调用监听器的environmentPrepared方法，发布ApplicationEnvironmentPreparedEvent应用环境已准备好事件</p><p>d把SpringEnvironment环境绑定到SpringApplication</p><p>e非自定义的SpringEnvironment环境，如果有需要还会进行环境转换</p><h4 id="7-打印启动图案"><a href="#7-打印启动图案" class="headerlink" title="7.打印启动图案"></a>7.打印启动图案</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Banner</span> <span class="variable">printedBanner</span> <span class="operator">=</span> printBanner(environment);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Banner <span class="title function_">printBanner</span><span class="params">(ConfigurableEnvironment environment)</span> &#123;</span><br><span class="line">   <span class="keyword">if</span> (<span class="built_in">this</span>.bannerMode == Banner.Mode.OFF) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="type">ResourceLoader</span> <span class="variable">resourceLoader</span> <span class="operator">=</span> (<span class="built_in">this</span>.resourceLoader != <span class="literal">null</span>) ? <span class="built_in">this</span>.resourceLoader</span><br><span class="line">         : <span class="keyword">new</span> <span class="title class_">DefaultResourceLoader</span>(<span class="literal">null</span>);</span><br><span class="line">   <span class="type">SpringApplicationBannerPrinter</span> <span class="variable">bannerPrinter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpringApplicationBannerPrinter</span>(resourceLoader, <span class="built_in">this</span>.banner);</span><br><span class="line">   <span class="keyword">if</span> (<span class="built_in">this</span>.bannerMode == Mode.LOG) &#123;</span><br><span class="line">      <span class="keyword">return</span> bannerPrinter.print(environment, <span class="built_in">this</span>.mainApplicationClass, logger);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> bannerPrinter.print(environment, <span class="built_in">this</span>.mainApplicationClass, System.out);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先判断是否开启，然后判断是否自定义图案( DefaultResourceLoader)，接着打印自己默认的图案（SpringApplicationBannerPrinter）</p><h4 id="8-创建上下文"><a href="#8-创建上下文" class="headerlink" title="8.创建上下文"></a>8.创建上下文</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">context = createApplicationContext();</span><br><span class="line">context.setApplicationStartup(<span class="built_in">this</span>.applicationStartup);</span><br></pre></td></tr></table></figure><p>先创建对应Web类型的Spring上下文，然后创建一个默认的ApplicationStartup应用启动管理类并设置到上下文对象中。</p><p>Spring上下文是通过applicationContextFactory工厂创建的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> ConfigurableApplicationContext <span class="title function_">createApplicationContext</span><span class="params">()</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="built_in">this</span>.applicationContextFactory.create(<span class="built_in">this</span>.webApplicationType);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ApplicationContextFactory上下文工厂有三个实现类：</p><ul><li>DefaultApplicationContextFactory：默认的应用上下文工厂类</li><li>ServletWebServerApplicationContextFactory：Servlet的应用上下文工厂类</li><li>ReactiveWebServerApplicationContextFactory：Reactive的应用上下文工厂类</li></ul><p>SpringBoot默认的DefaultApplicationContextFactory，由它来驱动另外两个</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringApplication</span> &#123;</span><br><span class="line">....</span><br><span class="line"><span class="keyword">private</span> <span class="type">ApplicationContextFactory</span> <span class="variable">applicationContextFactory</span> <span class="operator">=</span> ApplicationContextFactory.DEFAULT;</span><br><span class="line">...........</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">DefaultApplicationContextFactory</span> <span class="keyword">implements</span> <span class="title class_">ApplicationContextFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">.....</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> ConfigurableApplicationContext <span class="title function_">create</span><span class="params">(WebApplicationType webApplicationType)</span> &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="keyword">return</span> getFromSpringFactories(webApplicationType, ApplicationContextFactory::create,</span><br><span class="line">               <span class="built_in">this</span>::createDefaultApplicationContext);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;Unable create a default ApplicationContext instance, &quot;</span></span><br><span class="line">               + <span class="string">&quot;you may need a custom ApplicationContextFactory&quot;</span>, ex);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">.....</span><br><span class="line">   <span class="keyword">private</span> &lt;T&gt; T <span class="title function_">getFromSpringFactories</span><span class="params">(WebApplicationType webApplicationType,</span></span><br><span class="line"><span class="params">         BiFunction&lt;ApplicationContextFactory, WebApplicationType, T&gt; action, Supplier&lt;T&gt; defaultResult)</span> &#123;</span><br><span class="line">      <span class="keyword">for</span> (ApplicationContextFactory candidate : SpringFactoriesLoader.loadFactories(ApplicationContextFactory.class,</span><br><span class="line">            getClass().getClassLoader())) &#123;</span><br><span class="line">         <span class="type">T</span> <span class="variable">result</span> <span class="operator">=</span> action.apply(candidate, webApplicationType);</span><br><span class="line">         <span class="keyword">if</span> (result != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> (defaultResult != <span class="literal">null</span>) ? defaultResult.get() : <span class="literal">null</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>核心逻辑就是：DefaultApplicationContextFactory工厂创建上下文时候回加载SpringBoot基础包的spring.factories文件中的ApplicationContextFactory注册工厂实现类</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Application Context Factories</span></span><br><span class="line"><span class="attr">org.springframework.boot.ApplicationContextFactory</span>=<span class="string">\</span></span><br><span class="line"><span class="string">org.springframework.boot.web.reactive.context.ReactiveWebServerApplicationContextFactory,\</span></span><br><span class="line"><span class="string">org.springframework.boot.web.servlet.context.ServletWebServerApplicationContextFactory</span></span><br></pre></td></tr></table></figure><p>然后循环所有的注册的ApplicationContextFactory工厂实现类，在通过ApplicationContextFactory::create方法引用一一判断当前Web应用类型是否成功创建上下文对象，成功直接返回，否则返回默认。</p><p>这里是Servlet应用就匹配ServletWebServerApplicationContextFactory</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ServletWebServerApplicationContextFactory</span> <span class="keyword">implements</span> <span class="title class_">ApplicationContextFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> Class&lt;? <span class="keyword">extends</span> <span class="title class_">ConfigurableEnvironment</span>&gt; getEnvironmentType(WebApplicationType webApplicationType) &#123;</span><br><span class="line">      <span class="keyword">return</span> (webApplicationType != WebApplicationType.SERVLET) ? <span class="literal">null</span> : ApplicationServletEnvironment.class;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> ConfigurableEnvironment <span class="title function_">createEnvironment</span><span class="params">(WebApplicationType webApplicationType)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> (webApplicationType != WebApplicationType.SERVLET) ? <span class="literal">null</span> : <span class="keyword">new</span> <span class="title class_">ApplicationServletEnvironment</span>();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> ConfigurableApplicationContext <span class="title function_">create</span><span class="params">(WebApplicationType webApplicationType)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> (webApplicationType != WebApplicationType.SERVLET) ? <span class="literal">null</span> : createContext();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> ConfigurableApplicationContext <span class="title function_">createContext</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (!AotDetector.useGeneratedArtifacts()) &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigServletWebServerApplicationContext</span>();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ServletWebServerApplicationContext</span>();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因这里不涉及AOT技术，就返回AnnotationConfigServletWebServerApplicationContext上下文对象</p><h4 id="9-准备上下文"><a href="#9-准备上下文" class="headerlink" title="9.准备上下文"></a>9.准备上下文</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">prepareContext(bootstrapContext, context, environment, listeners, applicationArguments, printedBanner);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">prepareContext</span><span class="params">(DefaultBootstrapContext bootstrapContext, ConfigurableApplicationContext context,</span></span><br><span class="line"><span class="params">      ConfigurableEnvironment environment, SpringApplicationRunListeners listeners,</span></span><br><span class="line"><span class="params">      ApplicationArguments applicationArguments, Banner printedBanner)</span> &#123;</span><br><span class="line">    <span class="comment">//1</span></span><br><span class="line">   context.setEnvironment(environment);</span><br><span class="line">   postProcessApplicationContext(context);</span><br><span class="line">   addAotGeneratedInitializerIfNecessary(<span class="built_in">this</span>.initializers);</span><br><span class="line">    <span class="comment">//2</span></span><br><span class="line">   applyInitializers(context);</span><br><span class="line">    <span class="comment">//3</span></span><br><span class="line">   listeners.contextPrepared(context);</span><br><span class="line">    <span class="comment">//4</span></span><br><span class="line">   bootstrapContext.close(context);</span><br><span class="line">   <span class="keyword">if</span> (<span class="built_in">this</span>.logStartupInfo) &#123;</span><br><span class="line">      logStartupInfo(context.getParent() == <span class="literal">null</span>);</span><br><span class="line">      logStartupProfileInfo(context);</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="comment">//5</span></span><br><span class="line">   <span class="comment">// Add boot specific singleton beans</span></span><br><span class="line">   <span class="type">ConfigurableListableBeanFactory</span> <span class="variable">beanFactory</span> <span class="operator">=</span> context.getBeanFactory();</span><br><span class="line">   beanFactory.registerSingleton(<span class="string">&quot;springApplicationArguments&quot;</span>, applicationArguments);</span><br><span class="line">   <span class="keyword">if</span> (printedBanner != <span class="literal">null</span>) &#123;</span><br><span class="line">      beanFactory.registerSingleton(<span class="string">&quot;springBootBanner&quot;</span>, printedBanner);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> (beanFactory <span class="keyword">instanceof</span> AbstractAutowireCapableBeanFactory autowireCapableBeanFactory) &#123;</span><br><span class="line">      autowireCapableBeanFactory.setAllowCircularReferences(<span class="built_in">this</span>.allowCircularReferences);</span><br><span class="line">      <span class="keyword">if</span> (beanFactory <span class="keyword">instanceof</span> DefaultListableBeanFactory listableBeanFactory) &#123;</span><br><span class="line">         listableBeanFactory.setAllowBeanDefinitionOverriding(<span class="built_in">this</span>.allowBeanDefinitionOverriding);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="comment">//6</span></span><br><span class="line">   <span class="keyword">if</span> (<span class="built_in">this</span>.lazyInitialization) &#123;</span><br><span class="line">      context.addBeanFactoryPostProcessor(<span class="keyword">new</span> <span class="title class_">LazyInitializationBeanFactoryPostProcessor</span>());</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> (<span class="built_in">this</span>.keepAlive) &#123;</span><br><span class="line">      <span class="type">KeepAlive</span> <span class="variable">keepAlive</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">KeepAlive</span>();</span><br><span class="line">      keepAlive.start();</span><br><span class="line">      context.addApplicationListener(keepAlive);</span><br><span class="line">   &#125;</span><br><span class="line">   context.addBeanFactoryPostProcessor(<span class="keyword">new</span> <span class="title class_">PropertySourceOrderingBeanFactoryPostProcessor</span>(context));</span><br><span class="line">    <span class="comment">//7</span></span><br><span class="line">   <span class="keyword">if</span> (!AotDetector.useGeneratedArtifacts()) &#123;</span><br><span class="line">      <span class="comment">// Load the sources</span></span><br><span class="line">      Set&lt;Object&gt; sources = getAllSources();</span><br><span class="line">      Assert.notEmpty(sources, <span class="string">&quot;Sources must not be empty&quot;</span>);</span><br><span class="line">      load(context, sources.toArray(<span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]));</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="comment">//8</span></span><br><span class="line">   listeners.contextLoaded(context);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1.绑定Spring环境到Spring应用上下文，以及相关后置处理</p><p>2.遍历所有ApplicationContextInitializer上下文处理器，逐个初始化Spring上下文</p><p>3.调用SpringApplicationRunListeners#contextPrepared方法，发布ApplicationContextInitializedEvent应用上下文初始化事件</p><p>4.调用DefaultBootstrapContext#close方法，发布BootstrapContextClosedEvent引导上下文关闭事件</p><p>5.获取BeanFactory，先注册springApplicationArgunments、springBootBanner注入单例对象，然后设置是否允许循环引用、是否覆盖Bean参数</p><p>6.为Spring上下文添加BeanFactoryPostProcessor相关实现类，此接口一般可用来扩展或者修改Bean的定义，这里就是添加了懒加载处理器以及PropertySource重排序处理器</p><p>7.如果是非AOT模式，则获取所有资源类并把Bean加载到上下文环境中</p><p>8.调用SpringApplicationRunListeners#contextLoaded方法，发布ApplicationPreparedEvent应用已经准备好的事件</p><h4 id="10刷新上下文"><a href="#10刷新上下文" class="headerlink" title="10刷新上下文"></a>10刷新上下文</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">refreshContext(context);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">SpringApplicationShutdownHook</span> <span class="variable">shutdownHook</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpringApplicationShutdownHook</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">registerShutdownHook</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">refreshContext</span><span class="params">(ConfigurableApplicationContext context)</span> &#123;</span><br><span class="line">   <span class="keyword">if</span> (<span class="built_in">this</span>.registerShutdownHook) &#123;</span><br><span class="line">      shutdownHook.registerApplicationContext(context);</span><br><span class="line">   &#125;</span><br><span class="line">   refresh(context);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">refresh</span><span class="params">(ConfigurableApplicationContext applicationContext)</span> &#123;</span><br><span class="line">applicationContext.refresh();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>SpringApplicationShutdownHook是一个实现了Runnable接口的线程类，它是优雅关闭SpringBoot应用时的一个关闭钩子，这个关闭钩子在这里将Spring上下文进行了注册，默认为允许注册</p><p>然后refresh再调用applicationContext#refresh()方法对上下文进行刷新。</p><p>如果是Servelt应用则进入AnnotationConfigServletWebApplicationContext的父类ServletWebServerApplicationContext#reresh方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletWebServerApplicationContext</span> <span class="keyword">extends</span> <span class="title class_">GenericWebApplicationContext</span></span><br><span class="line"><span class="keyword">implements</span> <span class="title class_">ConfigurableWebServerApplicationContext</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">refresh</span><span class="params">()</span> <span class="keyword">throws</span> BeansException, IllegalStateException &#123;</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="built_in">super</span>.refresh();</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (RuntimeException ex) &#123;</span><br><span class="line">      <span class="type">WebServer</span> <span class="variable">webServer</span> <span class="operator">=</span> <span class="built_in">this</span>.webServer;</span><br><span class="line">      <span class="keyword">if</span> (webServer != <span class="literal">null</span>) &#123;</span><br><span class="line">         webServer.stop();</span><br><span class="line">         webServer.destroy();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">throw</span> ex;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onRefresh</span><span class="params">()</span> &#123;</span><br><span class="line">   <span class="built_in">super</span>.onRefresh();</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">      createWebServer();</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ApplicationContextException</span>(<span class="string">&quot;Unable to start web server&quot;</span>, ex);</span><br><span class="line">   &#125;</span><br><span class="line">    </span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>执行Spring上下文的刷新操作，这里会通过重写Spring中的onRefresh方法创建一个Web Server服务器，并且发布ContextRefreshedEvent、WebServerInitializedEvent事件，如果创建成功后发生异常立即停止运行Web Server服务器。</p><h4 id="11-刷新上下文之后"><a href="#11-刷新上下文之后" class="headerlink" title="11.刷新上下文之后"></a>11.刷新上下文之后</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">afterRefresh(context, applicationArguments);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">afterRefresh</span><span class="params">(ConfigurableApplicationContext context, ApplicationArguments args)</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>暂时没有逻辑</p><h4 id="12-应用启动成功"><a href="#12-应用启动成功" class="headerlink" title="12.应用启动成功"></a>12.应用启动成功</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">startup.started();</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.logStartupInfo) &#123;</span><br><span class="line">   <span class="keyword">new</span> <span class="title class_">StartupInfoLogger</span>(<span class="built_in">this</span>.mainApplicationClass).logStarted(getApplicationLog(), startup);</span><br><span class="line">&#125;</span><br><span class="line">listeners.started(context, startup.timeTakenToStarted());</span><br></pre></td></tr></table></figure><p>到这里，应用已经启动成功，先计算应用的总耗时，然后输出到日志，最后调用SpringApplicationRunListeners#started方法，发布ApplicationStartedEvent应用已成功启动事件。</p><h4 id="13-运行Spring-Boot-Runner"><a href="#13-运行Spring-Boot-Runner" class="headerlink" title="13.运行Spring Boot Runner"></a>13.运行Spring Boot Runner</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">callRunners(context, applicationArguments);</span><br></pre></td></tr></table></figure><p>应用启动成功后，再执行所有的SpringBootRunner运行器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">callRunners</span><span class="params">(ApplicationContext context, ApplicationArguments args)</span> &#123;</span><br><span class="line">   context.getBeanProvider(Runner.class).orderedStream().forEach((runner) -&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (runner <span class="keyword">instanceof</span> ApplicationRunner applicationRunner) &#123;</span><br><span class="line">         callRunner(applicationRunner, args);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (runner <span class="keyword">instanceof</span> CommandLineRunner commandLineRunner) &#123;</span><br><span class="line">         callRunner(commandLineRunner, args);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">callRunner</span><span class="params">(ApplicationRunner runner, ApplicationArguments args)</span> &#123;</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">      (runner).run(args);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;Failed to execute ApplicationRunner&quot;</span>, ex);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">callRunner</span><span class="params">(CommandLineRunner runner, ApplicationArguments args)</span> &#123;</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">      (runner).run(args.getSourceArgs());</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;Failed to execute CommandLineRunner&quot;</span>, ex);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先将所有的ApplicationRunner和CommandLineRunner实例添加到一个集合中，然后排序去重，最后遍历该集合依次调用其run方法。</p><h4 id="14-应用已就绪"><a href="#14-应用已就绪" class="headerlink" title="14.应用已就绪"></a>14.应用已就绪</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (context.isRunning()) &#123;</span><br><span class="line">   listeners.ready(context, startup.ready());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>检查Spring上下文是否正在运行，如果是，则调用SpringApplicationRunListeners#ready方法，并且发布两个事件：</p><ul><li>ApplicationReadyEvent：应用已就绪事件</li><li>AvailablilityChangeEvent：应用可用性变更性事件，可用状态变更为ReadinessState.ACCEPTING_TRAFFIC，即应用可以接受请求了。</li></ul><h4 id="15-启动流程异常处理"><a href="#15-启动流程异常处理" class="headerlink" title="15.启动流程异常处理"></a>15.启动流程异常处理</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">   <span class="keyword">if</span> (ex <span class="keyword">instanceof</span> AbandonedRunException) &#123;</span><br><span class="line">      <span class="keyword">throw</span> ex;</span><br><span class="line">   &#125;</span><br><span class="line">   handleRunFailure(context, ex, <span class="literal">null</span>);</span><br><span class="line">   <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(ex);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;SpringBoot启动过程与拓展应用&quot;&gt;&lt;a href=&quot;#SpringBoot启动过程与拓展应用&quot; class=&quot;headerlink&quot; title=&quot;SpringBoot启动过程与拓展应用&quot;&gt;&lt;/a&gt;SpringBoot启动过程与拓展应用&lt;/h1&gt;&lt;h2 i</summary>
      
    
    
    
    <category term="SpringBoot3" scheme="https://humbledong.github.io/categories/SpringBoot3/"/>
    
    
    <category term="SpringBoot3" scheme="https://humbledong.github.io/tags/SpringBoot3/"/>
    
  </entry>
  
  <entry>
    <title>SpringBootStarter和自动配置</title>
    <link href="https://humbledong.github.io/undefined/91f6cd83.html"/>
    <id>https://humbledong.github.io/undefined/91f6cd83.html</id>
    <published>2023-10-15T06:14:20.000Z</published>
    <updated>2024-01-08T07:04:41.791Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringBootStarter和自动配置"><a href="#SpringBootStarter和自动配置" class="headerlink" title="SpringBootStarter和自动配置"></a>SpringBootStarter和自动配置</h1><h2 id="SpringBootStarter"><a href="#SpringBootStarter" class="headerlink" title="SpringBootStarter"></a>SpringBootStarter</h2><h3 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h3><p>Starter作为SpringBoot的一站式启动器，我们看到xxxSpringBootStarter就是一个启动器，它包含了一系列可以集成到SpringBoot中的依赖，我们只需要简单配置就可以实现“开箱即用”</p><p>一个完整的SpringBootStarter一般需要包含以下组件：</p><ul><li>完成自动配置的自动配置模块</li><li>为自动配置模块提供的所有依赖项</li></ul><p>一个SpringBootStarter包含一个jar包和一个依赖配置文件，官方jar包中没有任何实质内容，官方提供的自动配置类和自动配置逻辑全部储存在另外一个自动配置模块中(spring-boot-autoconfiguration),具体看下文</p><h3 id="2-命名规范"><a href="#2-命名规范" class="headerlink" title="2.命名规范"></a>2.命名规范</h3><p>官方的：spring-boot-starter-*</p><p>第三方：*-spring-boot-starter</p><h3 id="3-分类"><a href="#3-分类" class="headerlink" title="3.分类"></a>3.分类</h3><p>应用级：</p><p>太多了不列举，官网看。</p><p>生产级别：</p><table><thead><tr><th>编号</th><th>starter名称</th><th>starter描述</th></tr></thead><tbody><tr><td>1</td><td>spring-boot-starter-actuator</td><td>集成SpringBootActuator，提供生产功能帮助开发者监控和管理应用</td></tr></tbody></table><p>目前只有这一个。生产级Starter意味着和任何技术、业务没有关系，只要用了SpringBoot，只有生产环境下可以使用。毕竟本地和测试环境没有必要增加监控功能的必要。</p><p>技术级：</p><p>比如：spring-boot-starter-tomcat</p><h2 id="自动配置文件的加载原理"><a href="#自动配置文件的加载原理" class="headerlink" title="自动配置文件的加载原理"></a>自动配置文件的加载原理</h2><p>首先看<code>@EnableAutoConfiguration</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@AutoConfigurationPackage</span></span><br><span class="line"><span class="meta">@Import(AutoConfigurationImportSelector.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableAutoConfiguration &#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Environment property that can be used to override when auto-configuration is</span></span><br><span class="line"><span class="comment">    * enabled.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="type">String</span> <span class="variable">ENABLED_OVERRIDE_PROPERTY</span> <span class="operator">=</span> <span class="string">&quot;spring.boot.enableautoconfiguration&quot;</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Exclude specific auto-configuration classes such that they will never be applied.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> the classes to exclude</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   Class&lt;?&gt;[] exclude() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Exclude specific auto-configuration class names such that they will never be</span></span><br><span class="line"><span class="comment">    * applied.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> the class names to exclude</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@since</span> 1.3.0</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   String[] excludeName() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>@AutoConfigurationPackage：注册需要自动配置的包，如果不指定就是当前注解所在类的包</li><li>@Import(AutoConfigurationImportSelector.class)：导入配置类，这个注解就是导入ImportSelector接口类</li></ul><p>自动配置@Import注解导入的是AutoConfigurationImportSelector.calss类，这也是这个注解的关键所在，它实现了ImportSelector接口：</p><p><code>AutoConfigurationImportSelector</code>（类）实现<code>DeferredImportSelector</code>（接口）实现<code>ImportSelector</code>（接口）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ImportSelector</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Select and return the names of which class(es) should be imported based on</span></span><br><span class="line"><span class="comment">    * the &#123;<span class="doctag">@link</span> AnnotationMetadata&#125; of the importing @&#123;<span class="doctag">@link</span> Configuration&#125; class.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> the class names, or an empty array if none</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   String[] selectImports(AnnotationMetadata importingClassMetadata);</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Return a predicate for excluding classes from the import candidates, to be</span></span><br><span class="line"><span class="comment">    * transitively applied to all classes found through this selector&#x27;s imports.</span></span><br><span class="line"><span class="comment">    * &lt;p&gt;If this predicate returns &#123;<span class="doctag">@code</span> true&#125; for a given fully-qualified</span></span><br><span class="line"><span class="comment">    * class name, said class will not be considered as an imported configuration</span></span><br><span class="line"><span class="comment">    * class, bypassing class file loading as well as metadata introspection.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> the filter predicate for fully-qualified candidate class names</span></span><br><span class="line"><span class="comment">    * of transitively imported configuration classes, or &#123;<span class="doctag">@code</span> null&#125; if none</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@since</span> 5.2.4</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Nullable</span></span><br><span class="line">   <span class="keyword">default</span> Predicate&lt;String&gt; <span class="title function_">getExclusionFilter</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>selectImports(抽象方法)：选择要导入的配置类</li><li>Predicate<String> getExclusionFilter()(接口默认方法)：用于返回要排除的类</li></ul><p>然后 AutoConfigurationImportSelector的selectImports方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String[] selectImports(AnnotationMetadata annotationMetadata) &#123;</span><br><span class="line">   <span class="keyword">if</span> (!isEnabled(annotationMetadata)) &#123;</span><br><span class="line">      <span class="keyword">return</span> NO_IMPORTS;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="type">AutoConfigurationEntry</span> <span class="variable">autoConfigurationEntry</span> <span class="operator">=</span> getAutoConfigurationEntry(annotationMetadata);</span><br><span class="line">   <span class="keyword">return</span> StringUtils.toStringArray(autoConfigurationEntry.getConfigurations());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后跟着getAutoConfigurationEntry进入getCandidateConfigurations方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> List&lt;String&gt; <span class="title function_">getCandidateConfigurations</span><span class="params">(AnnotationMetadata metadata, AnnotationAttributes attributes)</span> &#123;</span><br><span class="line">    <span class="comment">//导入候选自动配置列表</span></span><br><span class="line">   List&lt;String&gt; configurations = ImportCandidates.load(AutoConfiguration.class, getBeanClassLoader())</span><br><span class="line">      .getCandidates();</span><br><span class="line">   Assert.notEmpty(configurations,</span><br><span class="line">         <span class="string">&quot;No auto configuration classes found in &quot;</span></span><br><span class="line">               + <span class="string">&quot;META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports. If you &quot;</span></span><br><span class="line">               + <span class="string">&quot;are using a custom packaging, make sure that file is correct.&quot;</span>);</span><br><span class="line">   <span class="keyword">return</span> configurations;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在进入ImportCandidates.load方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ImportCandidates <span class="title function_">load</span><span class="params">(Class&lt;?&gt; annotation, ClassLoader classLoader)</span> &#123;</span><br><span class="line">    Assert.notNull(annotation, <span class="string">&quot;&#x27;annotation&#x27; must not be null&quot;</span>);</span><br><span class="line">    <span class="type">ClassLoader</span> <span class="variable">classLoaderToUse</span> <span class="operator">=</span> decideClassloader(classLoader);</span><br><span class="line">    <span class="type">String</span> <span class="variable">location</span> <span class="operator">=</span> String.format(<span class="string">&quot;META-INF/spring/%s.imports&quot;</span>, annotation.getName());</span><br><span class="line">    Enumeration&lt;URL&gt; urls = findUrlsInClasspath(classLoaderToUse, location);</span><br><span class="line">    <span class="type">ArrayList</span> <span class="variable">importCandidates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(urls.hasMoreElements()) &#123;</span><br><span class="line">        <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> (URL)urls.nextElement();</span><br><span class="line">        importCandidates.addAll(readCandidateConfigurations(url));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ImportCandidates</span>(importCandidates);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最新加载逻辑是加载<code>META-INF/spring/%s.imports</code>配置文件中的自动配置，%s是占位符，指的是@AutoConfiguration注解的类的全路径名称。即：</p><p><img src="https://s2.loli.net/2023/12/11/1vYysLdUGrmwc3K.png" alt="image-20231205112136802"></p><p>到这里一些应用级别的自动配置类已经完全迁移到这个新配置文件中了，而老的自动配置文件(spring.factories)还保留了一些系统级的组件</p><h2 id="自动配置原理"><a href="#自动配置原理" class="headerlink" title="自动配置原理"></a>自动配置原理</h2><h3 id="1-AutoConfiguration注解"><a href="#1-AutoConfiguration注解" class="headerlink" title="1.@AutoConfiguration注解"></a>1.@AutoConfiguration注解</h3><p>自动配置注解@AutoConfiguration是SpringBoot2.7中新增的，该注解的源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="meta">@AutoConfigureBefore</span></span><br><span class="line"><span class="meta">@AutoConfigureAfter</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> AutoConfiguration &#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Explicitly specify the name of the Spring bean definition associated with the</span></span><br><span class="line"><span class="comment">    * &#123;<span class="doctag">@code</span> <span class="doctag">@AutoConfiguration</span>&#125; class. If left unspecified (the common case), a bean</span></span><br><span class="line"><span class="comment">    * name will be automatically generated.</span></span><br><span class="line"><span class="comment">    * &lt;p&gt;</span></span><br><span class="line"><span class="comment">    * The custom name applies only if the &#123;<span class="doctag">@code</span> <span class="doctag">@AutoConfiguration</span>&#125; class is picked up</span></span><br><span class="line"><span class="comment">    * through component scanning or supplied directly to an</span></span><br><span class="line"><span class="comment">    * &#123;<span class="doctag">@link</span> AnnotationConfigApplicationContext&#125;. If the &#123;<span class="doctag">@code</span> <span class="doctag">@AutoConfiguration</span>&#125; class</span></span><br><span class="line"><span class="comment">    * is registered as a traditional XML bean definition, the name/id of the bean element</span></span><br><span class="line"><span class="comment">    * will take precedence.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> the explicit component name, if any (or empty String otherwise)</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@see</span> AnnotationBeanNameGenerator</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@AliasFor(annotation = Configuration.class)</span></span><br><span class="line">   String <span class="title function_">value</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * The auto-configure classes that should have not yet been applied.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> the classes</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@AliasFor(annotation = AutoConfigureBefore.class, attribute = &quot;value&quot;)</span></span><br><span class="line">   Class&lt;?&gt;[] before() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * The names of the auto-configure classes that should have not yet been applied.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> the class names</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@AliasFor(annotation = AutoConfigureBefore.class, attribute = &quot;name&quot;)</span></span><br><span class="line">   String[] beforeName() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * The auto-configure classes that should have already been applied.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> the classes</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@AliasFor(annotation = AutoConfigureAfter.class, attribute = &quot;value&quot;)</span></span><br><span class="line">   Class&lt;?&gt;[] after() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * The names of the auto-configure classes that should have already been applied.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> the class names</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@AliasFor(annotation = AutoConfigureAfter.class, attribute = &quot;name&quot;)</span></span><br><span class="line">   String[] afterName() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自动配置注解@AutoConfiguration组合了这三个注解：</p><ul><li>@Configuration(proxyBeanMethods &#x3D; false)：配置注解类，并不代理@Bean方法</li><li>@AutoConfigureBefore：自动配置在XX配置之前</li><li>@AutoConfigureAfter：自动配置在XX配置之后</li></ul><p><strong>注</strong>：</p><ul><li>@AutoConfiguration这个注解是专门为自动配置定制的专用注解，其实就是用来代替之前的@Configuration、@AutoConfigurationAfter和@AutoConfigurationBefore三个注解，通过这个三个注解共同完成了@Configuration配置类，以及自动配置类需要在指定的自动配置类完成配置之前或者之后再自动配置</li><li>之前三个注解用起来实在繁琐，现在统一这一个注解，自动配置类有了它自己的注解，这样也可以用来区分@Configuration标识的普通配置类</li><li>比如DataSourceAutoConfiguration中</li></ul><p>@AutoConfiguration(before &#x3D; SqlInitializationAutoConfiguration.class)就表示这是一个需要在 SqlInitializationAutoConfiguration之前进行配置的自动配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AutoConfiguration(before = SqlInitializationAutoConfiguration.class)</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(&#123; DataSource.class, EmbeddedDatabaseType.class &#125;)</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(type = &quot;io.r2dbc.spi.ConnectionFactory&quot;)</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(DataSourceProperties.class)</span></span><br><span class="line"><span class="meta">@Import(&#123; DataSourcePoolMetadataProvidersConfiguration.class, DataSourceCheckpointRestoreConfiguration.class &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DataSourceAutoConfiguration</span> &#123;</span><br><span class="line">    ...............</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-ConditionalOn"><a href="#2-ConditionalOn" class="headerlink" title="2.@ConditionalOn*"></a>2.@ConditionalOn*</h3><p>在自动配置类中还有各种@ConditionalOn*的注解，这是一种条件注解，表示在满足指定条件是才会进行自动配置，这雅诗SpringBoot能实现自动配置的核心注解</p><p>比如上面源码中<code>@ConditionalOnClass(&#123; DataSource.class, EmbeddedDatabaseType.class &#125;)</code>，它表示如果类路径下有这两个类才会开启这个类的自动配置，否则不开启自动配置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(&#123; ElementType.TYPE, ElementType.METHOD &#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Conditional(OnClassCondition.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ConditionalOnClass &#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * The classes that must be present. Since this annotation is parsed by loading class</span></span><br><span class="line"><span class="comment">    * bytecode, it is safe to specify classes here that may ultimately not be on the</span></span><br><span class="line"><span class="comment">    * classpath, only if this annotation is directly on the affected component and</span></span><br><span class="line"><span class="comment">    * &lt;b&gt;not&lt;/b&gt; if this annotation is used as a composed, meta-annotation. In order to</span></span><br><span class="line"><span class="comment">    * use this annotation as a meta-annotation, only use the &#123;<span class="doctag">@link</span> #name&#125; attribute.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> the classes that must be present</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   Class&lt;?&gt;[] value() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * The classes names that must be present.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> the class names that must be present.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   String[] name() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>它组合了一个最基础的<code>@Conditional(OnClassCondition.class)</code>条件注解，并指定了这个@ConditionalOnClass条件注解的条件类为OnClassCondition类，对应的条件类要实现Condition接口</li></ul><p>其他条件注解如下：</p><table><thead><tr><th>注解</th><th>描述</th><th>条件类</th></tr></thead><tbody><tr><td>@Conditional</td><td>基础条件类</td><td>自由指定</td></tr><tr><td>@ConditionalOnClass</td><td>类路径下有指定的类才开启配置</td><td>OnClassCondition</td></tr><tr><td>@ConditionalOnMissionClass</td><td>类路径下没有指定的类才开启配置</td><td>OnClassCondition</td></tr><tr><td>…….</td><td></td><td></td></tr></tbody></table><p>更多的条件注解可以查看SpringBoot自动配置包下的condition目录</p><p><img src="https://s2.loli.net/2023/12/11/kedFXs1oHKSuz2j.png" alt="image-20231205115537149"></p><p><strong>总结：知道了以上的注解，再回过去看上面的数据源的自动配置源码，无非就是根据各种条件开启自动配置而已，比如数据源需要自动配置，类路径下必须得有数据源相关的类才能进行配置，而这些相关的类都是通过Starter引入的。</strong></p><h2 id="自动配置报告"><a href="#自动配置报告" class="headerlink" title="自动配置报告"></a>自动配置报告</h2><p>Springboot提供了查看自动配置报告的方法，包括激活和未激活的自动配置，如果不确定自动配置类是否被加载了，则可以通过查看自动配置报告的方式来定位问题；</p><p>自动配置报告可以在应用的debug模式下查看：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar xx.jar -debug</span><br></pre></td></tr></table></figure><p>如果在IDE中启动项目，则可以直接在应用配置文件中指定：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">debug:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>启动后控制台即可看到自动配置的详细报告：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">============================</span><br><span class="line">CONDITIONS EVALUATION REPORT</span><br><span class="line">============================</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Positive matches:</span><br><span class="line">-----------------</span><br><span class="line"></span><br><span class="line">   AopAutoConfiguration matched:</span><br><span class="line">      - <span class="meta">@ConditionalOnProperty</span> (spring.aop.auto=<span class="literal">true</span>) matched (OnPropertyCondition)</span><br><span class="line"></span><br><span class="line">   AopAutoConfiguration.ClassProxyingConfiguration matched:</span><br><span class="line">      - <span class="meta">@ConditionalOnMissingClass</span> did not find unwanted class <span class="string">&#x27;org.aspectj.weaver.Advice&#x27;</span> (OnClassCondition)</span><br><span class="line">      - <span class="meta">@ConditionalOnProperty</span> (spring.aop.proxy-target-class=<span class="literal">true</span>) matched (OnPropertyCondition)</span><br><span class="line"></span><br><span class="line">          .........</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Negative matches:</span><br><span class="line">-----------------</span><br><span class="line"></span><br><span class="line">   ActiveMQAutoConfiguration:</span><br><span class="line">      Did not match:</span><br><span class="line">         - <span class="meta">@ConditionalOnClass</span> did not find required class <span class="string">&#x27;jakarta.jms.ConnectionFactory&#x27;</span> (OnClassCondition)</span><br><span class="line"></span><br><span class="line">   AopAutoConfiguration.AspectJAutoProxyingConfiguration:</span><br><span class="line">      Did not match:</span><br><span class="line">         - <span class="meta">@ConditionalOnClass</span> did not find required class <span class="string">&#x27;org.aspectj.weaver.Advice&#x27;</span> (OnClassCondition)</span><br><span class="line"></span><br><span class="line">             .......</span><br><span class="line"></span><br><span class="line">Exclusions:</span><br><span class="line">-----------</span><br><span class="line"></span><br><span class="line">    None</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Unconditional classes:</span><br><span class="line">----------------------</span><br><span class="line"></span><br><span class="line">        org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration</span><br><span class="line"></span><br><span class="line">    org.springframework.boot.autoconfigure.ssl.SslAutoConfiguration</span><br><span class="line"></span><br><span class="line">    .............</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>报告中几个项目的说明：</p><ul><li>Positive matches:已经启动的自动配置</li><li>Negative matches：未启动的自动配置</li><li>Exclusions：被排除的自动配置</li><li>Unconditional classes：没有条件的配置类</li></ul><p><strong>注：暂时了解，后面用！</strong></p><h2 id="排除自动配置"><a href="#排除自动配置" class="headerlink" title="排除自动配置"></a>排除自动配置</h2><p>情景：数据源的采用时候，我们不想使用SpringBoot默认提供的DataSourceAutoConfiguration自动配置，完全按想自己创建自定义配置，这时就需要先排除&#x2F;禁用默认的数据源自动配置类</p><h3 id="1-使用-SrpingBootApplication注解"><a href="#1-使用-SrpingBootApplication注解" class="headerlink" title="1.使用@SrpingBootApplication注解"></a>1.使用@SrpingBootApplication注解</h3><p>使用@SrpingBootApplication注解的时候，可以使用exclude属性排除指定的类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication(exclude = &#123;DataSourceAutoConfiguration.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以使用excludeName排除指定的类名全路径</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication(excludeName = &#123;&quot;org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-使用-EnableAutoConfiguration注解"><a href="#2-使用-EnableAutoConfiguration注解" class="headerlink" title="2.使用@EnableAutoConfiguration注解"></a>2.使用@EnableAutoConfiguration注解</h3><p>单独使用@EnableAutoConfiguration注解的时候，用法和@SrpingBootApplication一样的，因为前者就是组合使用了后者的功能。</p><h3 id="3-使用统一的排除方案"><a href="#3-使用统一的排除方案" class="headerlink" title="3. 使用统一的排除方案"></a>3. 使用统一的排除方案</h3><p>在应用配置文件中指定参数spring.autoconfigure.exclude统一排除：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">autoconfigure:</span></span><br><span class="line">    <span class="attr">exclude:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration</span></span><br></pre></td></tr></table></figure><h2 id="替换自动配置"><a href="#替换自动配置" class="headerlink" title="替换自动配置"></a>替换自动配置</h2><p>自动配置是非入侵式的，我们完全可以自定义配置来替换SpringBoot默认自动配置中的部分组件配置</p><p>首先我们看一下DataSourceConfiguration.Hikari源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="meta">@ConditionalOnCheckpointRestore</span></span><br><span class="line"><span class="meta">@ConditionalOnBean(DataSource.class)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DataSourceCheckpointRestoreConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line">   <span class="meta">@ConditionalOnClass(HikariDataSource.class)</span></span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Hikari</span> &#123;</span><br><span class="line"></span><br><span class="line">      <span class="meta">@Bean</span></span><br><span class="line">      <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">      HikariCheckpointRestoreLifecycle <span class="title function_">hikariCheckpointRestoreLifecycle</span><span class="params">(DataSource dataSource)</span> &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">HikariCheckpointRestoreLifecycle</span>(dataSource);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>每个配置类、方法上都有一个@ConditionalOnMissingBean注解，SpringBoot应用自己创建的@Bean会优先注册，如果应用有自己的@Bean，则默认自动配置类中的@Bean就不会重复注册</li><li>所以，如果SpringBoot提供的默认配置不满足需求，那么完全可以在应用中提供自定义的配置来替换默认的配置。比如：如果使用了Hikari连接池，应用注册了一个自定义的DataSource，那么连接中的HikariDataSource就不会重复注册，这就是@ConditionalOnMissingBean注解的意义。</li></ul><h2 id="邮件Starter"><a href="#邮件Starter" class="headerlink" title="邮件Starter"></a>邮件Starter</h2><h3 id="1-概述-1"><a href="#1-概述-1" class="headerlink" title="1.概述"></a>1.概述</h3><p>前面知道Starter的基本概念，命名规范，分类，以及自动配置原理，也知道SpringBoot内置了各种各样的Starter。现在了解spring-boot-start-mail邮件启动器的集成和应用。</p><p>首先，spring框架提供了一个发送邮件的抽象和实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.mail.javamail.JavaMailSender</span><br><span class="line">org.springframework.mail.javamail.JavaMailSenderImpl</span><br></pre></td></tr></table></figure><p>在没有SpringBoot之前，开发者需要手动构建JavaMailSenderImpl实现类，而有了SpringBoot就没必要手工构建了，SpringBoot提供了一个邮件自动配置类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.boot.autoconfigure.mail.MailSenderAutoConfiguration</span><br></pre></td></tr></table></figure><p>它同样被注册在新的org.springframework.boot.autoconfigure.autoConfiguration.imports自动配置文件中，源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AutoConfiguration</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(&#123; MimeMessage.class, MimeType.class, MailSender.class &#125;)</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(MailSender.class)</span></span><br><span class="line"><span class="meta">@Conditional(MailSenderCondition.class)</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(MailProperties.class)</span></span><br><span class="line"><span class="meta">@Import(&#123; MailSenderJndiConfiguration.class, MailSenderPropertiesConfiguration.class &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MailSenderAutoConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Condition to trigger the creation of a &#123;<span class="doctag">@link</span> MailSender&#125;. This kicks in if either</span></span><br><span class="line"><span class="comment">    * the host or jndi name property is set.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MailSenderCondition</span> <span class="keyword">extends</span> <span class="title class_">AnyNestedCondition</span> &#123;</span><br><span class="line"></span><br><span class="line">      MailSenderCondition() &#123;</span><br><span class="line">         <span class="built_in">super</span>(ConfigurationPhase.PARSE_CONFIGURATION);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="meta">@ConditionalOnProperty(prefix = &quot;spring.mail&quot;, name = &quot;host&quot;)</span></span><br><span class="line">      <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">HostProperty</span> &#123;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="meta">@ConditionalOnProperty(prefix = &quot;spring.mail&quot;, name = &quot;jndi-name&quot;)</span></span><br><span class="line">      <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">JndiNameProperty</span> &#123;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自动配置类上使用了各种<code>@Conditional* </code>注解，在保证默认自动配置机制的情况下，也会在有自定义配置的情况下忽略默认配置。邮件自动配置类使用@Import注解引入了JNDI和Properties两种配置注册方式，在引入的其中一个MailSenderPropertiesConfiguration配置类中可以看到自动构建的JavaMailSenderImpl实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(prefix = &quot;spring.mail&quot;, name = &quot;host&quot;)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MailSenderPropertiesConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="meta">@ConditionalOnMissingBean(JavaMailSender.class)</span></span><br><span class="line">   JavaMailSenderImpl <span class="title function_">mailSender</span><span class="params">(MailProperties properties)</span> &#123;</span><br><span class="line">      <span class="type">JavaMailSenderImpl</span> <span class="variable">sender</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JavaMailSenderImpl</span>();</span><br><span class="line">      applyProperties(properties, sender);</span><br><span class="line">      <span class="keyword">return</span> sender;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">applyProperties</span><span class="params">(MailProperties properties, JavaMailSenderImpl sender)</span> &#123;</span><br><span class="line">...</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对应的参数绑定类为MailProperties，需要spring.mail.host配置参数及spring-boot-starter-mail依赖，略微配置spring.mail.*自定义参数就能自动注册这个Bean，然后就可以在应用中直接注入JavaMailSender并使用了，没有必要重复造轮子。</p><h3 id="2-实战发邮件"><a href="#2-实战发邮件" class="headerlink" title="2.实战发邮件"></a>2.实战发邮件</h3><p>1.导入邮件启动器依赖：</p><p>还可以导入一个web的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-mail<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.application.yaml中加入邮件自动配置参数：<br><img src="https://s2.loli.net/2023/12/11/LEJcjaz8eb97G6q.png" alt="image-20231205172457963"></p><h3 id="3-代码演示："><a href="#3-代码演示：" class="headerlink" title="3.代码演示："></a>3.代码演示：</h3><p>我用的QQ的smtp,如何开启自己去百度，学习完了记得关闭，别一直暴露在外面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmailController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> JavaMailSender javaMailSender;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> MailProperties mailProperties;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/sendEmail&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">sendEmail</span><span class="params">(<span class="meta">@RequestParam(&quot;email&quot;)</span> String email,</span></span><br><span class="line"><span class="params">                             <span class="meta">@RequestParam(&quot;text&quot;)</span> String text)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">MimeMessage</span> <span class="variable">msg</span> <span class="operator">=</span> createMimeMsg(email, text, <span class="string">&quot;author.gif&quot;</span>);</span><br><span class="line">            javaMailSender.send(msg);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MessagingException | UnsupportedEncodingException e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;邮件发送失败:&quot;</span>,e);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建复杂邮件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> email 收件人邮箱</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> text  发件内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> attachmentClasspath 附件地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回这个组装好的信件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> MessagingException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> UnsupportedEncodingException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> MimeMessage <span class="title function_">createMimeMsg</span><span class="params">(String email,String text,String attachmentClasspath)</span> <span class="keyword">throws</span> MessagingException, UnsupportedEncodingException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">MimeMessage</span> <span class="variable">msg</span> <span class="operator">=</span> javaMailSender.createMimeMessage();</span><br><span class="line">        <span class="type">MimeMessageHelper</span> <span class="variable">mimeMessageHelper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MimeMessageHelper</span>(msg, <span class="literal">true</span>);</span><br><span class="line">        mimeMessageHelper.setFrom(mailProperties.getFrom(),mailProperties.getPersonal());</span><br><span class="line">        mimeMessageHelper.setTo(email);</span><br><span class="line">        mimeMessageHelper.setBcc(mailProperties.getBcc());</span><br><span class="line">        mimeMessageHelper.setSubject(mailProperties.getSubject());</span><br><span class="line">        mimeMessageHelper.setText(text);</span><br><span class="line">        mimeMessageHelper.addAttachment(<span class="string">&quot;附件&quot;</span>,<span class="keyword">new</span> <span class="title class_">ClassPathResource</span>(attachmentClasspath));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 一个简单的信件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> email 收件人邮箱</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> text 内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> SimpleMailMessage <span class="title function_">createSimpleMsg</span><span class="params">(String email,String text)</span>&#123;</span><br><span class="line">        <span class="type">SimpleMailMessage</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleMailMessage</span>();</span><br><span class="line">        msg.setFrom(mailProperties.getFrom());</span><br><span class="line">        msg.setTo(email);</span><br><span class="line">        msg.setBcc(mailProperties.getBcc());</span><br><span class="line">        msg.setSubject(mailProperties.getSubject());</span><br><span class="line">        msg.setText(text);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;mail&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MailProperties</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发件人</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String from;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发件人昵称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String personal;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 抄送人</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String bcc;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主题</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String subject;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootApplication</span><br><span class="line">@ConfigurationPropertiesScan(&quot;com.ldd&quot;)//自己写自己需要扫描的配置</span><br><span class="line">public class SpringBootMailApplication &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(SpringBootMailApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动Springboot测试：</p><p>localhost:9090&#x2F;sendEmail?email&#x3D;<a href="mailto:&#x78;&#120;&#x78;&#64;&#x78;&#x78;&#x2e;&#x63;&#111;&#x6d;">&#x78;&#120;&#x78;&#64;&#x78;&#x78;&#x2e;&#x63;&#111;&#x6d;</a>&amp;text&#x3D;hello</p><p>测试结果：</p><p>成功页面打印true，失败返回false</p><p><img src="https://s2.loli.net/2023/12/11/vs7S8Kh6P5qTO1t.png" alt="image-20231205172929041"></p><h2 id="自定义Starter"><a href="#自定义Starter" class="headerlink" title="自定义Starter"></a>自定义Starter</h2><p>首先我们创建一个Starter工程，我们知道一般的第三方应用应该以*-spring-boot-starter的形式命名</p><p>接着我们创建一个简单的自动配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AutoConfiguration</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(prefix = &quot;ldd.starter&quot;,name = &quot;enabled&quot;,havingValue = &quot;true&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestServiceAutoConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> TestService <span class="title function_">testService</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TestService</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个自动配置类十分简单，就是判断Spring环境中是否有ldd.starter.enable&#x3D;true这个参数的值，如果有就配置一个TestService的Bean</p><p>TestService类的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getServiceName</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;测试自定义Starter&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个类中只有一个方法getServiceName，返回一个字符串：测试自定义Starter</p><p>接下来注册我我们的自动配置类(Spring.factories)【新规范】</p><p><strong>注：Spring2.7开始约定了自动配置类注册文件新规范</strong></p><p><strong>如果使用的时2.7+的版本请根据新的自动配置注册配置类，因为旧的已经废除</strong></p><p>现在ldd-spring-boot-starter工程中创建新规范自动配置文件：、</p><p>org.springframework.boot.autoconfigure.AutoConfiguration.imports</p><p>文件内容：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">com.ldd.spring.boot.starter.config.TestServiceAutoConfiguration</span><br></pre></td></tr></table></figure><p>包的格式：</p><p><img src="https://s2.loli.net/2023/12/11/h7BrNPm15qKFtWb.png" alt="image-20231205212620559"></p><p>最后我们去尝试使用这个Starter</p><p>一般是把这个jar包放入Maven中央仓库调用，我们测试的话就打成一个本地JAR包然后新建一个模块测试</p><p>新模块名字：<code>ldd-spring-boot-starter-smaple</code> ,接着把我们打好的jar包放在Resource目录的lib下</p><p><img src="https://s2.loli.net/2023/12/11/cjyfwXu2hnWSKml.png" alt="image-20231205215045256"></p><p>接下来：</p><p>pom.xml中导入自己的jar包依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.ldd<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ldd-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>最后我们去主启动类里面进行测试即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LddSpringBootStarterSampleApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(LddSpringBootStarterSampleApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> CommandLineRunner <span class="title function_">commandLineRunner</span><span class="params">(TestService testService)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (args)-&gt;&#123;</span><br><span class="line">            log.info(testService.getServiceName());</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后看到控制台日志打印：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2023-12-05T21:48:28.047+08:00  INFO 19132 --- [           main] .l.LddSpringBootStarterSampleApplication : Started LddSpringBootStarterSampleApplication <span class="keyword">in</span> 0.815 seconds (process running <span class="keyword">for</span> 1.14)</span><br><span class="line">2023-12-05T21:48:28.048+08:00  INFO 19132 --- [           main] .l.LddSpringBootStarterSampleApplication : 测试自定义Starter</span><br></pre></td></tr></table></figure><p>则表示我们自定义的Starter已经成功导入项目了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;SpringBootStarter和自动配置&quot;&gt;&lt;a href=&quot;#SpringBootStarter和自动配置&quot; class=&quot;headerlink&quot; title=&quot;SpringBootStarter和自动配置&quot;&gt;&lt;/a&gt;SpringBootStarter和自动</summary>
      
    
    
    
    <category term="SpringBoot3" scheme="https://humbledong.github.io/categories/SpringBoot3/"/>
    
    
    <category term="SpringBoot3" scheme="https://humbledong.github.io/tags/SpringBoot3/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot配置管理</title>
    <link href="https://humbledong.github.io/undefined/f4ec17f5.html"/>
    <id>https://humbledong.github.io/undefined/f4ec17f5.html</id>
    <published>2023-10-13T06:14:20.000Z</published>
    <updated>2024-01-08T07:04:41.797Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot3"><a href="#SpringBoot3" class="headerlink" title="SpringBoot3"></a>SpringBoot3</h1><h2 id="1-配置管理"><a href="#1-配置管理" class="headerlink" title="1.配置管理"></a>1.配置管理</h2><h3 id="1-1自定义配置"><a href="#1-1自定义配置" class="headerlink" title="1.1自定义配置"></a>1.1自定义配置</h3><h4 id="Configuration"><a href="#Configuration" class="headerlink" title="@Configuration"></a>@Configuration</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Indexed</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootConfiguration &#123;</span><br><span class="line">    <span class="meta">@AliasFor(</span></span><br><span class="line"><span class="meta">        annotation = Configuration.class</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">proxyBeanMethods</span><span class="params">()</span> <span class="keyword">default</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用<code>@Configuration</code>可以自定义配置类</p><h4 id="Import"><a href="#Import" class="headerlink" title="@Import"></a>@Import</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Import &#123;</span><br><span class="line">    <span class="comment">//可以导入@Configuration，ImportSelector，ImportBeanDefinitionRegistrar或者任何一个Component组件</span></span><br><span class="line">    Class&lt;?&gt;[] value();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用来处理配置类在其他子包或者在依赖jar包中，进行配置导入</p><h4 id="ImportResource"><a href="#ImportResource" class="headerlink" title="@ImportResource"></a>@ImportResource</h4><p>如果需要导入XML配置可以使用<code>@ImportResource</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ImportResource &#123;</span><br><span class="line">    <span class="meta">@AliasFor(&quot;locations&quot;)</span></span><br><span class="line">    String[] value() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AliasFor(&quot;value&quot;)</span></span><br><span class="line">    String[] locations() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    Class&lt;? <span class="keyword">extends</span> <span class="title class_">BeanDefinitionReader</span>&gt; reader() <span class="keyword">default</span> BeanDefinitionReader.class;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用方式就是直接指定要导入的XML配置文件路径即可</p><h3 id="1-2配置文件"><a href="#1-2配置文件" class="headerlink" title="1.2配置文件"></a>1.2配置文件</h3><h4 id="application"><a href="#application" class="headerlink" title="application"></a>application</h4><p>SpringBoot应用的配置参数主要在application中</p><p><code>StandardConfigDataLocationResolver</code>源码中定义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CONFIG_NAME_PROPERTY</span> <span class="operator">=</span> <span class="string">&quot;spring.config.name&quot;</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> String[] DEFAULT_CONFIG_NAMES = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;application&quot;</span>&#125;;</span><br></pre></td></tr></table></figure><p><strong>注：它可以有不同形式的配置方式，该配置文件不是必需的，可以有多个，也可以一个都没有</strong></p><h4 id="bootstrap"><a href="#bootstrap" class="headerlink" title="bootstrap"></a>bootstrap</h4><p>属于SpringCloud环境，需要引入SpringCloud依赖。</p><p>bootstrap配置文件会优先于application配置文件被加载</p><h4 id="配置文件类型"><a href="#配置文件类型" class="headerlink" title="配置文件类型"></a>配置文件类型</h4><p>.properties：key&#x3D;value格式</p><p>.yml：key：value树状格式(yaml)</p><p>注：.yml配置文件不支持通过<code>@PropertySource</code>注解来导入配置</p><h3 id="1-3-配置绑定"><a href="#1-3-配置绑定" class="headerlink" title="1.3  配置绑定"></a>1.3  配置绑定</h3><h4 id="1-3-1Spring中的配置绑定"><a href="#1-3-1Spring中的配置绑定" class="headerlink" title="1.3.1Spring中的配置绑定"></a>1.3.1Spring中的配置绑定</h4><p><code>@PropertySource</code>注解绑定配置</p><p>准备一个db.properties</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">username=root</span><br><span class="line">password=<span class="number">123456</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@PropertySource(value = &quot;classpath:db.properties&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DbProperties</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;username&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;password&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//有/无参构造，get/set,toString</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DbProperties dbProperties;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(dbProperties);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DbProperties&#123;username=&#x27;Administrator&#x27;, password=&#x27;123456&#x27;&#125;</span><br></pre></td></tr></table></figure><p><strong>注：因为@PropertySource注解并不支持主流的.yaml配置文件绑定，本身也要结合@Value注解使用，不推荐这种方式</strong></p><p><strong>但是可以用<code>@ConfigurationProperties</code>来实现，具体可以参照<a href="https://gh.qisui.xyz/undefined/e20c50ed.html#4-4%E6%B3%A8%E5%85%A5%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6">.yaml注入配置</a>，它同时支持这两种文件格式。</strong></p><h4 id="1-3-2参数绑定"><a href="#1-3-2参数绑定" class="headerlink" title="1.3.2参数绑定"></a>1.3.2参数绑定</h4><p>通过javabean提供的setter方法进行配置参数与Java Bean字段的绑定，首先在application.yaml配置文件中加入person.*配置参数</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">person:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ldd</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">18</span></span><br><span class="line">  <span class="attr">happy:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">birth:</span> <span class="number">2023</span><span class="string">/4/13</span></span><br><span class="line">  <span class="attr">maps:</span> &#123;<span class="attr">k1:</span> <span class="string">v1</span>, <span class="attr">k2:</span> <span class="string">v2</span>, <span class="attr">k3:</span> <span class="string">v3</span>&#125;</span><br><span class="line">  <span class="attr">lists:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">sing</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">play</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">music</span></span><br><span class="line">  <span class="attr">db-properties:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br></pre></td></tr></table></figure><p>在person实体类中进行参数绑定</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;person&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Boolean happy;</span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,Object&gt; maps;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Object&gt; lists;</span><br><span class="line">    <span class="keyword">private</span> DbProperties dbProperties;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//有/无参构造，get/set,toString</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> Person person;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">testPerson</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(person);</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Person&#123;</span><br><span class="line">name=&#x27;ldd&#x27;, </span><br><span class="line">age=18, </span><br><span class="line">happy=true,</span><br><span class="line">birth=Thu Apr 13 00:00:00 CST 2023,</span><br><span class="line">maps=&#123;k1=v1, k2=v2, k3=v3&#125;, </span><br><span class="line">lists=[sing, play, music], </span><br><span class="line">dbProperties=DbProperties&#123;username=&#x27;root1&#x27;, password=&#x27;123456&#x27;&#125;&#125;</span><br></pre></td></tr></table></figure><p>通过<code>@ConfigurationProperties(prefix = &quot;xxx&quot;)</code>注解绑定配置参数需要用到类的setter方法，该注解可以将配置参数映射到Java Bean上，该注解中的prefix或者value参数用于指定要映射的参数前缀，前缀格式为英文小写，多个前缀以”-“分割如上面db-properties</p><p>总结(@ConfigurationProperties)：</p><ul><li>支持按配置参数前缀绑定参数，前缀一样的参数的配置参数将被绑定到同一个类上</li><li>支持配置参数使用默认值，如果happy&#x3D;true,不设置，那么就会输出默认值false</li><li>支持松绑定，也就是连接符位置可以是“-”，也可是“_”</li><li>支持Java集合绑定，例如Map，List</li><li>支持嵌套类，例如dbProperties嵌套了一个类</li><li>支持主要的配置途径，比如：.yaml文件、.properties文件….</li><li>可以搭配<code>@EnableConfigurationProperties</code>来使用</li></ul><h4 id="1-3-3构造器绑定"><a href="#1-3-3构造器绑定" class="headerlink" title="1.3.3构造器绑定"></a>1.3.3构造器绑定</h4><p>需@EnableConfigurationProperties在注解中添加对应的class对象</p><p>如果使用构造器绑定时不想使用ConstructorBinding构造器绑定方法，可以使用@Autowired注解代替跟上面一样</p><p>弊端：Date这种数据类型无法解决</p><h4 id="1-3-4Bean配置绑定"><a href="#1-3-4Bean配置绑定" class="headerlink" title="1.3.4Bean配置绑定"></a>1.3.4Bean配置绑定</h4><p>好处：不需@EnableConfigurationProperties在注解中添加，直接返回一个bean给CommandLineRunner使用即可</p><p>弊端：Date这种数据类型无法解决</p><h4 id="1-3-5参数类扫描"><a href="#1-3-5参数类扫描" class="headerlink" title="1.3.5参数类扫描"></a>1.3.5参数类扫描</h4><p>如果忘掉在@EnableConfigurationProperties进行注解指定，那么你配置的参数类就不会生效，于是直接提出了一个可以扫描包的方式</p><p>在启动类上使用<code>@EnableConfigurationPropertiesScan</code>，既可以扫描这个包目录下的所有配置参数类</p><h4 id="1-3-6配置验证"><a href="#1-3-6配置验证" class="headerlink" title="1.3.6配置验证"></a>1.3.6配置验证</h4><p>使用了<code>@EnableConfigurationProperties</code>还可以进行参数验证</p><p>SpringBoot中可以用JSR-303中@validation来校验数据</p><p>1.导入JSR-303的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-validation<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.需求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="comment">//我们现在希望name是一个邮箱</span></span><br><span class="line">    <span class="meta">@Email(message = &quot;大哥，请你输入一个正确的邮箱！&quot;)</span><span class="comment">//需要导入import org.springframework.validation.annotation.Validated;包</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br></pre></td></tr></table></figure><p>3.结果：</p><p>直接报错且打印消息</p><p>Binding to target org.springframework.boot.context.properties.bind.BindException: Failed to bind properties under ‘person’ to com.ldd.pojo.Person failed:</p><p>报错如下：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Property: person.name</span><br><span class="line">Value: &quot;ldd&quot;</span><br><span class="line">Origin: class path resource [application.yaml] - 2:9</span><br><span class="line">Reason: 大哥，请你输入一个正确的邮箱！</span><br></pre></td></tr></table></figure><p>4.常见的一些参数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@NotNull(message=&quot;名字不能为空&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String userName;</span><br><span class="line"><span class="meta">@Max(value=120,message=&quot;年龄最大不能查过120&quot;)</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"><span class="meta">@Email(message=&quot;邮箱格式错误&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">空检查</span><br><span class="line"><span class="meta">@Null</span>       验证对象是否为<span class="literal">null</span></span><br><span class="line"><span class="meta">@NotNull</span>    验证对象是否不为<span class="literal">null</span>, 无法查检长度为<span class="number">0</span>的字符串</span><br><span class="line"><span class="meta">@NotBlank</span>   检查约束字符串是不是Null还有被Trim的长度是否大于<span class="number">0</span>,只对字符串,且会去掉前后空格.</span><br><span class="line"><span class="meta">@NotEmpty</span>   检查约束元素是否为NULL或者是EMPTY.</span><br><span class="line">    </span><br><span class="line">Booelan检查</span><br><span class="line"><span class="meta">@AssertTrue</span>     验证 Boolean 对象是否为 <span class="literal">true</span>  </span><br><span class="line"><span class="meta">@AssertFalse</span>    验证 Boolean 对象是否为 <span class="literal">false</span>  </span><br><span class="line">    </span><br><span class="line">长度检查</span><br><span class="line"><span class="meta">@Size(min=, max=)</span> 验证对象（Array,Collection,Map,String）长度是否在给定的范围之内  </span><br><span class="line"><span class="meta">@Length(min=, max=)</span> string is between min and max included.</span><br><span class="line"></span><br><span class="line">日期检查</span><br><span class="line"><span class="meta">@Past</span>       验证 Date 和 Calendar 对象是否在当前时间之前  </span><br><span class="line"><span class="meta">@Future</span>     验证 Date 和 Calendar 对象是否在当前时间之后  </span><br><span class="line"><span class="meta">@Pattern</span>    验证 String 对象是否符合正则表达式的规则</span><br><span class="line"></span><br><span class="line">.......等等</span><br><span class="line">除此以外，我们还可以自定义一些数据校验规则</span><br></pre></td></tr></table></figure><h3 id="1-4外部化配置"><a href="#1-4外部化配置" class="headerlink" title="1.4外部化配置"></a>1.4外部化配置</h3><h4 id="1-4-1配置源"><a href="#1-4-1配置源" class="headerlink" title="1.4.1配置源"></a>1.4.1配置源</h4><p>即SpringBoot可以将配置外部化，不仅可以把配置放在应用配置文件中，还可以使用各种外部配置源</p><p>例如：</p><ul><li>properties文件</li><li>yaml文件</li><li>环境变量</li><li>命令行参数</li></ul><h4 id="1-4-2配置优先级"><a href="#1-4-2配置优先级" class="headerlink" title="1.4.2配置优先级"></a>1.4.2配置优先级</h4><p>如果多个配置源的参数值相同，则优先级高的参数值最够会覆盖优先级低的参数值</p><ul><li>配值源优先级(从低到高)：<ol><li>默认参数（SpringApplication.setDefaultProperties）</li><li>使用@PropertySource注解绑定的参数</li><li>应用配置文件中的参数（application）</li><li>配置了random.*随机数的参数</li><li>系统环境变量</li><li>Java System Properties</li><li>java:comp&#x2F;env的JNDI参数</li><li>ServletContext初始化参数</li><li>ServletConfig初始化参数</li><li>来自SPRING_APPLICATION_JSON参数</li><li>命令行参数</li><li>单元测试上的参数</li><li>使用@TestPropertySource注解绑定的配置</li><li>Devtools全局设置参数(来自$HOME&#x2F;.config&#x2F;spring-boot)</li></ol></li><li>多个应用配置文件(application)的优先级(从低到高)<ol><li>应用配置文件(jar包内)</li><li>指定了profile的配置文件，如application-dev.properties（jar包内）</li><li>应用配置文件(jar包外)</li><li>指定了profile的配置文件，如application-dev.properties（jar包外）</li></ol></li></ul><p><strong>注：建议整个应用只用一种格式，如果同一个位置有.properties还有.yaml，Springboot会优先采用.properties</strong></p><h4 id="1-4-3命令行参数"><a href="#1-4-3命令行参数" class="headerlink" title="1.4.3命令行参数"></a>1.4.3命令行参数</h4><p>命令行参数指java-jar –key&#x3D;value命令启动应用时指定的参数，即以“–”开头的参数</p><p>例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar demo.jar --server.prot=9090</span><br></pre></td></tr></table></figure><p>根据优先级，命令行参数的优先级始终是高于配置文件的，这种时候，端口就变为了9090而不是配置文件中的8080或者其他端口</p><p>注：默认情况，SpringBoot会将所有命令行参数转换并添加到Spring环境中，如果不想添加到Spring环境中，可以在主启动类中将其禁用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    SpringApplication.setAddCommandLineProperties(<span class="literal">false</span>);</span><br><span class="line">    SpringApplication.run(SpringBootQuickStartApplication.class, args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-5导入配置"><a href="#1-5导入配置" class="headerlink" title="1.5导入配置"></a>1.5导入配置</h3><p>可以使用<code>spring.config.import</code>参数来指定要导入的配置文件路径</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">config:</span></span><br><span class="line">    <span class="attr">import:</span></span><br><span class="line">      <span class="string">-optional:classpath:/config/app.yml</span></span><br></pre></td></tr></table></figure><p>这里就指定了要导入一个app.yml配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">person:</span></span><br><span class="line">  <span class="attr">happy:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>去测试：</p><p>开始我们的happy现在就是false了</p><p><img src="https://s2.loli.net/2023/12/11/ZGidoXpj3T7clKH.png" alt="image-20231204175925395"></p><h3 id="1-6随机值配置"><a href="#1-6随机值配置" class="headerlink" title="1.6随机值配置"></a>1.6随机值配置</h3><p>SpringBoot提供了RandomValuePropertySource类可以用于注入随机值，它可以生成整数(int)、长整数(long)、UUID及字符串</p><p>修改一下.yaml配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">person:</span></span><br><span class="line">  <span class="comment">#$&#123;random.value&#125;和$&#123;random.uuid&#125;生成的是32位MD5字符串</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ldd</span> <span class="string">随机uuid:$&#123;random.uuid&#125;,随机value:$&#123;random.value&#125;,随机int:$&#123;random.int(1,10)&#125;</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">18</span></span><br><span class="line">  <span class="attr">happy:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">birth:</span> <span class="number">2023</span><span class="string">/4/13</span></span><br><span class="line">  <span class="attr">maps:</span> &#123;<span class="attr">k1:</span> <span class="string">v1</span>, <span class="attr">k2:</span> <span class="string">v2</span>, <span class="attr">k3:</span> <span class="string">v3</span>&#125;</span><br><span class="line">  <span class="attr">lists:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">sing</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">play</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">music</span></span><br><span class="line">  <span class="attr">db-properties:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">config:</span></span><br><span class="line">    <span class="attr">import:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">optional:classpath:/config/app.yml</span></span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Person&#123;name=&#x27;ldd </span><br><span class="line">随机uuid:bc3997f2-0227-46fb-b0de-92ca5b32e30a,</span><br><span class="line">随机value:567c0721b75977ff8fc499348fff1706,</span><br><span class="line">随机int:5,......</span><br></pre></td></tr></table></figure><p><strong>注：底层就是使用了Java自带的java.util.Random和java.util.UUID工具类</strong></p><h3 id="1-7多文档配置"><a href="#1-7多文档配置" class="headerlink" title="1.7多文档配置"></a>1.7多文档配置</h3><h4 id="1-7-1配置格式"><a href="#1-7-1配置格式" class="headerlink" title="1.7.1配置格式"></a>1.7.1配置格式</h4><ul><li>.yaml配置文件多文档之间用三个连接符(—)进行分隔开</li><li>.properties配置多个文件用#—分隔</li></ul><p>例如：</p><p>.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">&quot;dev&quot;</span></span><br><span class="line">      </span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">&quot;dev-cloud&quot;</span></span><br><span class="line">  <span class="attr">config:</span></span><br><span class="line">    <span class="attr">activate:</span></span><br><span class="line">      <span class="attr">on-cloud-platform:</span> <span class="string">&quot;kubernetes&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>.propreties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.application.name</span>=<span class="string">dev</span></span><br><span class="line"><span class="comment">#---</span></span><br><span class="line"><span class="attr">spring.application.name</span>=<span class="string">dev-cloud</span></span><br><span class="line"><span class="attr">spring.config.activate.on-clound-platform</span>=<span class="string">kubernetes</span></span><br></pre></td></tr></table></figure><p><strong><em>注</em>：</strong></p><ul><li><strong>使用多文档配置需要注意：</strong><ol><li><strong>多文档配置的分隔符前面不能有空格，并且分隔符要连续</strong></li><li><strong>多文档配置的分隔符前、后一行不能是注释</strong></li><li><strong>多文档配置不能被@PropertySource和TestPropertySource注解加载</strong></li></ol></li></ul><h4 id="1-7-2激活多文档配置"><a href="#1-7-2激活多文档配置" class="headerlink" title="1.7.2激活多文档配置"></a>1.7.2激活多文档配置</h4><table><thead><tr><th>激活参数</th><th>说明</th></tr></thead><tbody><tr><td>spring.config.activate.on-clound-platform</td><td>根据指定的云平台激活</td></tr><tr><td>spring.config.activate.on-profile</td><td>根据指定的Profile激活</td></tr></tbody></table><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">person:</span></span><br><span class="line">  <span class="comment">#$&#123;random.value&#125;和$&#123;random.uuid&#125;生成的是32位MD5字符串</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ldd</span> <span class="string">随机uuid:$&#123;random.uuid&#125;,随机value:$&#123;random.value&#125;,随机int:$&#123;random.int(1,10)&#125;</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">18</span></span><br><span class="line">  <span class="attr">happy:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">birth:</span> <span class="number">2023</span><span class="string">/4/13</span></span><br><span class="line">  <span class="attr">maps:</span> &#123;<span class="attr">k1:</span> <span class="string">v1</span>, <span class="attr">k2:</span> <span class="string">v2</span>, <span class="attr">k3:</span> <span class="string">v3</span>&#125;</span><br><span class="line">  <span class="attr">lists:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">sing</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">play</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">music</span></span><br><span class="line">  <span class="attr">db-properties:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">config:</span></span><br><span class="line">    <span class="attr">import:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">optional:classpath:/config/app.yml</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">&quot;dev&quot;</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">&quot;dev-cloud&quot;</span></span><br><span class="line">  <span class="attr">config:</span></span><br><span class="line">    <span class="attr">activate:</span></span><br><span class="line">      <span class="attr">on-cloud-platform:</span> <span class="string">&quot;kubernetes&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">config:</span></span><br><span class="line">    <span class="attr">activate:</span></span><br><span class="line">      <span class="attr">on-profile:</span> <span class="string">&quot;dev | test&quot;</span></span><br></pre></td></tr></table></figure><p>像这样，通过spring.profiles.active激活了dev环境</p><p>但是第三个配置文档只在dev和test环境中生效</p><h3 id="1-8Profile"><a href="#1-8Profile" class="headerlink" title="1.8Profile"></a>1.8Profile</h3><h4 id="1-8-1默认的Profile"><a href="#1-8-1默认的Profile" class="headerlink" title="1.8.1默认的Profile"></a>1.8.1默认的Profile</h4><p>如果不指定要激活的Profile，SpringBoot会使用默认的Profiledefault配置，启动日志即可看到</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">No active profile set, falling back to 1 default profile: &quot;default&quot;</span><br></pre></td></tr></table></figure><p>也可以调整默认的Profile</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">prpfiles:</span></span><br><span class="line">    <span class="attr">default:</span> <span class="string">dev</span></span><br></pre></td></tr></table></figure><h4 id="1-8-2激活Profile"><a href="#1-8-2激活Profile" class="headerlink" title="1.8.2激活Profile"></a>1.8.2激活Profile</h4><p>可以使用spring.profiles.active参数指定要激活的Profile</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"><span class="comment">#选择要激活那个环境块</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">prod</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8083</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">dev</span> <span class="comment">#配置环境的名称</span></span><br><span class="line">  </span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8084</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">prod</span>  <span class="comment">#配置环境的名称</span></span><br></pre></td></tr></table></figure><p>此时prod环境就被激活了</p><p>也可以在应用方法上进行激活</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringBootQuickStartApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">SpringApplication</span> <span class="variable">springApplication</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpringApplication</span>(SpringBootQuickStartApplication.class);</span><br><span class="line">        springApplication.setAdditionalProfiles(<span class="string">&quot;dev&quot;</span>);</span><br><span class="line">        springApplication.run(args);</span><br><span class="line"><span class="comment">//        SpringApplication.run(SpringBootQuickStartApplication.class, args);  </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Profile不仅可以激活配置文件，还可以激活Java配置类，比如可以用在@Componet、@Configuration或者@ConfigurationProperties注解的类上</p><h4 id="1-8-3切换Profile"><a href="#1-8-3切换Profile" class="headerlink" title="1.8.3切换Profile"></a>1.8.3切换Profile</h4><p>命令行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar demo.jar --spring.profiles.active=<span class="built_in">test</span></span><br></pre></td></tr></table></figure><p>IDE</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn spring-boot:run -Dapp.profiles=test</span><br></pre></td></tr></table></figure><p>当然如果不想被优先级更高的配置源替换，也可以使用<code>spring.profiles.include</code>附加模式</p><h4 id="1-8-4profile分组"><a href="#1-8-4profile分组" class="headerlink" title="1.8.4profile分组"></a>1.8.4profile分组</h4><p>spring.profiles.group</p><h4 id="1-8-5指定profile配置文件"><a href="#1-8-5指定profile配置文件" class="headerlink" title="1.8.5指定profile配置文件"></a>1.8.5指定profile配置文件</h4><p>比如多个配置文件：</p><ul><li>application.yaml</li><li>application-dev.yaml</li><li>application-test.yaml</li><li>application-prod.yaml</li><li>application-main.yaml</li></ul><p>优先级：</p><p><code>默认&gt;dev&gt;main</code></p><h4 id="1-8-6使用限制"><a href="#1-8-6使用限制" class="headerlink" title="1.8.6使用限制"></a>1.8.6使用限制</h4><table><thead><tr><th>参数</th><th>功能</th><th>说明</th></tr></thead><tbody><tr><td>spring.profiles.default</td><td>指定默认的Profile</td><td>当不指定Profile时，默认生效的Profile</td></tr><tr><td>spring.profiles.active</td><td>激活指定的Profile</td><td>可以被优先级高的配置源替换</td></tr><tr><td>spring.profiles.include</td><td>激活指定要包含的Profile</td><td>不会被其他配置源替换</td></tr><tr><td>spring.profiles.group</td><td>指定Profile分组</td><td>激活一个分组，就会激活组下所有Profile</td></tr></tbody></table><p><strong>注：以上几个参数不能用于多文档配置中和指定Profile配置文件</strong></p><h3 id="1-9加载机制"><a href="#1-9加载机制" class="headerlink" title="1.9加载机制"></a>1.9加载机制</h3><p>SpringBoot中的配置文件是通过PropertySourceLoader接口实现的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">PropertySourceLoader</span> &#123;</span><br><span class="line">    String[] getFileExtensions();</span><br><span class="line"></span><br><span class="line">    List&lt;PropertySource&lt;?&gt;&gt; load(String name, Resource resource) <span class="keyword">throws</span> IOException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>getFileExtensions()：获取文件后缀</li><li>load：加载配置</li></ul><p>该接口下有两个实现类</p><ul><li>YamlPropertySourceLoader</li><li>PropertiesPropertySourceLoader</li></ul><p><img src="https://s2.loli.net/2023/12/11/1lO6p5DkWa8o9jK.png" alt="image-20231205100157009"></p><p>它们分别用来加载.yaml和.properties配置文件，然后在SpringBoot主包spring-boot-3.2.0.jar的&#x2F;META-INF&#x2F;spring.factories自动配置文件中定义了一系列的应用监听器，如下：</p><p><img src="https://s2.loli.net/2023/12/13/mUi4E359AVhoZS1.png" alt="image-20231213175042494"></p><p>其中就有一个EnvironmentPostProcessorApplicationListener监听器，它监听了以下三个事件：</p><ul><li>ApplicationEnvironmentPrepareEvent</li><li>ApplicationPrepareEvent</li><li>ApplicationFailedEvent</li></ul><p>源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onApplicationEvent</span><span class="params">(ApplicationEvent event)</span> &#123;</span><br><span class="line">   <span class="keyword">if</span> (event <span class="keyword">instanceof</span> ApplicationEnvironmentPreparedEvent environmentPreparedEvent) &#123;</span><br><span class="line">      onApplicationEnvironmentPreparedEvent(environmentPreparedEvent);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> (event <span class="keyword">instanceof</span> ApplicationPreparedEvent) &#123;</span><br><span class="line">      onApplicationPreparedEvent();</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> (event <span class="keyword">instanceof</span> ApplicationFailedEvent) &#123;</span><br><span class="line">      onApplicationFailedEvent();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中监听的ApplicationEnvironmentPrepareEvent事件用于加载配置，具体可以跟踪到ConfigDataEnvironment#processAndApply类的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ConfigDataEnvironment</span> &#123;</span><br><span class="line">...</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Default search locations used if not &#123;<span class="doctag">@link</span> #LOCATION_PROPERTY&#125; is found.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">final</span> ConfigDataLocation[] DEFAULT_SEARCH_LOCATIONS;</span><br><span class="line">   <span class="keyword">static</span> &#123;</span><br><span class="line">      List&lt;ConfigDataLocation&gt; locations = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">      locations.add(ConfigDataLocation.of(<span class="string">&quot;optional:classpath:/;optional:classpath:/config/&quot;</span>));</span><br><span class="line">      locations.add(ConfigDataLocation.of(<span class="string">&quot;optional:file:./;optional:file:./config/;optional:file:./config/*/&quot;</span>));</span><br><span class="line">      DEFAULT_SEARCH_LOCATIONS = locations.toArray(<span class="keyword">new</span> <span class="title class_">ConfigDataLocation</span>[<span class="number">0</span>]);</span><br><span class="line">   &#125;</span><br><span class="line">....</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Process all contributions and apply any newly imported property sources to the</span></span><br><span class="line"><span class="comment">    * &#123;<span class="doctag">@link</span> Environment&#125;.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">void</span> <span class="title function_">processAndApply</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="type">ConfigDataImporter</span> <span class="variable">importer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConfigDataImporter</span>(<span class="built_in">this</span>.logFactory, <span class="built_in">this</span>.notFoundAction, <span class="built_in">this</span>.resolvers,</span><br><span class="line">            <span class="built_in">this</span>.loaders);</span><br><span class="line">      registerBootstrapBinder(<span class="built_in">this</span>.contributors, <span class="literal">null</span>, DENY_INACTIVE_BINDING);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//初始化配置处理</span></span><br><span class="line">      <span class="type">ConfigDataEnvironmentContributors</span> <span class="variable">contributors</span> <span class="operator">=</span> processInitial(<span class="built_in">this</span>.contributors, importer);</span><br><span class="line">      <span class="type">ConfigDataActivationContext</span> <span class="variable">activationContext</span> <span class="operator">=</span> createActivationContext(</span><br><span class="line">            contributors.getBinder(<span class="literal">null</span>, BinderOption.FAIL_ON_BIND_TO_INACTIVE_SOURCE));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//处理没有Profile的配置</span></span><br><span class="line">      contributors = processWithoutProfiles(contributors, importer, activationContext);</span><br><span class="line">      activationContext = withProfiles(contributors, activationContext);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//处理带有Profile的配置</span></span><br><span class="line">      contributors = processWithProfiles(contributors, importer, activationContext);</span><br><span class="line">      applyToEnvironment(contributors, activationContext, importer.getLoadedLocations(),</span><br><span class="line">            importer.getOptionalLocations());</span><br><span class="line">   &#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在类源码上方看到了静态代码块中的配置文件的默认搜索路径，然后在processAndApply方法中看到这个contributors变量被先后定义了三次：</p><ul><li>初始化配置处理</li><li>处理没有Profile的配置</li><li>处理带有Profile的配置</li></ul><p>从这个加载顺序就可以看到基于Profile配置的优先级了，然后在获取contributors的方法中可以一路追踪到调用PropertySourceLoader加载配置文件的地方。</p><p>既然有监听事件，就有发布事件的地方，可以在SpringBoot启动的run方法中找到：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> ConfigurableApplicationContext <span class="title function_">run</span><span class="params">(String... args)</span> &#123;</span><br><span class="line">   <span class="type">Startup</span> <span class="variable">startup</span> <span class="operator">=</span> Startup.create();</span><br><span class="line">   <span class="keyword">if</span> (<span class="built_in">this</span>.registerShutdownHook) &#123;</span><br><span class="line">      SpringApplication.shutdownHook.enableShutdownHookAddition();</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="type">DefaultBootstrapContext</span> <span class="variable">bootstrapContext</span> <span class="operator">=</span> createBootstrapContext();</span><br><span class="line">   <span class="type">ConfigurableApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">   configureHeadlessProperty();</span><br><span class="line">   <span class="type">SpringApplicationRunListeners</span> <span class="variable">listeners</span> <span class="operator">=</span> getRunListeners(args);</span><br><span class="line">   listeners.starting(bootstrapContext, <span class="built_in">this</span>.mainApplicationClass);</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="type">ApplicationArguments</span> <span class="variable">applicationArguments</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultApplicationArguments</span>(args);</span><br><span class="line">       <span class="comment">//准备环境</span></span><br><span class="line">      <span class="type">ConfigurableEnvironment</span> <span class="variable">environment</span> <span class="operator">=</span> prepareEnvironment(listeners, bootstrapContext, applicationArguments);</span><br></pre></td></tr></table></figure><p>根据准备环境prepareEnvironment方法可以一路找到EventPublishingRunListener#environmentPrepared方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">environmentPrepared</span><span class="params">(ConfigurableBootstrapContext bootstrapContext,</span></span><br><span class="line"><span class="params">      ConfigurableEnvironment environment)</span> &#123;</span><br><span class="line">   multicastInitialEvent(</span><br><span class="line">         <span class="keyword">new</span> <span class="title class_">ApplicationEnvironmentPreparedEvent</span>(bootstrapContext, <span class="built_in">this</span>.application, <span class="built_in">this</span>.args, environment));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>事件就是SpringBoot启动过程中发出的，所以整个流程就是SpringBoot启动时发布事件，然后通过注册的监听器进行监听，监听器监听到事件后就马上加载指定搜索路径的配置文件。</p><h3 id="1-10配置加密"><a href="#1-10配置加密" class="headerlink" title="1.10配置加密"></a>1.10配置加密</h3><h4 id="1-10-1概述"><a href="#1-10-1概述" class="headerlink" title="1.10.1概述"></a>1.10.1概述</h4><h3 id="1-11配置迁移"><a href="#1-11配置迁移" class="headerlink" title="1.11配置迁移"></a>1.11配置迁移</h3><h4 id="1-11-1-迁移方案"><a href="#1-11-1-迁移方案" class="headerlink" title="1.11.1  迁移方案"></a>1.11.1  迁移方案</h4><p>在升级SpringBoot新版本的时候，某些配置参数可能已经被更名或者删除了，SpringBoot提供了一个配置迁移依赖，方便开发者快速进行配置迁移，如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-properties-migrator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在应用中加入此依赖，就可以分析应用的环境并在启动时候打印诊断信息，还可以在运行时进行临时的配置迁移</p><p>SpringBoot会在启动日志中打印需要替换的旧的配置参数和新的配置参数，替换后再重新启动测试即可。</p><p>需要注意的是：</p><p>（1）在应用启动后再加入Spring环境中的配置参数不再配置迁移支持范围之内，比如通过@PropertySource注解加载的配置</p><p>（2）应用完成迁移后，建议删除该配置迁移依赖，避免部署到生产环境后影响性能或者出现潜在的问题</p><h4 id="1-11-2-实现原理"><a href="#1-11-2-实现原理" class="headerlink" title="1.11.2   实现原理"></a>1.11.2   实现原理</h4><p>spring-boot-properties-migrator配置迁移依赖包的所有内容如下：</p><p><img src="https://s2.loli.net/2023/12/13/UwaO9VGdlu5QZrW.png" alt="image-20231213182229459"></p><p>在spring.factories自动配置文件中注册了一个PropertiesMigrationListener监听器</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Application Listeners</span></span><br><span class="line"><span class="attr">org.springframework.context.ApplicationListener</span>=<span class="string">\</span></span><br><span class="line"><span class="string">org.springframework.boot.context.properties.migrator.PropertiesMigrationListener</span></span><br></pre></td></tr></table></figure><p>监听器部分源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">PropertiesMigrationListener</span> <span class="keyword">implements</span> <span class="title class_">ApplicationListener</span>&lt;SpringApplicationEvent&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Log</span> <span class="variable">logger</span> <span class="operator">=</span> LogFactory.getLog(PropertiesMigrationListener.class);</span><br><span class="line">    <span class="keyword">private</span> PropertiesMigrationReport report;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> reported;</span><br><span class="line"></span><br><span class="line">    PropertiesMigrationListener() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onApplicationEvent</span><span class="params">(SpringApplicationEvent event)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (event <span class="keyword">instanceof</span> ApplicationPreparedEvent) &#123;</span><br><span class="line">            <span class="type">ApplicationPreparedEvent</span> <span class="variable">preparedEvent</span> <span class="operator">=</span> (ApplicationPreparedEvent)event;</span><br><span class="line">            <span class="built_in">this</span>.onApplicationPreparedEvent(preparedEvent);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (event <span class="keyword">instanceof</span> ApplicationReadyEvent || event <span class="keyword">instanceof</span> ApplicationFailedEvent) &#123;</span><br><span class="line">            <span class="built_in">this</span>.logLegacyPropertiesReport();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它实现了ApplicationListener接口，并监听SpringApplicationEvent事件，事件是由SpringBoot启动过程中发出的。</p><p>在第一个应用准备时间发出后，监听器先生成配置参数迁移报告PropertiesMigrationReport，然后在第二个应用就绪&#x2F;失败事件发出后，在通过PropertiesMigrationReport#getWarningReport和PropertiesMigrationReport#getErrorReport方法获取相对应的报告并输出日志。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;SpringBoot3&quot;&gt;&lt;a href=&quot;#SpringBoot3&quot; class=&quot;headerlink&quot; title=&quot;SpringBoot3&quot;&gt;&lt;/a&gt;SpringBoot3&lt;/h1&gt;&lt;h2 id=&quot;1-配置管理&quot;&gt;&lt;a href=&quot;#1-配置管理&quot; cla</summary>
      
    
    
    
    <category term="SpringBoot3" scheme="https://humbledong.github.io/categories/SpringBoot3/"/>
    
    
    <category term="SpringBoot3" scheme="https://humbledong.github.io/tags/SpringBoot3/"/>
    
  </entry>
  
  <entry>
    <title>Redis进阶</title>
    <link href="https://humbledong.github.io/undefined/505826b8.html"/>
    <id>https://humbledong.github.io/undefined/505826b8.html</id>
    <published>2023-08-01T00:14:20.000Z</published>
    <updated>2024-01-08T02:48:36.749Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Reids进阶"><a href="#Reids进阶" class="headerlink" title="Reids进阶"></a>Reids进阶</h1><h2 id="Redis-conf-配置"><a href="#Redis-conf-配置" class="headerlink" title="Redis.conf 配置"></a>Redis.conf 配置</h2><p>启动的时候，通过这个配置启动</p><blockquote><p>单位</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Redis configuration file example.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Note that in order to read the configuration file, Redis must be</span></span><br><span class="line"><span class="comment"># started with the file path as first argument:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># ./redis-server /path/to/redis.conf</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Note on units: when memory size is needed, it is possible to specify</span></span><br><span class="line"><span class="comment"># it in the usual form of 1k 5GB 4M and so forth:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 1k =&gt; 1000 bytes</span></span><br><span class="line"><span class="comment"># 1kb =&gt; 1024 bytes</span></span><br><span class="line"><span class="comment"># 1m =&gt; 1000000 bytes</span></span><br><span class="line"><span class="comment"># 1mb =&gt; 1024*1024 bytes</span></span><br><span class="line"><span class="comment"># 1g =&gt; 1000000000 bytes</span></span><br><span class="line"><span class="comment"># 1gb =&gt; 1024*1024*1024 bytes</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># units are case insensitive so 1GB 1Gb 1gB are all the same.</span></span><br></pre></td></tr></table></figure><p>1.配置文件unit单位对大小写不敏感</p><blockquote><p>包含</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">################################## INCLUDES ###################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Include one or more other config files here.  This is useful if you</span></span><br><span class="line"><span class="comment"># have a standard template that goes to all Redis servers but also need</span></span><br><span class="line"><span class="comment"># to customize a few per-server settings.  Include files can include</span></span><br><span class="line"><span class="comment"># other files, so use this wisely.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Note that option &quot;include&quot; won&#x27;t be rewritten by command &quot;CONFIG REWRITE&quot;</span></span><br><span class="line"><span class="comment"># from admin or Redis Sentinel. Since Redis always uses the last processed</span></span><br><span class="line"><span class="comment"># line as value of a configuration directive, you&#x27;d better put includes</span></span><br><span class="line"><span class="comment"># at the beginning of this file to avoid overwriting config change at runtime.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># If instead you are interested in using includes to override configuration</span></span><br><span class="line"><span class="comment"># options, it is better to use include as the last line.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Included paths may contain wildcards. All files matching the wildcards will</span></span><br><span class="line"><span class="comment"># be included in alphabetical order.</span></span><br><span class="line"><span class="comment"># Note that if an include path contains a wildcards but no files match it when</span></span><br><span class="line"><span class="comment"># the server is started, the include statement will be ignored and no error will</span></span><br><span class="line"><span class="comment"># be emitted.  It is safe, therefore, to include wildcard files from empty</span></span><br><span class="line"><span class="comment"># directories.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># include /path/to/local.conf</span></span><br><span class="line"><span class="comment"># include /path/to/other.conf</span></span><br><span class="line"><span class="comment"># include /path/to/fragments/*.conf</span></span><br><span class="line"><span class="comment">#</span></span><br></pre></td></tr></table></figure><p>就是好比我们之前的spring，import之类的include包含</p><blockquote><p>网络</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">bind</span> 0.0.0.0          <span class="comment">#绑定的ip默认是本机127.0.0.1</span></span><br><span class="line">protected-mode no     <span class="comment">#保护模式是否开启 默认是yes</span></span><br><span class="line">port 6379             <span class="comment">#端口设置</span></span><br></pre></td></tr></table></figure><blockquote><p>通用 GENERAL</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">daemonize <span class="built_in">yes</span>    <span class="comment">#以守护线程的方式进行，默认是no，我们需要自己开启为yes</span></span><br><span class="line"></span><br><span class="line">pidfile /var/run/redis_6379.pid <span class="comment">#如果以后台的方式运行，我们就需要指定一个pid文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#日志</span></span><br><span class="line"><span class="comment"># Specify the server verbosity level.</span></span><br><span class="line"><span class="comment"># This can be one of:</span></span><br><span class="line"><span class="comment"># debug (a lot of information, useful for development/testing)</span></span><br><span class="line"><span class="comment"># verbose (many rarely useful info, but not a mess like the debug level)</span></span><br><span class="line"><span class="comment"># notice (moderately verbose, what you want in production probably)</span></span><br><span class="line"><span class="comment"># warning (only very important / critical messages are logged)</span></span><br><span class="line"><span class="comment"># nothing (nothing is logged)</span></span><br><span class="line">loglevel notice</span><br><span class="line"></span><br><span class="line">logfile <span class="string">&quot;&quot;</span><span class="comment">#日志的文件位置名</span></span><br><span class="line">databases 16    <span class="comment">#数据库数量，默认是16个数据库</span></span><br><span class="line">always-show-logo no  <span class="comment">#是否总是显示LOGO</span></span><br></pre></td></tr></table></figure><blockquote><p>快照</p></blockquote><p>持久化，在规定的时间内，执行了多少次操作，则会持久化到文件rdb，aof</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">stop-writes-on-bgsave-error <span class="built_in">yes</span> <span class="comment">#持久化如果出错的话，是否还要继续工作</span></span><br><span class="line">rdbcompression <span class="built_in">yes</span>   <span class="comment">#是否压缩rdb文件，需要消耗一些cpu资源</span></span><br><span class="line">rdbchecksum <span class="built_in">yes</span> <span class="comment">#保存rdb文件的时候，运行错误的检查校验</span></span><br><span class="line"><span class="built_in">dir</span> ./ <span class="comment">#rdb 文件保存的目录</span></span><br></pre></td></tr></table></figure><blockquote><p>REPLICATION 复制，后面主从复制的时候了解</p></blockquote><blockquote><p>安全</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># requirepass foobared</span></span><br><span class="line"></span><br><span class="line">默认是没有密码的</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-4-7-centos bin]<span class="comment"># redis-cli -p 6379</span></span><br><span class="line">127.0.0.1:6379&gt; config <span class="built_in">set</span> requirepass <span class="string">&quot;123456&quot;</span> <span class="comment">#设置redis密码</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; config get requirepass <span class="comment">#获取密码</span></span><br><span class="line">1) <span class="string">&quot;requirepass&quot;</span></span><br><span class="line">2) <span class="string">&quot;123456&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; </span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>限制客户端 clients</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># maxclients 10000  #设置能连接上redis的最大客户端的数量</span></span><br><span class="line">maxmemory &lt;bytes&gt;  <span class="comment">#redis 配置最大的内存容量</span></span><br><span class="line">maxmemory-policy noevicition <span class="comment">#内存达到上限之后的处理策略</span></span><br><span class="line">1.volatile-lru：只对设置了过期时间的key进行LRU（默认值）</span><br><span class="line">2.allkeys-lru: 删除lru算法的key</span><br><span class="line">3.volatile-random：随机删除即将过期的key</span><br><span class="line">4.allkeys-random：随机删除</span><br><span class="line">5.volatile-ttl：删除即将过期的</span><br><span class="line">6.noevicition：永不过期，返回错误</span><br></pre></td></tr></table></figure><blockquote><p>APPEND ONLY 模式  AOF配置</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">appendonly no  </span><br><span class="line"><span class="comment">#默认是不开启aof模式的，默认是以rdb方式持久化的，在大部分情况下，rdb完全够用！</span></span><br><span class="line">appendfilename <span class="string">&quot;appendonly.aof&quot;</span></span><br><span class="line"><span class="comment">#持久化的文件的名字</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># appendfsync always  #每次修改都会sync，消耗性能</span></span><br><span class="line">appendfsync everysec  <span class="comment">#每秒执行一次sync，可能会丢失这一秒的数据！</span></span><br><span class="line"><span class="comment"># appendfsync no      #不执行sync，这个时候操作系统自己同步数据，速度最快</span></span><br></pre></td></tr></table></figure><h2 id="Redis持久化"><a href="#Redis持久化" class="headerlink" title="Redis持久化"></a>Redis持久化</h2><p>Redis是内存数据库，如果不将内存中的数据库保存到磁盘，那么一旦服务器进程退出，服务器中的数据库状态也会消失，所以Redis提供了持久化功能！</p><h3 id="RDB（Redis-DataBase）"><a href="#RDB（Redis-DataBase）" class="headerlink" title="RDB（Redis DataBase）"></a>RDB（Redis DataBase）</h3><blockquote><p>什么是RDB</p></blockquote><p>原理：</p><p><img src="https://s2.loli.net/2023/12/27/ZAnK7EMY4UVN8kD.png" alt="image-20231227171117579"></p><p>​在指定的时间间隔内将内存中的数据集快照写入磁盘，也就是Snapshot快照，它恢复时是将快照文件直接读到内存里。</p><p>​Redis会单独创建（fork）一个子进程来进行持久化，会先将数据写入到一个临时文件中，待持久化过程都结束了，再用这个临时文件替换上次持久化好的文件。整个过程中，主进程是不进行任何IO操作的。这就确保了极高的性能。如果需要进行大规模数据的恢复，且对于数据恢复的完整性不是非常敏感，那RDB方式要比AOF方式更加的高效。RDB的缺点事最后一次持久化后的数据可能丢失。我们默认的就是RDB，一般情况下不需要修改这个配置。</p><p>​有时候在生产环境会将这个文件进行备份</p><p><strong>rdb保存的文件是dump.rdb</strong></p><p><img src="https://s2.loli.net/2023/12/27/MVgT9jLi4F2US8r.png" alt="image-20231227165017017"></p><p><img src="https://s2.loli.net/2023/12/27/AHiyL2Tn7whMXpI.png" alt="image-20231227165200523"></p><blockquote><p>触发机制</p></blockquote><p>1、save的规则满足的情况下，会自动触发rdb规则</p><p>2、执行flushall命令，也会触发我们的rdb规则</p><p>3、退出redis，也会生成rdb文件！</p><p>备份就会自动生产一个dump.rdb文件</p><p><img src="https://s2.loli.net/2023/12/27/Bu8EyxUta5hWfHF.png" alt="image-20231227165547727"></p><blockquote><p>恢复rdb文件</p></blockquote><p>1、只需要将rdb文件放在我们redis启动目录即可，redis启动的时候会自动检查dump.rdb文件恢复其中的数据。</p><p>2、查看需要存在的位置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; config get <span class="built_in">dir</span></span><br><span class="line">1) <span class="string">&quot;dir&quot;</span></span><br><span class="line">2) <span class="string">&quot;/usr/local/bin&quot;</span></span><br><span class="line"><span class="comment">#如果在这个目录下存在dump.rdb文件，启动就会自动恢复其中的数据</span></span><br></pre></td></tr></table></figure><p>虽然Redis它自己配置就已经够了，但是还是需要学习了解</p><blockquote><p>优点</p></blockquote><p>1、适合大规模的数据恢复！如果服务器宕机了，dump.rdb就可以恢复数据</p><p>2、对数据的完整性要求不高！</p><blockquote><p>缺点</p></blockquote><p>1、需要一定的时间间隔进程操作！如果Redis意外宕机了，这个最后一次修改数据就没有了</p><p>2、fork进程的时候，会占用一定的内存空间</p><h3 id="AOF（Append-Only-File）"><a href="#AOF（Append-Only-File）" class="headerlink" title="AOF（Append  Only  File）"></a>AOF（Append  Only  File）</h3><p>将我们的所有命令都记录下来，history，恢复的时候就把这个文件全部再执行一遍！</p><p>AOF默认是文件无限追加，文件会越来越大</p><blockquote><p>什么是AOF</p></blockquote><p>原理：</p><p><img src="https://s2.loli.net/2023/12/28/hSQ2UbYa7uWHF4E.png" alt="image-20231228095911324"></p><p>以日志的形式来记录每个写操作，将Redis执行过的所有指令记录下来（读操作不记录），只许追加文件但不可以改写文件，redis启动之初会读取该文件重新构建数据，换言之，Redis重启的话就根据日志文件的内容将写指令从前到后执行一次完成数据恢复的工作。</p><p><strong>AOF保存的是<code>appendonly.aof</code>文件</strong></p><p>默认是不开启AOF的，需要我们改为yes</p><p><img src="https://s2.loli.net/2023/12/27/BeV7XUPgRZJNqAy.png" alt="image-20231227173740270"></p><p>必须重启redis服务</p><p>测试一下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-4-7-centos bin]<span class="comment"># redis-server lddconfig/redis.conf </span></span><br><span class="line">[root@VM-4-7-centos bin]<span class="comment"># redis-cli -p 6379</span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k1 v1</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k2 v2</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k3 v3</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k4 v4</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; SHUTDOWN</span><br><span class="line">not connected&gt; <span class="built_in">exit</span></span><br><span class="line">[root@VM-4-7-centos bin]<span class="comment"># ls</span></span><br><span class="line">appendonlydir   jemalloc-config  libmcrypt-config  mdecrypt         redis-cli</span><br><span class="line">cosfs           jemalloc.sh      luajit            redis-benchmark  redis-sentinel</span><br><span class="line">docker-compose  jeprof           luajit-2.0.4      redis-check-aof  redis-server</span><br><span class="line">dump.rdb        lddconfig        mcrypt            redis-check-rdb</span><br><span class="line">[root@VM-4-7-centos bin]<span class="comment"># cd appendonlydir/ #aof文件放在这个目录里面的</span></span><br><span class="line">[root@VM-4-7-centos appendonlydir]<span class="comment"># ls</span></span><br><span class="line">appendonly.aof.1.base.rdb  appendonly.aof.1.incr.aof  appendonly.aof.manifest</span><br></pre></td></tr></table></figure><p>查看一下aof文件：</p><p><img src="https://s2.loli.net/2023/12/27/sUHqRnKjoWQ3cBN.png" alt="image-20231227174557209"></p><blockquote><p>redis-check-aof工具</p></blockquote><p>如果我们此时修改了这个文件的内容，再重启Redis服务就会失败，可以用到我们的修复工具<code>redis-check-aof</code></p><p>修改：</p><p><img src="https://s2.loli.net/2023/12/27/Dld5PzyEaG3NgvY.png" alt="image-20231227174709953"></p><p>重启我们的Redis服务，直接失败</p><p><img src="https://s2.loli.net/2023/12/27/AzwjaQ2r5X9q8bF.png" alt="image-20231227174755387"></p><p>我们使用修复工具：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-4-7-centos bin]<span class="comment"># redis-cli -p 6379</span></span><br><span class="line">Could not connect to Redis at 127.0.0.1:6379: Connection refused</span><br><span class="line">not connected&gt; <span class="built_in">exit</span></span><br><span class="line">[root@VM-4-7-centos bin]<span class="comment"># redis-check-aof --fix appendonlydir/appendonly.aof.1.incr.aof </span></span><br><span class="line">Start checking Old-Style AOF</span><br><span class="line">0x              87: Expected \r\n, got: 3131</span><br><span class="line">AOF analyzed: filename=appendonlydir/appendonly.aof.1.incr.aof, size=155, ok_up_to=110, ok_up_to_line=33, diff=45</span><br><span class="line">This will shrink the AOF appendonlydir/appendonly.aof.1.incr.aof from 155 bytes, with 45 bytes, to 110 bytes</span><br><span class="line">Continue? [y/N]: y</span><br><span class="line">Successfully truncated AOF appendonlydir/appendonly.aof.1.incr.aof</span><br><span class="line">[root@VM-4-7-centos bin]<span class="comment"># redis-server lddconfig/redis.conf </span></span><br><span class="line">[root@VM-4-7-centos bin]<span class="comment"># redis-cli -p 6379</span></span><br><span class="line">127.0.0.1:6379&gt; get k4</span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt; get k3</span><br><span class="line"><span class="string">&quot;v3&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; </span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/12/27/Yb9nJWqEBv46cuo.png" alt="image-20231227175012514"></p><p>我们发现最后一次k4的数据没了，去查看我们的aof文件</p><p><img src="https://s2.loli.net/2023/12/27/EXbuJSrxwQfj2Ci.png" alt="image-20231227175107283"></p><p>这里记得去把配置该回去，用redis默认的就够了。</p><blockquote><p>优点和缺点！</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">appendonly no  </span><br><span class="line"><span class="comment">#默认是不开启aof模式的，默认是以rdb方式持久化的，在大部分情况下，rdb完全够用！</span></span><br><span class="line">appendfilename <span class="string">&quot;appendonly.aof&quot;</span></span><br><span class="line"><span class="comment">#持久化的文件的名字</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># appendfsync always  #每次修改都会sync，消耗性能</span></span><br><span class="line">appendfsync everysec  <span class="comment">#每秒执行一次sync，可能会丢失这一秒的数据！</span></span><br><span class="line"><span class="comment"># appendfsync no      #不执行sync，这个时候操作系统自己同步数据，速度最快</span></span><br></pre></td></tr></table></figure><p>优点：</p><p>1、每一次修改都同步，文件的完整性会更好！</p><p>2、每秒同步一次，可能会丢失一秒的数据</p><p>3、从不同步，效率是最高的。</p><p>缺点：</p><p>1、相对于数据文件来说，AOF远大于rdb，修复的速度也比rdb慢（rdb也有自己的修复工具）</p><p>2、AOF运行效率也要比rdb慢，所以我们redis默认的配置就是rdb持久化</p><p><img src="https://s2.loli.net/2023/12/27/bXepucWD34PBZtC.png" alt="image-20231227181704000"></p><p>因为AOF默认是文件无限追加，文件会越来越大</p><p>如果AOF文件大于64MB，fork一个新进程将我们的文件进行重写</p><blockquote><p>扩展</p></blockquote><p>1、RDB持久化方式能够在指定时间间隔内对你的数据进行快照存储</p><p>2、AOF持久化方式记录每次对服务器写的操作，当服务器重启的时候会重新执行这些命令来恢复原始的数据，AOF命令以Redis协议追加保存每次写的从左到文件末尾，Redis还能对AOF文件进行后台重写，使得AOF文件的体积不至于过大。</p><p>3、只做缓存，如果你只希望你的数据在服务器运行的时候存在，你也可以不做任何持久化</p><p>4、同时开启两种持久化方式</p><ul><li>在这种情况下，当Redis重启的时候会优先载入AOF文件来恢复原始的数据，因为在通常情况下AOF文件保存的数据要比RDB文件保存的文件的数据更完整</li><li>RDB的数据不实时，同时使用两者时服务器重启也只会找AOF文件，那要不要只用AOF呢，当然是不建议的，因为RDB更适合用于备份数据库（AOF在不断变化不好备份），快速重启，而且不会有AOF可能潜在的bug，留着作为一个以防万一的手段。</li></ul><p>5、性能建议</p><ul><li>因为RDB文件只用后备用途，建议只在Slave上持久化RDB文件，而且只要15分钟备份一次就够了，只保留<code>save 900 1</code>这条规则</li><li>如果Enable AOF，好处是在最恶劣情况下也只会丢失不超过两秒的数据，启动脚本较简单值load自己的AOF文件即可，代价一是带来了持续的IO，而是AOF rewrite的最后将rewrite过程中产生的新数据写到新文件造成的阻塞几乎是不可能避免的。只要硬盘许可，应该尽量减少AOF rewrite的频率，AOF重写的基础大小默认值64MB太小了，可以设置到5G以上，默认超过原大小的100%大小重写可以改到适当的数值。</li><li>如果不Enable AOF，仅靠Master-Slave-Repllcation实现高可用性也可以，能省掉一大笔IO，也减少了rewrite时带来的系统波动。代价是如果Master&#x2F;Slave同时倒掉，会丢失十几分钟的数据，启动脚本也要比较两个Master&#x2F;Slave中的RDB文件，载入较新的那个。</li></ul><h2 id="Redis订阅发布"><a href="#Redis订阅发布" class="headerlink" title="Redis订阅发布"></a>Redis订阅发布</h2><p>Redis发布订阅（pub&#x2F;sub）是一种消息通信模式：发送者（pub）发送消息，订阅者（sub）接收消息</p><p>Redis客户端可以订阅任意数量的频道</p><p>订阅&#x2F;发布消息图：</p><p><img src="https://s2.loli.net/2023/12/28/ilP3C8EwJX9Gstg.png" alt="image-20231228103449975"></p><blockquote><p>命令</p></blockquote><p>这些命令被广泛用于构建即时通信应用，比如网络聊天室（chatRoom）和实时广播，实时提醒等</p><table><thead><tr><th>序号</th><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td>PSUBSCRIBE  pattern [pattern …]</td><td>订阅一个或者多个符合给定模式的频道</td></tr><tr><td>2</td><td>PUBSUB suncommand [argument[argument …]]</td><td>查看订阅与发布系统状态</td></tr><tr><td>3</td><td>PUBLISH channel message</td><td>将信息发送到指定的频道</td></tr><tr><td>4</td><td>PUNSUBSCRIBE pattern [pattern …]</td><td>退订所有给定模式的频道</td></tr><tr><td>5</td><td>SUBSCRIBE channel [channel …]</td><td>订阅给定的一个或多个频道的信息</td></tr><tr><td>6</td><td>UNSUBSCRIBE channel [channel …]</td><td>退订给定的频道</td></tr></tbody></table><blockquote><p>测试</p></blockquote><p>订阅端：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-4-7-centos bin]<span class="comment"># redis-server lddconfig/redis.conf </span></span><br><span class="line">[root@VM-4-7-centos bin]<span class="comment"># redis-cli -p 6379</span></span><br><span class="line">127.0.0.1:6379&gt; SUBSCRIBE lddblog <span class="comment">#订阅一个频道 lddblog</span></span><br><span class="line">1) <span class="string">&quot;subscribe&quot;</span></span><br><span class="line">2) <span class="string">&quot;lddblog&quot;</span></span><br><span class="line">3) (<span class="built_in">integer</span>) 1</span><br><span class="line"><span class="comment">#等待读取推送的信息</span></span><br><span class="line">1) <span class="string">&quot;message&quot;</span>         <span class="comment">#消息</span></span><br><span class="line">2) <span class="string">&quot;lddblog&quot;</span> <span class="comment">#哪个频道的消息</span></span><br><span class="line">3) <span class="string">&quot;this is my blog&quot;</span> <span class="comment">#消息的具体内容</span></span><br></pre></td></tr></table></figure><p>发送端：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-4-7-centos bin]<span class="comment"># redis-cli -p 6379</span></span><br><span class="line">127.0.0.1:6379&gt; PUBLISH lddblog <span class="string">&quot;this is my blog&quot;</span> <span class="comment">#发布者发布消息到频道！</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure><blockquote><p>原理</p></blockquote><p>Redis是使用C实现的，通过分析Redis源码里面的pubsub.c文件，了解发布和订阅机制的底层实现，用来可以加深对Redis的理解。</p><p>Redis通过PUBLISH、SUBCRIBE和PSUBSCRIBE等命令实现发布和订阅功能。</p><p>通过SUBCRIBE命令订阅某个频道后，redis-server里维护了一个字典，字典的键就是一个个channel（频道），而字典的值则是一个链表，链表中保存了所有订阅这个channel的客户端。SUBSCRIBE命令的关键，就是将客户端添加到给定channel的订阅链表中。</p><p>通过PUBLISH命令向订阅者发送消息，redis-server会使用给定频道作为键，在它所维护的channel子带你中记录了订阅这个频道的所有客户端的链表，遍历这个链表，将消息发布给所有订阅者。</p><p>Pub&#x2F;Sub从字面上理解就是发布（Publish）与订阅（Subscribe），在Redis中，可以设定对某一个key值进行消息发布及消息订阅，当一个key值上进行了消息发布后，所有订阅它的客户端都会收到相应的消息。这一功能最明显的用法就是用作实时消息系统，比如普通的即时聊天、群聊等等。</p><h2 id="Redis主从复制"><a href="#Redis主从复制" class="headerlink" title="Redis主从复制"></a>Redis主从复制</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>主从复制，是指将一台Redis服务器的数据，复制到其他的Redis服务器。前者称之为主节点（master&#x2F;leader），后者称之为从节点（slave&#x2F;follower）；数据的复制是单向的，只能由主节点到从节点。Master以写为主，Slave以读为主。</p><p>默认情况下，每台Redis服务器都是主节点；且一个主节点可以有多个从节点（或没有从节点），但一个从节点只能由一个主节点。</p><p><strong>主从复制的作用主要包括：</strong></p><p>1、数据冗余：主从复制实现了数据的热备份，是持久化之外的一种数据冗余方式。</p><p>2、故障恢复：当主节点出现问题时，可以从主节点提供服务，实现快速的故障恢复；实际上是一种服务的冗余。</p><p>3、负载均衡：在主从复制的基础上，配合读写分离，可以由主节点提供写服务，由从节点提供读服务（即写Redis数据时应用连接主节点，读Redis数据时应用连接从节点），分担服务器负载；尤其是在写少读多的场景下，通过多个从节点分担读负载，可以大大提高Redis服务器的并发量。</p><p>4、高可用（集群）基石：除了以上作用之外，主从复制还是哨兵模式和集群能实施的基础，因此说主从复制时Redis高可用的基础。</p><p>一般来说，要将Redis运用于工程项目中，只使用一台Redis是万万（宕机）不能的，原因如下：</p><p>1、从结构上，单个Redis服务器会发生单点故障，并且一台服务器需要处理所有的请求负载，压力较大。</p><p>2、从容量上，单个Reds服务器内存容量有限，就算一台Redis服务器内存容量为256G，也不能将所有内存用作Redis存储内存，一般来说，单台Redis最大使用内存不应该超过20G。</p><p>电商网站上的商品，一般都是一次上传，无数次浏览的，说专业点也就是“多读少写”。</p><p>对于这种场景，我们一般是这种架构：</p><h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><p>只配置从库，不配置主库</p><p>首先，需要查看当前库的信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-4-7-centos bin]<span class="comment"># redis-cli -p 6379</span></span><br><span class="line">127.0.0.1:6379&gt; info replication  <span class="comment">#查看当前库的信息</span></span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:master            <span class="comment">#角色</span></span><br><span class="line">connected_slaves:0     <span class="comment">#没有从机</span></span><br><span class="line">master_failover_state:no-failover</span><br><span class="line">master_replid:6e3a4aafb4094a398294f82e17dae9e28559557e</span><br><span class="line">master_replid2:03b6866d58bc2f1a84809ce8a417e1cc834a1ef6</span><br><span class="line">master_repl_offset:416</span><br><span class="line">second_repl_offset:269</span><br><span class="line">repl_backlog_active:0</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:0</span><br><span class="line">repl_backlog_histlen:0</span><br></pre></td></tr></table></figure><blockquote><p>1.开启四个会话</p></blockquote><p>1个主机，两个从机，一个测试</p><p><img src="https://s2.loli.net/2023/12/29/wYltCorvc4GshfP.png" alt="image-20231229095737074"></p><p>现在去配置文件里面</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-4-7-centos bin]<span class="comment"># cd lddconfig/</span></span><br><span class="line">[root@VM-4-7-centos lddconfig]<span class="comment"># ls</span></span><br><span class="line">redis.conf</span><br><span class="line"><span class="comment">#将我们的配置文件复制三份出来</span></span><br><span class="line">[root@VM-4-7-centos lddconfig]<span class="comment"># cp redis.conf redis79.conf</span></span><br><span class="line">[root@VM-4-7-centos lddconfig]<span class="comment"># cp redis.conf redis80.conf</span></span><br><span class="line">[root@VM-4-7-centos lddconfig]<span class="comment"># cp redis.conf redis81.conf</span></span><br><span class="line">[root@VM-4-7-centos lddconfig]<span class="comment"># ls</span></span><br><span class="line">redis79.conf  redis80.conf  redis81.conf  redis.conf</span><br><span class="line">[root@VM-4-7-centos lddconfig]<span class="comment"># vim redis79.conf</span></span><br><span class="line">[root@VM-4-7-centos lddconfig]<span class="comment"># vim redis80.conf</span></span><br><span class="line">[root@VM-4-7-centos lddconfig]<span class="comment"># vim redis81.conf</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>修改内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">port 6381  <span class="comment">#修改端口</span></span><br><span class="line">daemonize <span class="built_in">yes</span> <span class="comment">#修改为守护进程即后台启动</span></span><br><span class="line">pidfile /var/run/redis_6381.pid  <span class="comment">#修改pid文件名</span></span><br><span class="line">logfile “6381.<span class="built_in">log</span>”  <span class="comment">#修改日志导出位置</span></span><br><span class="line">dbfilename dump6381.rdb <span class="comment">#修改rdb文件名</span></span><br></pre></td></tr></table></figure><p>然后分别启动三个Redis服务，通过测试的进程查看信息</p><p><img src="https://s2.loli.net/2023/12/29/cvRKju8d2EDIXNW.png" alt="image-20231229102137451"></p><h3 id="主从复制原理"><a href="#主从复制原理" class="headerlink" title="主从复制原理"></a>主从复制原理</h3><p><strong>默认情况下，每台Redis服务器都是主节点</strong></p><p><img src="https://s2.loli.net/2023/12/29/GtmTxIQEOhDJHgP.png" alt="image-20231229102740030"></p><p>这种时候如何实现的我们的主从复制呢？</p><p>我们一般情况下只需要配置从机即可(主79，从80，从81)</p><p>给从机配置主机：</p><p><img src="https://s2.loli.net/2023/12/29/ngdzvtMaUN2JR7r.png" alt="image-20231229103016628"></p><p>主机有Slave信息</p><p><img src="https://s2.loli.net/2023/12/29/aqsh4MB3roKVkzH.png" alt="image-20231229103128014"></p><p><strong>注：真实的主从配置应该在配置文件中配置，这样的话是永久的，我们这里使用的命令是暂时的</strong></p><p><code>authorize</code>,配置文件配置地点</p><p><img src="https://s2.loli.net/2023/12/29/jSghXOF1oJz2dBn.png" alt="image-20231229104831544"></p><blockquote><p>测试</p></blockquote><p>主机可以写操作，<strong>从机只能读操作</strong></p><p>主机中写的所有数据都会被从机自动保存</p><p>主机写：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k1 v1</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get k1</span><br><span class="line"><span class="string">&quot;v1&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure><p>从机可以读，但是写不了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6380&gt; get k1</span><br><span class="line"><span class="string">&quot;v1&quot;</span></span><br><span class="line">127.0.0.1:6380&gt; <span class="built_in">set</span> k2 v2</span><br><span class="line">(error) READONLY You can<span class="string">&#x27;t write against a read only replica.</span></span><br><span class="line"><span class="string">127.0.0.1:6380&gt; </span></span><br></pre></td></tr></table></figure><p>细节1：</p><p>​这个时候如果主机断开连接，从机依旧可以连接到主机，但是没有写操作，这个时候主机如果回来，从机依旧可以获取主机信息</p><p>细节2：</p><p>​如果是使用命令行配置的主从，如果从机重启就会自动变为主机，但是这时候如果让他又变为从机（例如让80断开然后再连接再设置为79从机），从机也会立马从主机中获取值</p><blockquote><p>复制原理</p></blockquote><p>slave启动成功连接到一个master后会发送一个sync同步命令</p><p>master接受到命令，启动后台的存盘进程，同时收集所有接收到的用于修改数据集命令，在后台进程执行完毕后，master将传送整个数据文件到slave，并完成一次完全同步。<br>全量复制：slave服务在接受到数据库文件数据后，将其存盘并加载到内存中。<br>增量复制：Master继续将所收集到的修改命令一次传给slave，完成同步<br>但是只要是重新连接一次master，全量复制会被自动执行，我们的数据可以在从机中看到</p><h3 id="宕机后手动配置主机"><a href="#宕机后手动配置主机" class="headerlink" title="宕机后手动配置主机"></a>宕机后手动配置主机</h3><p>即做主机又做从机，此时依旧为slave</p><p><img src="https://s2.loli.net/2023/12/29/v5NHcUJXMkWqFRC.png" alt="image-20231229104117834"></p><p>实现一下：</p><p><img src="https://s2.loli.net/2023/12/29/Pd9UvyS43FgmCu6.png" alt="image-20231229104511724"></p><p>查看6080节点信息，依旧为从机</p><p><img src="https://s2.loli.net/2023/12/29/UVm6GdWXAsRHnqJ.png" alt="image-20231229104616977"></p><p>这时候如果主机宕机了，我们手动把79停了，对从机执行一段命令：</p><p>从机操作：<code>slaveof no one</code></p><p>主机宕机：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; shutdown</span><br><span class="line">not connected&gt; <span class="built_in">exit</span></span><br></pre></td></tr></table></figure><p>查看从机状态：</p><p><img src="https://s2.loli.net/2023/12/29/rSnJaFswC9Wfm7M.png" alt="image-20231229105343388"></p><p>这时候从机就变主机了</p><h3 id="哨兵模式"><a href="#哨兵模式" class="headerlink" title="哨兵模式"></a>哨兵模式</h3><p>上面我们是手动配置主机，但是我们希望主机宕机后，从机自动变主机，这时候就需要我们的哨兵模式了。</p><p>主从切换的方法是：当主服务器宕机后，需要手动把一台服务器切换为主服务器，需要人工干预，费时费力，还会造成一段时间内服务器不可用。更多的时候我们考虑的是哨兵模式，redis从2.8开始正式提供了sentinel架构来解决这个问题。<br>谋朝篡位的自动版，能够后台监控主机是否故障，如果故障根据投票数自动将从库转换为主库。<br>哨兵模式是一种特殊的模式，首先redis提供了哨兵命令，哨兵是一个独立的进程，作为进程，他会独立运行，其原理是<strong>哨兵通过发送命令，等待redis服务器响应，从而监控运行的多个redis实例</strong></p><p><img src="https://s2.loli.net/2023/12/29/wxPRGovct298qnY.png" alt="image-20231229105903041"></p><p>哨兵的作用<br>1.通过发送命令，让redis返回其运行状态，包括主服务器和从服务器<br>2.当哨兵检测到master宕机，会自动将slave切换成master，然后通过发布订阅模式通知其他从服务器修改配置文件，让他们切换为主机<br>然而一个哨兵进程对redis服务器进行监控，可能会出现问题，为此，我们可以使用多个哨兵进行监控，各个哨兵相互监控，这样就形成了多哨兵模式。<br><img src="https://s2.loli.net/2023/12/29/w3AoyxcsFzmDYUH.png" alt="image-20231229113058043"></p><p>假设主服务器宕机，哨兵1先检测到这个结果，系统并不会立马进行failover过程，仅仅是哨兵1主观的认为主服务器不可用，这个现象称为主观下线。当后面的哨兵也检测到主服务器不可用，并且达到一定数量，那么哨兵之间会进行一次投票，投票的结果由一个哨兵发起，进行failover（故障转移操作）。q切换成功后，通过发布订阅模式，让各个哨兵把自己的监控的从服务器实现切换主机，这个过称为客观下线</p><blockquote><p>测试</p></blockquote><p>1.配置哨兵的配置文件</p><p>名字不能有问题，回到我们专门的测试服务器位置：</p><p><img src="https://s2.loli.net/2023/12/29/CF8TZwnRX1WNuAY.png" alt="image-20231229113443620"><img src="https://s2.loli.net/2023/12/29/X1MOdjzsUieJCNW.png" alt="image-20231229113416341"></p><p>分析：</p><p>配置哨兵配置文件：</p><p>sentinel.conf:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sentinel monitor myredis 127.0.0.1 6379 1</span><br><span class="line"><span class="comment">#sentinel monitor 被监控的名称 主机 端口 1</span></span><br></pre></td></tr></table></figure><p>后面这个数字1，代表主机挂了，slave投票看让谁替换成主机，就会变为主机。</p><p>2.启动哨兵：</p><p><code>redis-sentinel lddconfig/sentinel.conf</code></p><p>查看哨兵日志：</p><p><img src="https://s2.loli.net/2023/12/29/4lEFmnZrGhBpKax.png" alt="image-20231229114629849"></p><p>这个时候，如果主机突然挂彩了（宕机）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; shutdown</span><br><span class="line">(0.82s)</span><br><span class="line">not connected&gt; </span><br></pre></td></tr></table></figure><p>哨兵回先去检测，然后设置新的主机</p><p><img src="https://s2.loli.net/2023/12/29/WRfBjgakzrKx3qs.png" alt="image-20231229115122542"></p><p>这时候确实把我们的6381作为了新的主机</p><p><img src="https://s2.loli.net/2023/12/29/kAOihELelFc4sGo.png" alt="image-20231229115257367"></p><p>假如，主机6379修复好了，他又重新连接回来了</p><p>哨兵日志：</p><p><img src="https://s2.loli.net/2023/12/29/iEv5z2aL4qjwcm9.png" alt="image-20231229115455471"></p><p>这时候就算原主机回来了，也会被归并到新的主机6381下，这就是哨兵模式的规则</p><blockquote><p>哨兵优缺点</p></blockquote><p>优点：<br>1.哨兵集群，基于主从复制模式，所有主从配置的优点他都有<br>2.主从可以切换，故障可以转移，系统可用性会更好<br>3.哨兵模式就是主从模式的升级，手动到自动，更加健壮<br>缺点：<br>1.redis不好在线扩容，集群容量一旦到达上限，在线扩容就十分麻烦<br>2.实现哨兵模式的配置其实是很麻烦的，里面有很多选择</p><blockquote><p>哨兵模式完整配置文件（了解）</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Example sentinel.conf</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 哨兵sentinel实例运行的端口 默认26379</span></span><br><span class="line">port 26379</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 哨兵sentinel的工作目录</span></span><br><span class="line"><span class="built_in">dir</span> /tmp</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 哨兵sentinel监控的redis主节点的 ip port </span></span><br><span class="line"><span class="comment"># master-name  可以自己命名的主节点名字 只能由字母A-z、数字0-9 、这三个字符&quot;.-_&quot;组成。</span></span><br><span class="line"><span class="comment"># quorum 当这些quorum个数sentinel哨兵认为master主节点失联 那么这时 客观上认为主节点失联了</span></span><br><span class="line"><span class="comment"># sentinel monitor &lt;master-name&gt; &lt;ip&gt; &lt;redis-port&gt; &lt;quorum&gt;</span></span><br><span class="line">sentinel monitor mymaster 127.0.0.1 6379 1</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 当在Redis实例中开启了requirepass foobared 授权密码 这样所有连接Redis实例的客户端都要提供密码</span></span><br><span class="line"><span class="comment"># 设置哨兵sentinel 连接主从的密码 注意必须为主从设置一样的验证密码</span></span><br><span class="line"><span class="comment"># sentinel auth-pass &lt;master-name&gt; &lt;password&gt;</span></span><br><span class="line">sentinel auth-pass mymaster MySUPER--secret-0123passw0rd</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 指定多少毫秒之后 主节点没有应答哨兵sentinel 此时 哨兵主观上认为主节点下线 默认30秒</span></span><br><span class="line"><span class="comment"># sentinel down-after-milliseconds &lt;master-name&gt; &lt;milliseconds&gt;</span></span><br><span class="line">sentinel down-after-milliseconds mymaster 30000</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 这个配置项指定了在发生failover主备切换时最多可以有多少个slave同时对新的master进行 同步，</span></span><br><span class="line"><span class="comment"># 这个数字越小，完成failover所需的时间就越长，</span></span><br><span class="line"><span class="comment"># 但是如果这个数字越大，就意味着越 多的slave因为replication而不可用。</span></span><br><span class="line"><span class="comment"># 可以通过将这个值设为 1 来保证每次只有一个slave 处于不能处理命令请求的状态。</span></span><br><span class="line"><span class="comment"># sentinel parallel-syncs &lt;master-name&gt; &lt;numslaves&gt;</span></span><br><span class="line">sentinel parallel-syncs mymaster 1</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 故障转移的超时时间 failover-timeout 可以用在以下这些方面： </span></span><br><span class="line"><span class="comment">#1. 同一个sentinel对同一个master两次failover之间的间隔时间。</span></span><br><span class="line"><span class="comment">#2. 当一个slave从一个错误的master那里同步数据开始计算时间。直到slave被纠正为向正确的master那里同步数据时。</span></span><br><span class="line"><span class="comment">#3.当想要取消一个正在进行的failover所需要的时间。  </span></span><br><span class="line"><span class="comment">#4.当进行failover时，配置所有slaves指向新的master所需的最大时间。不过，即使过了这个超时，slaves依然会被正确配置为指向master，但是就不按parallel-syncs所配置的规则来了</span></span><br><span class="line"><span class="comment"># 默认三分钟</span></span><br><span class="line"><span class="comment"># sentinel failover-timeout &lt;master-name&gt; &lt;milliseconds&gt;</span></span><br><span class="line">sentinel failover-timeout mymaster 180000</span><br><span class="line"> </span><br><span class="line"><span class="comment"># SCRIPTS EXECUTION</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#配置当某一事件发生时所需要执行的脚本，可以通过脚本来通知管理员，例如当系统运行不正常时发邮件通知相关人员。</span></span><br><span class="line"><span class="comment">#对于脚本的运行结果有以下规则：</span></span><br><span class="line"><span class="comment">#若脚本执行后返回1，那么该脚本稍后将会被再次执行，重复次数目前默认为10</span></span><br><span class="line"><span class="comment">#若脚本执行后返回2，或者比2更高的一个返回值，脚本将不会重复执行。</span></span><br><span class="line"><span class="comment">#如果脚本在执行过程中由于收到系统中断信号被终止了，则同返回值为1时的行为相同。</span></span><br><span class="line"><span class="comment">#一个脚本的最大执行时间为60s，如果超过这个时间，脚本将会被一个SIGKILL信号终止，之后重新执行。</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#通知型脚本:当sentinel有任何警告级别的事件发生时（比如说redis实例的主观失效和客观失效等等），将会去调用这个脚本，</span></span><br><span class="line"><span class="comment">#这时这个脚本应该通过邮件，SMS等方式去通知系统管理员关于系统不正常运行的信息。调用该脚本时，将传给脚本两个参数，</span></span><br><span class="line"><span class="comment">#一个是事件的类型，</span></span><br><span class="line"><span class="comment">#一个是事件的描述。</span></span><br><span class="line"><span class="comment">#如果sentinel.conf配置文件中配置了这个脚本路径，那么必须保证这个脚本存在于这个路径，并且是可执行的，否则sentinel无法正常启动成功。</span></span><br><span class="line"><span class="comment">#通知脚本</span></span><br><span class="line"><span class="comment"># sentinel notification-script &lt;master-name&gt; &lt;script-path&gt;</span></span><br><span class="line">  sentinel notification-script mymaster /var/redis/notify.sh</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 客户端重新配置主节点参数脚本</span></span><br><span class="line"><span class="comment"># 当一个master由于failover而发生改变时，这个脚本将会被调用，通知相关的客户端关于master地址已经发生改变的信息。</span></span><br><span class="line"><span class="comment"># 以下参数将会在调用脚本时传给脚本:</span></span><br><span class="line"><span class="comment"># &lt;master-name&gt; &lt;role&gt; &lt;state&gt; &lt;from-ip&gt; &lt;from-port&gt; &lt;to-ip&gt; &lt;to-port&gt;</span></span><br><span class="line"><span class="comment"># 目前&lt;state&gt;总是“failover”,</span></span><br><span class="line"><span class="comment"># &lt;role&gt;是“leader”或者“observer”中的一个。 </span></span><br><span class="line"><span class="comment"># 参数 from-ip, from-port, to-ip, to-port是用来和旧的master和新的master(即旧的slave)通信的</span></span><br><span class="line"><span class="comment"># 这个脚本应该是通用的，能被多次调用，不是针对性的。</span></span><br><span class="line"><span class="comment"># sentinel client-reconfig-script &lt;master-name&gt; &lt;script-path&gt;</span></span><br><span class="line">sentinel client-reconfig-script mymaster /var/redis/reconfig.sh</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Redis缓存穿透和雪崩"><a href="#Redis缓存穿透和雪崩" class="headerlink" title="Redis缓存穿透和雪崩"></a>Redis缓存穿透和雪崩</h2><p>Redis缓存的使用，极大的提升了应用程序的性能和效率，特别是数据查询方面。但同时，它也带来了一些问题，其中，最要害的问题，就是数据的一致性问题，从严格意义上讲，这个问题无解。如果对数据一致性要求很好，那么就不适用缓存。</p><p>另外的一些典型问题就是，缓存穿透、缓存雪崩和缓存击穿。目前，都有很多比较流行的解决方式。</p><h3 id="缓存穿透："><a href="#缓存穿透：" class="headerlink" title="缓存穿透："></a>缓存穿透：</h3><blockquote><p>概念</p></blockquote><p>​缓存穿透的概念很简单，用户想要查询一个数据，发现Redis内存数据库没有，也就是缓存没有命中，于是向持久层数据库查询。发现也没有，于是本次查询失败，当用户很多的时候，缓存都没有命中（秒杀！），就是都去请求了持久层数据库。这就会给持久层数据库造成大压力，这时候就相当于出现了缓存穿透。</p><p><img src="https://s2.loli.net/2023/12/29/xNr9duvjJOcGLSM.png" alt="image-20231229144243643"></p><blockquote><p><strong>解决方案：</strong></p></blockquote><p>布隆过滤器：</p><p>布隆过滤器是一种数据结构，对所有可能查询的参数以hash形式存储，现在控制层进行校验，不符合规则丢弃，从而避免了对底层存储系统的查询压力</p><p><img src="https://s2.loli.net/2023/12/29/Dm2NdTSoMnyXRO1.png" alt="image-20231229145018014"></p><p>缓存空对象<br>当存储层不命中后，即使返回空对象也将其缓存起来，同时会设置一个过期时间，之后在访问这个数据将会从缓存中获取，保护了后端的数据源<br>但是这个方法存在两个问题<br>1.如果空值能被缓存下来，这就意味着缓存需要更多的空间存储更多的键，因为这个当中可能会有很多的空值和键<br>2.即使对空值设置了过期时间，还会存在缓存层和存储层的数据会有一段时间窗口不一致，这对于需要保持一致性的业务会有影响</p><h3 id="缓存击穿："><a href="#缓存击穿：" class="headerlink" title="缓存击穿："></a>缓存击穿：</h3><blockquote><p>概念</p></blockquote><p>缓存击穿是指一个key非常热点，不停的扛着大量并发，大并发集中对这个点进行访问，当key在这个瞬间失效，持续的大并发就穿破缓存，直接请求数据库，就像在一个屏障上凿开了一个洞。<br>当某个key在过期的瞬间，有大量请求并发访问，这类数据一般是热点数据，由于缓存过期，会同时访问数据库来查询最新的数据，并且回写缓存，会导致数据库压力瞬间过大。</p><blockquote><p>解决方案：</p></blockquote><p><strong>设置热点数据永不过期</strong></p><p>从缓存层来看，没有设置过期事件，所以不会出现热点key过期后产生的问题。</p><p><strong>加互斥锁</strong></p><p>分布式锁：使用分布式锁，保证对于每个key同时只有一个线程去查询后端服务，其他线程没有活动分布式锁的权限，因此只需要等待即可。这种方式将高并发的压力转移到了分布式锁，因此对分布式锁的考验极大。</p><h3 id="缓存雪崩："><a href="#缓存雪崩：" class="headerlink" title="缓存雪崩："></a>缓存雪崩：</h3><blockquote><p>概念</p></blockquote><p>缓存雪崩，是指在某一个时间段，缓存几种过期失效，Redis宕机！</p><p>产生雪崩的原因之一，比如写文本时，马上就要到双十二零点，很快就迎来一波抢购，这波商品比较集中的放入了缓存假设缓存缓存一个小时。到凌晨一点钟，这批商品的缓存就都过期了。而对于这批商品的查询访问都落到数据库上，数据库产生周期性的压力波值。于是所有的请求都会达到存储层，存储层的调用量就会爆增，造成存储器也会挂掉的情况。</p><p>其实集中过期不是最致命的，比较致命的缓存雪崩是缓存服务器某个节点宕机或者断网。因为自然原因形成的缓存雪崩，一定是在某个时间段集中创建缓存，这个时候数据库也会顶住压力，无非是对数据库产生周期性的压力而已。而缓存服务节点的宕机，对数据库服务器造成的压力是不可预知的，很有可能瞬间就把数据库压垮。<br>双十一：停到一些服务。如退款（保证主要服务可用）</p><blockquote><p>解决方案</p></blockquote><p><strong>Redis高可用</strong></p><p>这个思想的含义是：既然Redis有可能挂掉，那我多增设几台服务器，这样一台挂掉之后其他的还可以继续工作，其实就是搭建的集群（异地多活）</p><p><strong>限流降级</strong>（SpringCloud）</p><p>这个解决方案的思想是：在缓存失效后，通过加锁或者队列来控制读取数据库写缓存的线程数量。比如对某个key只允许一个线程查询数据和写缓存，其他线程等待。</p><p><strong>数据预热</strong></p><p>数据预热的含义就是在正式部署之前，我先把可能的数据线预先访问一遍，这样部分可能大量访问的数据就会加载到缓存中，在即将发生大并发前手动触发加载缓存不同的key，设置不同的过期时间，然缓存失效的事件点尽量均匀。</p><p>这里对于缓存穿透和击穿，还有缓存雪崩只做简单了解，后面补齐详细的东西。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Reids进阶&quot;&gt;&lt;a href=&quot;#Reids进阶&quot; class=&quot;headerlink&quot; title=&quot;Reids进阶&quot;&gt;&lt;/a&gt;Reids进阶&lt;/h1&gt;&lt;h2 id=&quot;Redis-conf-配置&quot;&gt;&lt;a href=&quot;#Redis-conf-配置&quot; class</summary>
      
    
    
    
    <category term="框架" scheme="https://humbledong.github.io/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
    <category term="Redis" scheme="https://humbledong.github.io/tags/Redis/"/>
    
    <category term="RDB" scheme="https://humbledong.github.io/tags/RDB/"/>
    
    <category term="AOF" scheme="https://humbledong.github.io/tags/AOF/"/>
    
  </entry>
  
  <entry>
    <title>Redis基础</title>
    <link href="https://humbledong.github.io/undefined/fe29e710.html"/>
    <id>https://humbledong.github.io/undefined/fe29e710.html</id>
    <published>2023-07-28T10:14:20.000Z</published>
    <updated>2024-01-08T02:48:12.940Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Redis基础"><a href="#Redis基础" class="headerlink" title="Redis基础"></a>Redis基础</h1><h2 id="Nosql概述"><a href="#Nosql概述" class="headerlink" title="Nosql概述"></a>Nosql概述</h2><h3 id="为什么要使用Nosql"><a href="#为什么要使用Nosql" class="headerlink" title="为什么要使用Nosql"></a>为什么要使用Nosql</h3><blockquote><p>1.单机MySQL</p></blockquote><p>早期的网站基本访问量不会太大，单个数据库完全足够。</p><p><img src="https://s2.loli.net/2023/12/15/O4acpqHjKeBPtNv.png" alt="image-20231215111220554"></p><p>网站的瓶颈：</p><p>1、数据量如果太大，一个机器放不下</p><p>2、数据的索引（B+Tree），一个机器的内存也放不下</p><p>3、访问量（读写混合），一个服务器承受不了</p><p>又继续改进</p><p><img src="https://s2.loli.net/2023/12/15/dWTfYh3HZzJ75SO.png" alt="image-20231215111425353"></p><blockquote><p>2.Mecached(缓存)+MySQL+垂直拆分</p></blockquote><p>网站80%的情况都是在读，每次都要去查询数据库的话就很麻烦！所以说我们希望减轻数据的压力，我们可以使用来缓存来保证效率。</p><p>发展过程：优化数据结构和索引–&gt;文件缓存（IO）–&gt;Memcached</p><p><img src="https://s2.loli.net/2023/12/15/MQgbcpq9JtKhUXi.png" alt="image-20231215111501438"></p><blockquote><p>3.分库分表+水平拆分+MySQL集群</p></blockquote><p><img src="https://s2.loli.net/2023/12/15/FD2IgMZdqNUJPG5.png" alt="image-20231215174945656"></p><p>技术和业务在发展的同时，对人的要求也越来越高</p><p>本质：<strong>数据库</strong>(读、写)</p><p>早些年的MyISAM：表锁，十分影响效率！高并发下就会出现严重的问题</p><p>转战InnoDB：行锁</p><blockquote><p>4.现在的年代</p></blockquote><p>如今信息量井喷式增长，各种各样的数据出现(用户定位数据，图片数据等)，大数据的背景下关心型数据库(RDBMS)无法满足大量数据要求。Nosql(<strong>no noly sql</strong>)数据库就跑出来了。</p><p>目前有一个基本的互联网项目：</p><p><img src="https://s2.loli.net/2023/12/15/3KaMnkFPoJCBRyq.png" alt="image-20231215180437667"></p><blockquote><p>为什么要使用NoSQL？</p></blockquote><p>用户的个人信息，社交网络，地理位置。用户自己生产的数据，用户日志等等爆发式增长！</p><p>这时候我们就需要NoSQL数据库，Nosql可以很好的处理以上的情况！</p><h3 id="什么是NoSQL"><a href="#什么是NoSQL" class="headerlink" title="什么是NoSQL"></a>什么是NoSQL</h3><p>NoSQL &#x3D; Not Only SQL（不仅仅是SQL）</p><p>Not Only Structured Query Language</p><p>关系型数据库：列+行，同一个表下数据的结构是一样的。</p><p>非关系型数据库：数据存储没有固定的格式，并且可以进行横向扩展。</p><p>NoSQL泛指非关系型数据库，随着web2.0互联网的诞生，传统的关系型数据库很难对付web2.0时代！尤其是超大规模的高并发的社区，暴露出来很多难以克服的问题，NoSQL在当今大数据环境下发展的十分迅速，Redis是发展最快的。</p><p>NoSQL的特点：<br>1.方便扩展（数据之间没有关系，很好扩展！）</p><p>2.大数据量高性能（NoSQL的缓存记录级，是一种细粒度的缓存，性能会比较高！）</p><p>3.数据类型是多样型的！（不需要事先设计数据库，随取随用）</p><p>4.传统的RDBMS和NoSQL</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">传统的 RDBMS(关系型数据库)</span><br><span class="line">- 结构化组织</span><br><span class="line">- SQL</span><br><span class="line">- 数据和关系都存在单独的表中 row col</span><br><span class="line">- 操作，数据定义语言</span><br><span class="line">- 严格的一致性</span><br><span class="line">- 基础的事务</span><br><span class="line">- ...</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Nosql</span><br><span class="line">- 不仅仅是数据</span><br><span class="line">- 没有固定的查询语言</span><br><span class="line">- 键值对存储，列存储，文档存储，图形数据库（社交关系）</span><br><span class="line">- 最终一致性</span><br><span class="line">- CAP定理和BASE</span><br><span class="line">- 高性能，高可用，高扩展</span><br><span class="line">- ...</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>了解：3V+3高</p></blockquote><p>大数据时代的3V：主要是描述问题的</p><p>1.海量Velume</p><p>2.多样Variety</p><p>3.实时Velocity</p><p>大数据时代的3高：主要是对程序的要求</p><p>1.高并发</p><p>2.高可扩</p><p>3.高性能</p><p>真正在公司中的实践：NoSQL+RDBMS一起使用才是最强的</p><h3 id="NoSQL四大分类"><a href="#NoSQL四大分类" class="headerlink" title="NoSQL四大分类"></a>NoSQL四大分类</h3><blockquote><p>KV键值对</p></blockquote><ul><li>新浪：Redis</li><li>美团：Redis+Tair</li><li>阿里、百度：Redis+Memcache</li></ul><blockquote><p>文档型数据库(bson数据格式)：</p></blockquote><ul><li>MongoDB（掌握）<ul><li>基于分布式文件存储的数据库。C++编写，用于处理大量文件</li><li>MongoDB是RDBMS和NoSQL的中间产品。MongoDB是非关系型数据库中功能最丰富的，NoSQL中最像关系型数据库的数据库。</li></ul></li><li>ConthDB</li></ul><blockquote><p>列存储数据库</p></blockquote><ul><li>HBase（大数据必学）</li><li>分布式文件系统</li></ul><blockquote><p>图关系数据库</p></blockquote><p>用于广告推荐，社交网络</p><ul><li>Neo4j、InfoGrid</li></ul><table><thead><tr><th><strong>分类</strong></th><th><strong>Examples举例</strong></th><th><strong>典型应用场景</strong></th><th><strong>数据模型</strong></th><th><strong>优点</strong></th><th><strong>缺点</strong></th></tr></thead><tbody><tr><td><strong>键值对（key-value）</strong></td><td>Tokyo Cabinet&#x2F;Tyrant, Redis, Voldemort, Oracle BDB</td><td>内容缓存，主要用于处理大量数据的高访问负载，也用于一些日志系统等等。</td><td>Key 指向 Value 的键值对，通常用hash table来实现</td><td>查找速度快</td><td>数据无结构化，通常只被当作字符串或者二进制数据</td></tr><tr><td><strong>列存储数据库</strong></td><td>Cassandra, HBase, Riak</td><td>分布式的文件系统</td><td>以列簇式存储，将同一列数据存在一起</td><td>查找速度快，可扩展性强，更容易进行分布式扩展</td><td>功能相对局限</td></tr><tr><td><strong>文档型数据库</strong></td><td>CouchDB, MongoDb</td><td>Web应用（与Key-Value类似，Value是结构化的，不同的是数据库能够了解Value的内容）</td><td>Key-Value对应的键值对，Value为结构化数据</td><td>数据结构要求不严格，表结构可变，不需要像关系型数据库一样需要预先定义表结构</td><td>查询性能不高，而且缺乏统一的查询语法。</td></tr><tr><td><strong>图形(Graph)数据库</strong></td><td>Neo4J, InfoGrid, Infinite Graph</td><td>社交网络，推荐系统等。专注于构建关系图谱</td><td>图结构</td><td>利用图结构相关算法。比如最短路径寻址，N度关系查找等</td><td>很多时候需要对整个图做计算才能得出需要的信息，而且这种结构不太好做分布式的集群</td></tr></tbody></table><h2 id="Redis入门"><a href="#Redis入门" class="headerlink" title="Redis入门"></a>Redis入门</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><blockquote><p>Redis是什么？</p></blockquote><p>Redis（Remote Dictionary Server )，即远程字典服务。</p><p>是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、<strong>Key-Value数据库</strong>，并提供多种语言的API。</p><p>与memcached一样，为了保证效率，<strong>数据都是缓存在内存中</strong>。区别的是redis会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件，并且在此基础上实现了master-slave(主从)同步。</p><blockquote><p>Redis能干什么</p></blockquote><ol><li>内存存储、持久化，内存是断电即失的，所以需要持久化（RDB、AOF）</li><li>高效率、用于高速缓冲</li><li>发布订阅系统</li><li>地图信息分析</li><li>计时器、计数器(eg：浏览量)</li></ol><p>​  …</p><blockquote><p>特性</p></blockquote><ol><li><p>多样的数据类型</p></li><li><p>持久化</p></li><li><p>集群</p></li><li><p>事务</p><p>…</p></li></ol><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><h4 id="Linux安装"><a href="#Linux安装" class="headerlink" title="Linux安装"></a>Linux安装</h4><p>1.下载安装包！<a href="https://download.redis.io/releases/">Redis所有版本安装包地址</a>– redis-7.2.3.tar.gz</p><p>2.使用xShell工具包Redis的安装包放在opt目录下</p><p><img src="https://s2.loli.net/2023/12/19/ZpTq3jy9tOfrgVv.png" alt="image-20231219145456948"></p><p><img src="https://s2.loli.net/2023/12/19/JBdfPqjrxi6159s.png" alt="image-20231219145520322"></p><p>3.执行解压命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf redis-7.2.3.tar.gz </span><br></pre></td></tr></table></figure><p>4.因为Redis是c++写的，所以安装gcc运行环境。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install gcc-c++</span><br><span class="line"><span class="comment">#检查gcc是否安装成功</span></span><br><span class="line">gcc --version</span><br></pre></td></tr></table></figure><p>5.<strong>进入redis目录</strong>执行<code>make</code>（执行两次make）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-4-7-centos redis-7.2.3]<span class="comment"># make</span></span><br></pre></td></tr></table></figure><p>6.然后执行<code>make install</code></p><p><img src="https://s2.loli.net/2023/12/19/7zwd5fn8BpOe4mX.png" alt="image-20231219150631063"></p><p>7.Redis默认的安装路径为&#x2F;usr&#x2F;local&#x2F;bin</p><p><img src="https://s2.loli.net/2023/12/19/fCwmuoOLDU9gB38.png" alt="image-20231219150831707"></p><p>8.然后把redis配置文件复制一份出来作为我们自己启动Redis使用</p><p><img src="https://s2.loli.net/2023/12/19/Sxsb6pu7cqogvNw.png" alt="image-20231219151320639"></p><p>9.Redis默认不是后台启动的，修改配置文件</p><p>vim redis.conf，进入i模式</p><p><img src="https://s2.loli.net/2023/12/19/iVoeNSPqO81JsRt.png" alt="image-20231219151656606"></p><p><code>:wq</code>退出编辑即可</p><p>10.启动Redis服务</p><p>回到bin目录</p><p><code>redis-server lddconfig/redis.conf </code></p><p><img src="https://s2.loli.net/2023/12/19/tVlPqk98SFCdBy3.png" alt="image-20231219151925168"></p><p>11.客户端连接：</p><p><code>redis-cli -p 6379</code></p><p><img src="https://s2.loli.net/2023/12/19/QqmiKRNHpWCh43A.png" alt="image-20231219152031219"></p><p>这时候就已经连接成功了！</p><p><code>keys *</code>：查看所有的key</p><p>12.查看redis进程是否开启：</p><p><code>ps -ef|grep redis</code></p><p><img src="https://s2.loli.net/2023/12/21/mkDad3LgSIPphJ7.png" alt="image-20231219152415422"></p><p>13.关闭redis</p><p><code>shutdown</code></p><p><img src="https://s2.loli.net/2023/12/19/zsr51Rd28MOPf7H.png" alt="image-20231219152549646"></p><p>再来查看进程</p><p><img src="https://s2.loli.net/2023/12/19/PGySFMhsfJl4L58.png" alt="image-20231219152625334"></p><p>14.后面使用单机多Redis启动集群测试。</p><h3 id="性能测试"><a href="#性能测试" class="headerlink" title="性能测试"></a>性能测试</h3><p>redis-benchmark是一个压力测试工具，官方自带的性能测试工具</p><p>redis-benchmark命令参数：</p><table><thead><tr><th>序号</th><th>选项</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td>-h</td><td>指定服务器主机名</td></tr><tr><td>2</td><td>-p</td><td>指定服务器端口</td></tr><tr><td>3</td><td>-s</td><td>指定服务器socket</td></tr><tr><td>4</td><td>-c</td><td>指定并发连接数</td></tr><tr><td>5</td><td>-n</td><td>指定请求数</td></tr><tr><td>6</td><td>-d</td><td>以字节的形式指定SET&#x2F;GET值的数据大小</td></tr><tr><td>7</td><td>-k</td><td>1&#x3D;keep alive 0&#x3D;reconnect</td></tr><tr><td>8</td><td>-r</td><td>SET&#x2F;GET&#x2F;INCR使用随机key，SADD使用随机值</td></tr><tr><td>9</td><td>-P</td><td>通过管道传输&lt;numreq&gt;请求</td></tr><tr><td>10</td><td>-q</td><td>强制退出redis，仅显示query&#x2F;sec值</td></tr><tr><td>11</td><td>–csv</td><td>以CSV格式输出</td></tr><tr><td>12</td><td>-l</td><td>生成循环，永久执行测试</td></tr><tr><td>13</td><td>-t</td><td>仅运行以逗号分隔的测试命令列表</td></tr><tr><td>14</td><td>-I</td><td>Idle模式。仅打开N个idle连接并等待</td></tr></tbody></table><p>简单测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#测试：100个并发连接 100000请求</span></span><br><span class="line">redis-benchmark -h localhost -p 6379 -c 100 -n 100000</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/12/19/hTUBnq8atN7SQkX.png" alt="image-20231219154646778"></p><h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h3><blockquote><p>Redis默认有16个数据库</p></blockquote><p><img src="https://s2.loli.net/2023/12/19/6QVXFfEUpasOuWJ.png" alt="image-20231219154826961"></p><p>默认使用第0个；</p><p>16个数据库为：DB 0~DB 16</p><p>切换数据库：<code>select [序号]</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; select 3 <span class="comment">#切换数据库</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[3]&gt; dbsize <span class="comment">#查看数据库大小</span></span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line"></span><br><span class="line"><span class="comment">#不同的数据库之间数据是不能互通的，并且dbsize就是根据库中的key的个数</span></span><br><span class="line">127.0.0.1:6379[3]&gt; <span class="built_in">set</span> name ldd </span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[3]&gt; get name</span><br><span class="line"><span class="string">&quot;ldd&quot;</span></span><br><span class="line">127.0.0.1:6379[3]&gt; keys *</span><br><span class="line">1) <span class="string">&quot;name&quot;</span></span><br><span class="line">127.0.0.1:6379[3]&gt; select 0</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get name</span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt; </span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>keys *</code>：查看当前数据库中的所有key</p><p><code>flushdb</code>：清空当前数据库中的键值对</p><p><code>flushall</code>：清空所有数据库的键值对</p><blockquote><p>1.Redis单线程问题</p></blockquote><p>Redis 是一个单线程的应用程序，但这并不意味着 Redis 无法处理并发请求。事实上，Redis 使用事件驱动和非阻塞的 I&#x2F;O 操作来实现高并发性能。</p><p>主要特点包括：</p><ol><li><strong>单线程模型：</strong> Redis 服务器是单线程的，主要用于处理客户端的命令请求。这个单线程负责接收请求、解析请求、执行命令以及返回结果。这种设计使得 Redis 能够避免多线程的复杂性和线程安全性问题。</li><li><strong>事件驱动：</strong> Redis 使用事件驱动模型，通过监听文件描述符（File Descriptors）上的事件，来响应客户端请求、定时任务等。这种方式使得 Redis 在单线程下能够处理大量并发连接。</li><li><strong>非阻塞 I&#x2F;O：</strong> Redis 使用非阻塞的 I&#x2F;O 操作，这意味着它可以在等待某些操作完成的同时，继续处理其他请求。这有助于提高 Redis 的吞吐量和响应速度。</li></ol><p>虽然 Redis 主线程是单线程的，但其并发性能非常强大。在实践中，Redis 能够处理数以千计的并发连接，而不会出现性能瓶颈。此外，Redis 的持久化操作（如 RDB 快照和 AOF 日志）通常会在后台进行，不会阻塞主线程的正常工作。</p><blockquote><p>2.Redis单线程为什么快？</p></blockquote><ol><li><strong>非阻塞 I&#x2F;O 操作：</strong> Redis 使用非阻塞的 I&#x2F;O 操作，这意味着在等待某些操作完成的同时，可以继续处理其他请求。这有助于最大程度地利用 CPU 时间，提高响应速度。</li><li><strong>事件驱动模型：</strong> Redis 使用事件驱动的模型，通过事件循环来监听和处理文件描述符上的事件。这种模型使得 Redis 在单线程下能够高效地处理大量的并发连接，而无需创建和管理多个线程。</li><li><strong>内存存储和高速访问：</strong> Redis 的数据存储在内存中，而不是磁盘上。内存访问速度远远快于磁盘访问速度，这使得 Redis 能够提供非常快速的读写性能。</li><li><strong>单一操作的原子性：</strong> Redis 提供一些原子性的操作，例如原子的 INCR（递增）和 DECR（递减），这些操作可以在单个命令中完成，而无需使用复杂的事务和锁机制。</li><li><strong>数据结构的多样性：</strong> Redis 支持丰富的数据结构，包括字符串、哈希表、列表、集合等。这些数据结构的实现经过优化，能够在单线程下高效地处理不同类型的操作。</li><li><strong>避免锁竞争：</strong> 在多线程环境中，锁的管理和竞争可能导致性能下降。由于 Redis 是单线程的，不存在多线程之间的锁竞争，从而避免了一些潜在的并发性问题。</li></ol><p>需要注意的是，Redis 的单线程性能在特定场景下非常出色，例如读多写少、内存足够等情况。在某些高并发写入场景下，其他基于多线程的数据库系统可能表现更优。因此，Redis 的选择取决于应用的特性和需求。</p><blockquote><p>3.为什么说Reids是多线程的？</p></blockquote><p>实际上，Redis 主线程确实是单线程的。Redis 使用事件循环（event loop）来处理所有的客户端请求，这使得它在单线程下能够高效处理并发连接。虽然 Redis 在某些情况下会使用多线程，但主要的工作仍然由单个线程执行。</p><p>在 Redis 中，有一些特殊的情况可以涉及到多线程：</p><ol><li><strong>主从复制：</strong> 当 Redis 配置为主从模式时，主节点（master）可以通过多个线程向多个从节点（slave）发送复制数据。</li><li><strong>持久化：</strong> Redis 在进行持久化操作（如 RDB 快照和 AOF 日志）时，可能会使用子进程来执行这些任务，而不是直接在主线程中进行。这有助于避免持久化操作对主线程的阻塞。</li></ol><p>虽然 Redis 在上述情况下可能会使用多线程或子进程，但这些并不是处理客户端请求的主要执行线程。主要的 Redis 服务仍然是单线程的，通过事件循环和非阻塞 I&#x2F;O 来处理并发请求。</p><blockquote><p>4.Redis中的I&#x2F;O多路复用</p></blockquote><p>在 Redis 中，I&#x2F;O 多路复用是通过使用事件驱动的方式来实现的，主要通过 <code>select</code>、<code>poll</code>、<code>epoll</code> 或者 <code>kqueue</code> 这些系统调用来监听多个文件描述符（sockets 或者文件等），从而在单个线程内处理多个 I&#x2F;O 操作。</p><p>具体来说，Redis 使用以下两个主要的 I&#x2F;O 多路复用机制：</p><ol><li><strong>select&#x2F;poll&#x2F;epoll&#x2F;kqueue：</strong> 这些是不同操作系统提供的 I&#x2F;O 多路复用机制，Redis 会根据操作系统的不同选择相应的实现。在 Linux 上，通常使用 <code>epoll</code>，而在类 Unix 系统上可能使用 <code>kqueue</code>。这些机制允许一个进程或线程监视多个文件描述符的可读、可写和异常事件，以便及时地响应这些事件而不需要创建多个线程。</li><li><strong>事件驱动模型：</strong> Redis 使用事件驱动的模型，通过事件循环来监听文件描述符上的事件。事件循环是 Redis 单线程模型的核心，它会不断地轮询监听的文件描述符，一旦发现有事件发生，就会触发相应的回调函数来处理这些事件。这种方式能够高效地处理并发连接，而不需要创建多个线程。</li></ol><p>使用 I&#x2F;O 多路复用的优势在于能够在单线程内同时监听多个文件描述符，避免了为每个连接创建一个线程的开销。这种设计适用于 Redis 的主要使用场景，即读多写少的情况。在这种场景下，单线程模型能够更好地利用 CPU 时间，提高系统的吞吐量。</p><h2 id="五大数据类型"><a href="#五大数据类型" class="headerlink" title="五大数据类型"></a>五大数据类型</h2><blockquote><p>Redis-Key</p></blockquote><p>在Redis中，”redis-key”通常指的是存储在Redis数据库中的数据的标识符，也就是键（Key）。Redis是一个键值对存储系统，其中每个值都通过一个唯一的键来标识。</p><p>Redis的键（Key）是一个简单的字节序列，可以包含任何数据。键是用来查找、存储和检索与之关联的值的。在Redis中，键是不同数据类型的基础，例如字符串、哈希、列表、集合等等。</p><p>需要注意的是，Redis键是全局唯一的，因此在同一个数据库中，不同数据类型的键之间可以共存，但相同数据类型的键之间会发生冲突。</p><h3 id="String（字符串）"><a href="#String（字符串）" class="headerlink" title="String（字符串）"></a>String（字符串）</h3><blockquote><p>get、set、exists、append、strlen</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> key1 v1 <span class="comment">#设置值</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get key1<span class="comment">#获得值</span></span><br><span class="line"><span class="string">&quot;v1&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; keys *    <span class="comment">#获得所有的key</span></span><br><span class="line">1) <span class="string">&quot;key1&quot;</span></span><br><span class="line">2) <span class="string">&quot;mystream&quot;</span></span><br><span class="line">3) <span class="string">&quot;counter:__rand_int__&quot;</span></span><br><span class="line">4) <span class="string">&quot;key:__rand_int__&quot;</span></span><br><span class="line">5) <span class="string">&quot;mylist&quot;</span></span><br><span class="line">6) <span class="string">&quot;myhash&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; EXISTS key1 <span class="comment">#判断某一个key是否存在</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; append key1 <span class="string">&quot;hello&quot;</span> <span class="comment">#追加字符串，如果当前key不存在，就相当于set了一个值</span></span><br><span class="line">(<span class="built_in">integer</span>) 7</span><br><span class="line">127.0.0.1:6379&gt; get key1</span><br><span class="line"><span class="string">&quot;v1hello&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; strlen key1  <span class="comment">#获取这个键的值的长度</span></span><br><span class="line">(<span class="built_in">integer</span>) 7</span><br></pre></td></tr></table></figure><blockquote><p>incr、decr、incrby</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> views 0   <span class="comment">#加入初始浏览量为0</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get views</span><br><span class="line"><span class="string">&quot;0&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; incr views   <span class="comment">#incr 自增1</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; get views</span><br><span class="line"><span class="string">&quot;1&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; incr views</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; get views</span><br><span class="line"><span class="string">&quot;2&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; decr views  <span class="comment">#decr 自减1</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; get views</span><br><span class="line"><span class="string">&quot;1&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; incrby views 10  <span class="comment">#incrby 设置步长，指定增量</span></span><br><span class="line">(<span class="built_in">integer</span>) 11</span><br><span class="line">127.0.0.1:6379&gt; get views</span><br><span class="line"><span class="string">&quot;11&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>get range</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; flushdb</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">(empty array)</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> key1 <span class="string">&quot;hello,ldd&quot;</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; getrange key1 6 8   <span class="comment">#截取字符串.索引从0开始[6,9]</span></span><br><span class="line"><span class="string">&quot;ldd&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; setrange key1 6 jfl  <span class="comment">#替换指定位置的字符串</span></span><br><span class="line">(<span class="built_in">integer</span>) 11</span><br><span class="line">127.0.0.1:6379&gt; get key1</span><br><span class="line"><span class="string">&quot;hello,jfldd&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>setex、setnx</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#setex(set with exprire)  设置过期时间</span></span><br><span class="line"><span class="comment">#setnx(set if no exist)  </span></span><br><span class="line">127.0.0.1:6379&gt; setex keys2 20 <span class="string">&quot;hi&quot;</span> <span class="comment">#设置了keys的值为hi，20秒后过期</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; ttl keys2   <span class="comment">#查看剩余过期时间</span></span><br><span class="line">(<span class="built_in">integer</span>) 11</span><br><span class="line">127.0.0.1:6379&gt; ttl keys2  <span class="comment">#如果过期了返回-2</span></span><br><span class="line">(<span class="built_in">integer</span>) -2</span><br><span class="line">127.0.0.1:6379&gt; setnx mykey <span class="string">&quot;redis&quot;</span> <span class="comment">#如果mykey不存在，创建mykey</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) <span class="string">&quot;key1&quot;</span></span><br><span class="line">2) <span class="string">&quot;mykey&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; setnx mykey <span class="string">&quot;MongoDB&quot;</span> <span class="comment">#如果mykey存在，创建失败！</span></span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; get mykey</span><br><span class="line"><span class="string">&quot;redis&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>mset、mget</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; flushdb</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">(empty array)</span><br><span class="line">127.0.0.1:6379&gt; mset k1 v1 k2 v2 k3 v3 <span class="comment">#同时设置多个值</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; mget k1 k2 k3 <span class="comment">#同时获取多个值</span></span><br><span class="line">1) <span class="string">&quot;v1&quot;</span></span><br><span class="line">2) <span class="string">&quot;v2&quot;</span></span><br><span class="line">3) <span class="string">&quot;v3&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; msetnx k1 v1 k4 v4 <span class="comment">#msetnx 是一个原子性的操作，要么一起成功，要么一起失败！</span></span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; get k4</span><br><span class="line">(nil)</span><br></pre></td></tr></table></figure><blockquote><p>拓展</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> user:1 &#123;nmae:ldd,age:21&#125; <span class="comment">#设置一个user对象</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get user:1</span><br><span class="line"><span class="string">&quot;&#123;nmae:ldd,age:21&#125;&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; mset user2:name jfl user2:age 20 <span class="comment">#用mset设置一个user对象</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; mget user2:name user2:age</span><br><span class="line">1) <span class="string">&quot;jfl&quot;</span></span><br><span class="line">2) <span class="string">&quot;20&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#这里的key是一个巧妙的设计 ：user:&#123;id&#125;&#123;filed&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>getset</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; getset db redis   <span class="comment">#先get然后再set</span></span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt; get db   <span class="comment">#如果不存在值，则返回nil</span></span><br><span class="line"><span class="string">&quot;redis&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; getset db mongodb <span class="comment">#如果存在值，获取原来的值，设置新的值</span></span><br><span class="line"><span class="string">&quot;redis&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; get db</span><br><span class="line"><span class="string">&quot;mongodb&quot;</span></span><br></pre></td></tr></table></figure><p>String类似的使用场景：value除了使我们的字符串还可以使我们的数字</p><h3 id="List（列表）"><a href="#List（列表）" class="headerlink" title="List（列表）"></a>List（列表）</h3><p>在Redis里面，我们可以把List玩成，栈，队列，阻塞队列！</p><blockquote><p>LPUSH、LRANGE、rpush</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; flushdb</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">(empty array)</span><br><span class="line">127.0.0.1:6379&gt; LPUSH list one <span class="comment">#将一个值或者值放在列表的头部(左边)</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; LPUSH list two</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; LPUSH list three</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; LRANGE list 0 -1 <span class="comment">#获取List的值</span></span><br><span class="line">1) <span class="string">&quot;three&quot;</span></span><br><span class="line">2) <span class="string">&quot;two&quot;</span></span><br><span class="line">3) <span class="string">&quot;one&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; LRANGE list 0 1 <span class="comment">#可以通过区间获取值</span></span><br><span class="line">1) <span class="string">&quot;three&quot;</span></span><br><span class="line">2) <span class="string">&quot;two&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; rpush list right <span class="comment">#将一个值或者多个值从链表尾部插入(右边)</span></span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br><span class="line">127.0.0.1:6379&gt; LRANGE list 0 -1</span><br><span class="line">1) <span class="string">&quot;three&quot;</span></span><br><span class="line">2) <span class="string">&quot;two&quot;</span></span><br><span class="line">3) <span class="string">&quot;one&quot;</span></span><br><span class="line">4) <span class="string">&quot;right&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>LPOP、rpop(左删除，右删除)</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; LPOP list  <span class="comment">#移除list的第一个元素</span></span><br><span class="line"><span class="string">&quot;three&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; rpop list  <span class="comment">#移除list的最后一个元素</span></span><br><span class="line"><span class="string">&quot;right&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; LRANGE list 0 -1</span><br><span class="line">1) <span class="string">&quot;two&quot;</span></span><br><span class="line">2) <span class="string">&quot;one&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>LINDEX</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; LINDEX list 0 <span class="comment">#通过下表获得list中的某一个值</span></span><br><span class="line"><span class="string">&quot;two&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; LINDEX list 1</span><br><span class="line"><span class="string">&quot;one&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>LLEN（查看list的大小）</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; flushdb</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; lpush list one</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; lpush list two</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; lpush list three</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; LLEN list   <span class="comment">#查看list的大小</span></span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br></pre></td></tr></table></figure><blockquote><p>LREM（移除，可以通过索引操作）</p></blockquote><p>列表值可重复</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; LRANGE list 0 -1</span><br><span class="line">1) <span class="string">&quot;three&quot;</span></span><br><span class="line">2) <span class="string">&quot;two&quot;</span></span><br><span class="line">3) <span class="string">&quot;one&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; LPUSH list three</span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br><span class="line">127.0.0.1:6379&gt; LRANGE list 0 -1</span><br><span class="line">1) <span class="string">&quot;three&quot;</span></span><br><span class="line">2) <span class="string">&quot;three&quot;</span></span><br><span class="line">3) <span class="string">&quot;two&quot;</span></span><br><span class="line">4) <span class="string">&quot;one&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; LREM list 1 one <span class="comment">#移除list集合中指定个数的value，精确匹配</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; LRANGE list 0 -1</span><br><span class="line">1) <span class="string">&quot;three&quot;</span></span><br><span class="line">2) <span class="string">&quot;three&quot;</span></span><br><span class="line">3) <span class="string">&quot;two&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; LREM list 2 three</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; LRANGE list 0 -1</span><br><span class="line">1) <span class="string">&quot;two&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>LTRIM（截取）</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; FLUSHDB</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; RPUSH mylist <span class="string">&quot;hello&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; RPUSH mylist <span class="string">&quot;hello1&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; RPUSH mylist <span class="string">&quot;hello2&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; RPUSH mylist <span class="string">&quot;hello3&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br><span class="line">127.0.0.1:6379&gt; LTRIM mylist 1 2   <span class="comment">#通过下标指定的长度，这个list已经被改变了，截断了只剩下截取的元素！</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; LRANGE mylist 0 -1</span><br><span class="line">1) <span class="string">&quot;hello1&quot;</span></span><br><span class="line">2) <span class="string">&quot;hello2&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>rpoplpush</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; flushdb</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; RPUSH mylist <span class="string">&quot;hello&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; RPUSH mylist <span class="string">&quot;hello1&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; RPUSH mylist <span class="string">&quot;hello2&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; rpoplpush mylist myotherlist <span class="comment">#移除列表的最后一个元素将他添加到新的列表中</span></span><br><span class="line"><span class="string">&quot;hello2&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; LRANGE mylist 0 -1</span><br><span class="line">1) <span class="string">&quot;hello&quot;</span></span><br><span class="line">2) <span class="string">&quot;hello1&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; LRANGE myotherlist 0 -1</span><br><span class="line">1) <span class="string">&quot;hello2&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>LSET</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; EXISTS list   <span class="comment">#判断某个key是否存在</span></span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; EXISTS mylist</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; LRANGE mylist 0 -1</span><br><span class="line">1) <span class="string">&quot;hello&quot;</span></span><br><span class="line">2) <span class="string">&quot;hello1&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; LSET mylist 0 item  <span class="comment">#将列表中指定下标的值替换为另外一个值，更新操作。如果不存在这个列表你去更新就会报错</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; LRANGE mylist 0 -1</span><br><span class="line">1) <span class="string">&quot;item&quot;</span></span><br><span class="line">2) <span class="string">&quot;hello1&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>LInsert 在列表的某一元素之前或者之后插入值</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; LRANGE mylist 0 -1</span><br><span class="line">1) <span class="string">&quot;item&quot;</span></span><br><span class="line">2) <span class="string">&quot;hello1&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; LINSERT mylist before item people</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; LRANGE mylist 0 -1</span><br><span class="line">1) <span class="string">&quot;people&quot;</span></span><br><span class="line">2) <span class="string">&quot;item&quot;</span></span><br><span class="line">3) <span class="string">&quot;hello1&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; LINSERT mylist after item p</span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br><span class="line">127.0.0.1:6379&gt; LRANGE mylist 0 -1</span><br><span class="line">1) <span class="string">&quot;people&quot;</span></span><br><span class="line">2) <span class="string">&quot;item&quot;</span></span><br><span class="line">3) <span class="string">&quot;p&quot;</span></span><br><span class="line">4) <span class="string">&quot;hello1&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>小结</p></blockquote><ul><li>它实际上是一个链表，before Node after ，left，right都可以插入值</li><li>如果key不存在，创建新的链表</li><li>如果key存在，新增内容</li><li>如果移除了所有值，空链表，也代表不存在！</li><li>在两边插入或者改动值，效率更高，中间元素，相对来说效率会低一点。</li></ul><p>消息排队，消息队列（Lpush，Lpop），栈(Lpush，Lpop)！</p><h3 id="Set（集合）"><a href="#Set（集合）" class="headerlink" title="Set（集合）"></a>Set（集合）</h3><p>set中的值是不可重读的</p><blockquote><p>sadd、 smembers、sismember(判断某一个值是否在set集合中)</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; flushDb</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; sadd myset <span class="string">&quot;hello&quot;</span> <span class="comment">#set集合中添加元素</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; sadd myset <span class="string">&quot;ldd&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; sadd myset <span class="string">&quot;jfl&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; smembers myset <span class="comment">#查看指定set的所有值</span></span><br><span class="line">1) <span class="string">&quot;hello&quot;</span></span><br><span class="line">2) <span class="string">&quot;ldd&quot;</span></span><br><span class="line">3) <span class="string">&quot;jfl&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; sismember myset hello <span class="comment">#判断某一个值是不是在set集合中</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; sismember myset qaq</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br></pre></td></tr></table></figure><blockquote><p>scard、srem（移除set集合中的指定元素）</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; scard myset    <span class="comment">#查看set集合中元素的个数</span></span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; srem myset hello <span class="comment">#移除set集合中的指定元素</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; scard myset</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; SMEMBERS myset</span><br><span class="line">1) <span class="string">&quot;ldd&quot;</span></span><br><span class="line">2) <span class="string">&quot;jfl&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>SRANDMEMBER（随机抽取出一个元素）</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SRANDMEMBER myset  <span class="comment">#随机抽取出一个元素</span></span><br><span class="line"><span class="string">&quot;jfl&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; SRANDMEMBER myset</span><br><span class="line"><span class="string">&quot;ldd&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; SRANDMEMBER myset 2 <span class="comment">#随机抽取出指定个数的元素，当然我这里就只有两个元素了，也没什么抽的</span></span><br><span class="line">1) <span class="string">&quot;ldd&quot;</span></span><br><span class="line">2) <span class="string">&quot;jfl&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>SPOP（随机删除）</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SMEMBERS myset</span><br><span class="line">1) <span class="string">&quot;ldd&quot;</span></span><br><span class="line">2) <span class="string">&quot;jfl&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; SADD myset yy tt qaq tut</span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br><span class="line">127.0.0.1:6379&gt; smembers myset</span><br><span class="line">1) <span class="string">&quot;ldd&quot;</span></span><br><span class="line">2) <span class="string">&quot;jfl&quot;</span></span><br><span class="line">3) <span class="string">&quot;yy&quot;</span></span><br><span class="line">4) <span class="string">&quot;tt&quot;</span></span><br><span class="line">5) <span class="string">&quot;qaq&quot;</span></span><br><span class="line">6) <span class="string">&quot;tut&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; SPOP myset <span class="comment">#随机删除一个set集合中的元素</span></span><br><span class="line"><span class="string">&quot;tut&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; spop myset</span><br><span class="line"><span class="string">&quot;tt&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; SMEMBERS myset</span><br><span class="line">1) <span class="string">&quot;ldd&quot;</span></span><br><span class="line">2) <span class="string">&quot;jfl&quot;</span></span><br><span class="line">3) <span class="string">&quot;yy&quot;</span></span><br><span class="line">4) <span class="string">&quot;qaq&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>smove（移动）</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SMEMBERS myset</span><br><span class="line">1) <span class="string">&quot;ldd&quot;</span></span><br><span class="line">2) <span class="string">&quot;jfl&quot;</span></span><br><span class="line">3) <span class="string">&quot;yy&quot;</span></span><br><span class="line">4) <span class="string">&quot;qaq&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; smove myset myset2 qaq <span class="comment">#将myset的元素qaq移动到myset2中</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; SMEMBERS myset</span><br><span class="line">1) <span class="string">&quot;ldd&quot;</span></span><br><span class="line">2) <span class="string">&quot;jfl&quot;</span></span><br><span class="line">3) <span class="string">&quot;yy&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; SMEMBERS myset2</span><br><span class="line">1) <span class="string">&quot;qaq&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>sdiff、sinter、sunion(差、交、并集)</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SMEMBERS key1</span><br><span class="line">1) <span class="string">&quot;a&quot;</span></span><br><span class="line">2) <span class="string">&quot;b&quot;</span></span><br><span class="line">3) <span class="string">&quot;c&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; SMEMBERS key2</span><br><span class="line">1) <span class="string">&quot;c&quot;</span></span><br><span class="line">2) <span class="string">&quot;d&quot;</span></span><br><span class="line">3) <span class="string">&quot;e&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; sdiff key1 key2  <span class="comment">#key1对比key2的差集</span></span><br><span class="line">1) <span class="string">&quot;a&quot;</span></span><br><span class="line">2) <span class="string">&quot;b&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; sdiff key2 key1 <span class="comment">#key2对比key1的差集</span></span><br><span class="line">1) <span class="string">&quot;d&quot;</span></span><br><span class="line">2) <span class="string">&quot;e&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; sinter key1 key2 <span class="comment">#key1和key2的交集</span></span><br><span class="line">1) <span class="string">&quot;c&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; sunion key1 key2 <span class="comment">#key1和key2的并集</span></span><br><span class="line">1) <span class="string">&quot;a&quot;</span></span><br><span class="line">2) <span class="string">&quot;b&quot;</span></span><br><span class="line">3) <span class="string">&quot;c&quot;</span></span><br><span class="line">4) <span class="string">&quot;d&quot;</span></span><br><span class="line">5) <span class="string">&quot;e&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Hash（哈希）"><a href="#Hash（哈希）" class="headerlink" title="Hash（哈希）"></a>Hash（哈希）</h3><p>Map集合，key-map!这个时候这个值是一个map集合！本质和String类型没有太大区别，还是一个简单的key-value</p><blockquote><p>hset、hget、hmset、hmget、hgetall、hdel、hlen</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; flushdb</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; hset myhash name ldd <span class="comment">#set一个具体的key -value</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; hget myhash name</span><br><span class="line"><span class="string">&quot;ldd&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; hmset myhash name jfl age 20<span class="comment">#同时设置多个key-value，已经存在的就覆盖</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; hmget myhash name age <span class="comment">#获取多个字段值</span></span><br><span class="line">1) <span class="string">&quot;jfl&quot;</span></span><br><span class="line">2) <span class="string">&quot;20&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; hgetall myhash<span class="comment">#获取全部数据</span></span><br><span class="line">1) <span class="string">&quot;name&quot;</span></span><br><span class="line">2) <span class="string">&quot;jfl&quot;</span></span><br><span class="line">3) <span class="string">&quot;age&quot;</span></span><br><span class="line">4) <span class="string">&quot;20&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; hdel myhash age <span class="comment">#删除指定的key，对应的value就也没了</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; hgetall myhash</span><br><span class="line">1) <span class="string">&quot;name&quot;</span></span><br><span class="line">2) <span class="string">&quot;jfl&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; hlen myhash</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br></pre></td></tr></table></figure><blockquote><p>hexists、hkeys、hvals</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; HGETALL myhash</span><br><span class="line">1) <span class="string">&quot;name&quot;</span></span><br><span class="line">2) <span class="string">&quot;jfl&quot;</span></span><br><span class="line">3) <span class="string">&quot;age&quot;</span></span><br><span class="line">4) <span class="string">&quot;20&quot;</span></span><br><span class="line">5) <span class="string">&quot;gender&quot;</span></span><br><span class="line">6) <span class="string">&quot;boy&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; hlen myhash</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; HEXISTS myhash gender <span class="comment">#判断key中的某个字段是否存在</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; HEXISTS myhash <span class="built_in">id</span></span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; hkeys myhash <span class="comment">#获取所有字段</span></span><br><span class="line">1) <span class="string">&quot;name&quot;</span></span><br><span class="line">2) <span class="string">&quot;age&quot;</span></span><br><span class="line">3) <span class="string">&quot;gender&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; hvals myhash <span class="comment">#获取所有的值</span></span><br><span class="line">1) <span class="string">&quot;jfl&quot;</span></span><br><span class="line">2) <span class="string">&quot;20&quot;</span></span><br><span class="line">3) <span class="string">&quot;boy&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>hincrby、hsetnx</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hincrby myhash age 1 <span class="comment">#增量操作</span></span><br><span class="line">(<span class="built_in">integer</span>) 21</span><br><span class="line">127.0.0.1:6379&gt; HINCRBY myhash age -1</span><br><span class="line">(<span class="built_in">integer</span>) 20</span><br><span class="line">127.0.0.1:6379&gt; hsetnx myhash <span class="built_in">id</span> 1 <span class="comment">#如果不存在则可以设置</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; hsetnx myhash <span class="built_in">id</span> 2 <span class="comment">#如果存在则不可以设置</span></span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br></pre></td></tr></table></figure><h3 id="Zset（有序集合）"><a href="#Zset（有序集合）" class="headerlink" title="Zset（有序集合）"></a>Zset（有序集合）</h3><blockquote><p>zadd、ZRANGE</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; flushdb</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; zadd myzset 1 one <span class="comment">#添加</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; zadd myzset 2 two</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; zadd myzset 3 three 4 four</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; ZRANGE myset 0 -1</span><br><span class="line">(empty array)</span><br><span class="line">127.0.0.1:6379&gt; zrange myzset 0 -1</span><br><span class="line">1) <span class="string">&quot;one&quot;</span></span><br><span class="line">2) <span class="string">&quot;two&quot;</span></span><br><span class="line">3) <span class="string">&quot;three&quot;</span></span><br><span class="line">4) <span class="string">&quot;four&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>ZRANGEBYSCORE(升序)、ZREVRANGE（降序）</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zadd salary 5000 jfl  <span class="comment">#添加三个用户</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; zadd salary 4800 ldd</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; zadd salary 500 xiaoming</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; ZRANGEBYSCORE salary -inf +inf <span class="comment">#从最小值到最大值排序(-inf 负无穷 +inf正无穷)升序排列</span></span><br><span class="line">1) <span class="string">&quot;xiaoming&quot;</span></span><br><span class="line">2) <span class="string">&quot;ldd&quot;</span></span><br><span class="line">3) <span class="string">&quot;jfl&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; ZRANGEBYSCORE salary -inf +inf withscores <span class="comment">#显示全部的用户并且附带成绩</span></span><br><span class="line">1) <span class="string">&quot;xiaoming&quot;</span></span><br><span class="line">2) <span class="string">&quot;500&quot;</span></span><br><span class="line">3) <span class="string">&quot;ldd&quot;</span></span><br><span class="line">4) <span class="string">&quot;4800&quot;</span></span><br><span class="line">5) <span class="string">&quot;jfl&quot;</span></span><br><span class="line">6) <span class="string">&quot;5000&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; ZREVRANGE salary 0 -1 <span class="comment">#降序排序</span></span><br><span class="line">1) <span class="string">&quot;jfl&quot;</span></span><br><span class="line">2) <span class="string">&quot;ldd&quot;</span></span><br><span class="line">3) <span class="string">&quot;xiaoming&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>zcard、ZRANGE、ZCOUNT(获取指定区间的成员数量)</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zcard salary   <span class="comment">#查看key的元素个数</span></span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; ZRANGE salary 0 -1</span><br><span class="line">1) <span class="string">&quot;xiaoming&quot;</span></span><br><span class="line">2) <span class="string">&quot;ldd&quot;</span></span><br><span class="line">3) <span class="string">&quot;jfl&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; ZCOUNT salary 500 4800 <span class="comment">#获取指定区间的成员数量</span></span><br><span class="line">(<span class="built_in">integer</span>) 2  </span><br></pre></td></tr></table></figure><p>其余的API：<a href="https://redis.io/commands/">Commands | Redis</a></p><p><img src="https://s2.loli.net/2023/12/21/USIHbaeGTQXK1vD.png" alt="image-20231221175001472"></p><h2 id="三种特殊的数据类型"><a href="#三种特殊的数据类型" class="headerlink" title="三种特殊的数据类型"></a>三种特殊的数据类型</h2><h3 id="geospatial（地理位置）"><a href="#geospatial（地理位置）" class="headerlink" title="geospatial（地理位置）"></a>geospatial（地理位置）</h3><blockquote><p>geoadd</p></blockquote><p>添加数据：两级无法添加，一般会下载城市数据，直接java导入</p><p>参数：(经度，纬度，名称)</p><ul><li>有效的经度从-180度到180度。</li><li>有效的纬度从-85.05112878度到85.05112878度。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; geoadd china:city 116.40 39.90 beijing</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; geoadd china:city 121.47 31.23 shanghai</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; geoadd china:city 106.50 29.53 chongqing</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; geoadd china:city 114.05 22.52 shenzhen</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; geoadd china:city 120.16 30.24 hangzhou 118.96 34.26 xian</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br></pre></td></tr></table></figure><blockquote><p>geopos</p></blockquote><p>获取当前定位：一定是一个坐标值（一个或者多个）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; geopos china:city beijing</span><br><span class="line">1) 1) <span class="string">&quot;116.39999896287918091&quot;</span></span><br><span class="line">   2) <span class="string">&quot;39.90000009167092543&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; geopos china:city beijing hangzhou</span><br><span class="line">1) 1) <span class="string">&quot;116.39999896287918091&quot;</span></span><br><span class="line">   2) <span class="string">&quot;39.90000009167092543&quot;</span></span><br><span class="line">2) 1) <span class="string">&quot;120.1600000262260437&quot;</span></span><br><span class="line">   2) <span class="string">&quot;30.2400003229490224&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>geodist</p></blockquote><p>返回两个位置的距离，默认以米作为单位</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; geodist china:city beijing shanghai</span><br><span class="line"><span class="string">&quot;1067378.7564&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; geodist china:city beijing shanghai km</span><br><span class="line"><span class="string">&quot;1067.3788&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>georadius</p></blockquote><p>以给定的经纬度为中心，获得附近的人的地址，定位，通过半径来查询</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; georadius china:city 110 30 1000 km <span class="comment">#显示以经度100，纬度30为中心1000km距离的城市</span></span><br><span class="line">1) <span class="string">&quot;chongqing&quot;</span></span><br><span class="line">2) <span class="string">&quot;shenzhen&quot;</span></span><br><span class="line">3) <span class="string">&quot;hangzhou&quot;</span></span><br><span class="line">4) <span class="string">&quot;xian&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; georadius china:city 110 30 300 km</span><br><span class="line">(empty array)</span><br><span class="line">127.0.0.1:6379&gt; georadius china:city 110 30 500 km</span><br><span class="line">1) <span class="string">&quot;chongqing&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; georadius china:city 110 30 500 km withcoord <span class="comment">#显示他人定位信息</span></span><br><span class="line">1) 1) <span class="string">&quot;chongqing&quot;</span></span><br><span class="line">   2) 1) <span class="string">&quot;106.49999767541885376&quot;</span></span><br><span class="line">      2) <span class="string">&quot;29.52999957900659211&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; georadius china:city 110 30 500 km withdist</span><br><span class="line">1) 1) <span class="string">&quot;chongqing&quot;</span>  <span class="comment">#显示距离</span></span><br><span class="line">   2) <span class="string">&quot;341.9374&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; georadius china:city 110 30 1000 km withcoord count 2  <span class="comment">#筛选出指定数量的结果</span></span><br><span class="line">1) 1) <span class="string">&quot;chongqing&quot;</span></span><br><span class="line">   2) 1) <span class="string">&quot;106.49999767541885376&quot;</span></span><br><span class="line">      2) <span class="string">&quot;29.52999957900659211&quot;</span></span><br><span class="line">2) 1) <span class="string">&quot;shenzhen&quot;</span></span><br><span class="line">   2) 1) <span class="string">&quot;114.04999762773513794&quot;</span></span><br><span class="line">      2) <span class="string">&quot;22.5200000879503861&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure><blockquote><p>georadiusbymember</p></blockquote><p>找出指定城市周围的位置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; georadiusbymember china:city beijing 1000 km</span><br><span class="line">1) <span class="string">&quot;xian&quot;</span></span><br><span class="line">2) <span class="string">&quot;beijing&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>geohash</p></blockquote><p>该命令返回长度为11的字符串</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; geohash china:city beijing chongqing</span><br><span class="line">1) <span class="string">&quot;wx4fbxxfke0&quot;</span></span><br><span class="line">2) <span class="string">&quot;wm5xzrybty0&quot;</span> <span class="comment">#将二维的经度转换为一维的字符串，如果字符串越接近，那么距离越近</span></span><br></pre></td></tr></table></figure><p>总结：</p><p><strong>geo底层其实就是Zset(有序集合)，我们可以用zset命令操作geo！</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ZRANGE china:city 0 -1</span><br><span class="line">1) <span class="string">&quot;chongqing&quot;</span></span><br><span class="line">2) <span class="string">&quot;shenzhen&quot;</span></span><br><span class="line">3) <span class="string">&quot;hangzhou&quot;</span></span><br><span class="line">4) <span class="string">&quot;shanghai&quot;</span></span><br><span class="line">5) <span class="string">&quot;xian&quot;</span></span><br><span class="line">6) <span class="string">&quot;beijing&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; zrem china:city beijing</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; zrange china:city 0 -1</span><br><span class="line">1) <span class="string">&quot;chongqing&quot;</span></span><br><span class="line">2) <span class="string">&quot;shenzhen&quot;</span></span><br><span class="line">3) <span class="string">&quot;hangzhou&quot;</span></span><br><span class="line">4) <span class="string">&quot;shanghai&quot;</span></span><br><span class="line">5) <span class="string">&quot;xian&quot;</span></span><br></pre></td></tr></table></figure><h3 id="hyperloglog（基数统计）"><a href="#hyperloglog（基数统计）" class="headerlink" title="hyperloglog（基数统计）"></a>hyperloglog（基数统计）</h3><blockquote><p>基数：</p><p>在数学上，基数或势，即集合中包含的元素的“个数”（参见势的比较），是日常交流中基数的概念在数学上的精确化（并使之不再受限于有限情形）。有限集合的基数，其意义与日常用语中的“基数”相同，例如</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Redis基础&quot;&gt;&lt;a href=&quot;#Redis基础&quot; class=&quot;headerlink&quot; title=&quot;Redis基础&quot;&gt;&lt;/a&gt;Redis基础&lt;/h1&gt;&lt;h2 id=&quot;Nosql概述&quot;&gt;&lt;a href=&quot;#Nosql概述&quot; class=&quot;headerlink</summary>
      
    
    
    
    <category term="框架" scheme="https://humbledong.github.io/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
    <category term="Redis" scheme="https://humbledong.github.io/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Linux基本安装</title>
    <link href="https://humbledong.github.io/undefined/5c455fd5.html"/>
    <id>https://humbledong.github.io/undefined/5c455fd5.html</id>
    <published>2023-07-04T05:14:20.000Z</published>
    <updated>2024-01-07T11:16:54.102Z</updated>
    
    <content type="html"><![CDATA[<h1 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h1><h3 id="jdk安装-rpm安装"><a href="#jdk安装-rpm安装" class="headerlink" title="jdk安装(rpm安装)"></a>jdk安装(rpm安装)</h3><p>1.准备好jdk8的rpm包</p><p>2.检查是否存在jdk，如果有请卸载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看是否有Java环境</span></span><br><span class="line">java -version</span><br><span class="line"><span class="comment">#查看jdk的包</span></span><br><span class="line">rpm -qa|grep jdk</span><br><span class="line"><span class="comment">#查询出来结果</span></span><br><span class="line">jdk1.8.0_121-1.8.0_121-fcs.x86_64</span><br><span class="line"><span class="comment">#卸载 -e --nodeps 强制删除</span></span><br><span class="line">rpm -e --nodeps jdk1.8.0_121-1.8.0_121-fcs.x86_64</span><br><span class="line"><span class="comment">#再执行java -version即可检查</span></span><br></pre></td></tr></table></figure><p>3.安装JDK</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看路径</span></span><br><span class="line">[root@VM-4-7-centos ldd]<span class="comment"># pwd</span></span><br><span class="line">/home/ldd</span><br><span class="line">[root@VM-4-7-centos ldd]<span class="comment"># ls</span></span><br><span class="line">jdk-8u151-linux-x64.rpm</span><br><span class="line"></span><br><span class="line"><span class="comment">#安装命令 -i install安装 -v verify 校验 -h 显示传输进度</span></span><br><span class="line"></span><br><span class="line">[root@VM-4-7-centos ldd]<span class="comment"># rpm -ivh jdk-8u151-linux-x64.rpm </span></span><br><span class="line">Preparing...                          <span class="comment">################################# [100%]</span></span><br><span class="line">Updating / installing...</span><br><span class="line">   1:jdk1.8-2000:1.8.0_151-fcs        <span class="comment">################################# [100%]</span></span><br><span class="line">Unpacking JAR files...</span><br><span class="line">tools.jar...</span><br><span class="line">plugin.jar...</span><br><span class="line">javaws.jar...</span><br><span class="line">deploy.jar...</span><br><span class="line">rt.jar...</span><br><span class="line">jsse.jar...</span><br><span class="line">charsets.jar...</span><br><span class="line">localedata.jar...</span><br><span class="line"></span><br><span class="line"><span class="comment">#到这里就ok了</span></span><br><span class="line">[root@VM-4-7-centos ldd]<span class="comment"># java -version</span></span><br><span class="line">java version <span class="string">&quot;1.8.0_151&quot;</span></span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_151-b12)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.151-b12, mixed mode)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用rpm安装的jdk无需配置环境变量！</p><p>关于环境变量配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装完成后配置环境变量 文件：/etc/profile</span></span><br><span class="line">JAVA_HOME=/usr/java/jdk1.8.0_151</span><br><span class="line">CLASSPATH=%JAVA_HOME%/lib;%JAVA_HOME%/jre/lib</span><br><span class="line">PATH=<span class="variable">$JAVA_HOME</span>/bin;<span class="variable">$JAVA_HOME</span>/jre/bin</span><br><span class="line"><span class="built_in">export</span> PATH CLASSPATH JAVA_HOME</span><br><span class="line"><span class="comment"># 保存退出</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 让新增的环境变量生效！</span></span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试 java -version</span></span><br><span class="line">[root@kuangshen java]<span class="comment"># java -version</span></span><br><span class="line">java version <span class="string">&quot;1.8.0_151&quot;</span></span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_151)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.221-b11, mixed mode)</span><br></pre></td></tr></table></figure><p>尝试发布SpringBoot项目（jar包即可）</p><p>因为涉及到数据库，所以不展示了！</p><p>后面学了Docker就来把数据库在服务器中装上</p><h3 id="Tomcat安装-解压缩安装"><a href="#Tomcat安装-解压缩安装" class="headerlink" title="Tomcat安装(解压缩安装)"></a>Tomcat安装(解压缩安装)</h3><p>1.准备好Tomcat的安装包</p><p>2.解压</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#解压命令</span></span><br><span class="line">[root@VM-4-7-centos ldd]<span class="comment"># tar -zxvf apache-tomcat-9.0.76.tar.gz</span></span><br></pre></td></tr></table></figure><p>3.确保防火墙是开启的并且需要开放8080端口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看firewall服务状态</span></span><br><span class="line">systemctl status firewalld</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启、重启、关闭、firewalld.service服务</span></span><br><span class="line"><span class="comment"># 开启</span></span><br><span class="line">service firewalld start</span><br><span class="line"><span class="comment"># 重启</span></span><br><span class="line">service firewalld restart</span><br><span class="line"><span class="comment"># 关闭</span></span><br><span class="line">service firewalld stop</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看防火墙规则</span></span><br><span class="line">firewall-cmd --list-all    <span class="comment"># 查看全部信息</span></span><br><span class="line">firewall-cmd --list-ports  <span class="comment"># 只看端口信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启端口</span></span><br><span class="line">开端口命令：firewall-cmd --zone=public --add-port=8080/tcp --permanent</span><br><span class="line">重启防火墙：systemctl restart firewalld.service</span><br><span class="line"></span><br><span class="line">命令含义：</span><br><span class="line">--zone <span class="comment">#作用域</span></span><br><span class="line">--add-port=8080/tcp  <span class="comment">#添加端口，格式为：端口/通讯协议</span></span><br><span class="line">--permanent   <span class="comment">#永久生效，没有此参数重启后失效</span></span><br></pre></td></tr></table></figure><p>4.运行Tomcat</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 执行：startup.sh --&gt;启动tomcat</span></span><br><span class="line"><span class="comment"># 执行：shutdown.sh --&gt;关闭tomcat</span></span><br><span class="line">./startup.sh</span><br><span class="line">./shutdown.sh</span><br></pre></td></tr></table></figure><p>输入自己域名访问8080端口即可</p><p><img src="https://s2.loli.net/2023/07/03/Y8gsPqraMGij6Oh.png" alt="image-20230703110816166"></p><h3 id="安装Docker-yum安装"><a href="#安装Docker-yum安装" class="headerlink" title="安装Docker(yum安装)"></a>安装Docker(yum安装)</h3><blockquote><p>基于CentOS 7安装</p></blockquote><p>1.官网：<a href="https://docs.docker.com/install/linux/docker-ce/centos/">https://docs.docker.com/install/linux/docker-ce/centos/</a></p><p>2.查看自己CentOS版本是否没有问题</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看版本的命令</span></span><br><span class="line">[root@VM-4-7-centos ~]<span class="comment">#  cat /etc/redhat-release</span></span><br><span class="line">CentOS Linux release 7.9.2009 (Core)</span><br></pre></td></tr></table></figure><p>3.yum安装gcc(必须联网)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum -y install gcc</span><br><span class="line">yum -y install gcc-c++</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/07/03/xp2gHlnjIFhLtAb.png" alt="image-20230703172711018"></p><p><img src="https://s2.loli.net/2023/07/03/nU6qhxgSlmvzM5N.png" alt="image-20230703172734092"></p><p>4.卸载旧版Docker</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-engine</span><br></pre></td></tr></table></figure><p>5.安装软件包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure><p>6.设置stable镜像仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 正确推荐使用国内的</span></span><br><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><p>7.更新yum软件包索引</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum makecache fast</span><br></pre></td></tr></table></figure><p>8.安装Docker CE</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure><p>9.启动docker</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure><p>10.测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker version</span><br><span class="line"></span><br><span class="line">docker run hello-world</span><br><span class="line"></span><br><span class="line">docker images</span><br></pre></td></tr></table></figure><p>version详情：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-4-7-centos ~]<span class="comment"># docker version</span></span><br><span class="line">Client: Docker Engine - Community</span><br><span class="line"> Version:           24.0.2</span><br><span class="line"> API version:       1.43</span><br><span class="line"> Go version:        go1.20.4</span><br><span class="line"> Git commit:        cb74dfc</span><br><span class="line"> Built:             Thu May 25 21:55:21 2023</span><br><span class="line"> OS/Arch:           linux/amd64</span><br><span class="line"> Context:           default</span><br><span class="line"></span><br><span class="line">Server: Docker Engine - Community</span><br><span class="line"> Engine:</span><br><span class="line">  Version:          24.0.2</span><br><span class="line">  API version:      1.43 (minimum version 1.12)</span><br><span class="line">  Go version:       go1.20.4</span><br><span class="line">  Git commit:       659604f</span><br><span class="line">  Built:            Thu May 25 21:54:24 2023</span><br><span class="line">  OS/Arch:          linux/amd64</span><br><span class="line">  Experimental:     <span class="literal">false</span></span><br><span class="line"> containerd:</span><br><span class="line">  Version:          1.6.21</span><br><span class="line">  GitCommit:        3dce8eb055cbb6872793272b4f20ed16117344f8</span><br><span class="line"> runc:</span><br><span class="line">  Version:          1.1.7</span><br><span class="line">  GitCommit:        v1.1.7-0-g860f061</span><br><span class="line"> docker-init:</span><br><span class="line">  Version:          0.19.0</span><br><span class="line">  GitCommit:        de40ad0</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/07/03/Ecz7yfGkKXP4F8l.png" alt="image-20230703173213945"></p><p>到这里Docker就完全OK了！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;环境安装&quot;&gt;&lt;a href=&quot;#环境安装&quot; class=&quot;headerlink&quot; title=&quot;环境安装&quot;&gt;&lt;/a&gt;环境安装&lt;/h1&gt;&lt;h3 id=&quot;jdk安装-rpm安装&quot;&gt;&lt;a href=&quot;#jdk安装-rpm安装&quot; class=&quot;headerlink&quot; ti</summary>
      
    
    
    
    <category term="Linux" scheme="https://humbledong.github.io/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>Linux基础</title>
    <link href="https://humbledong.github.io/undefined/455e6e94.html"/>
    <id>https://humbledong.github.io/undefined/455e6e94.html</id>
    <published>2023-07-03T04:14:20.000Z</published>
    <updated>2024-01-07T11:17:32.692Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux学习"><a href="#Linux学习" class="headerlink" title="Linux学习"></a>Linux学习</h1><h2 id="1-概述和环境搭建"><a href="#1-概述和环境搭建" class="headerlink" title="1.概述和环境搭建"></a>1.概述和环境搭建</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><img src="https://s2.loli.net/2023/06/27/pLohj7UzvtqYfkJ.png" alt="image-20230627152509957"></p><p>Linux，全称GNU&#x2F;Linux，是一种免费使用和自由传播的<a href="https://baike.baidu.com/item/%E7%B1%BBUNIX/9032872?fromModule=lemma_inlink">类UNIX</a>操作系统，其内核由<a href="https://baike.baidu.com/item/%E6%9E%97%E7%BA%B3%E6%96%AF%C2%B7%E6%9C%AC%E7%BA%B3%E7%AC%AC%E5%85%8B%E7%89%B9%C2%B7%E6%89%98%E7%93%A6%E5%85%B9/1034429?fromModule=lemma_inlink">林纳斯·本纳第克特·托瓦兹</a>（Linus Benedict Torvalds）于1991年10月5日首次发布，它主要受到<a href="https://baike.baidu.com/item/Minix/7106045?fromModule=lemma_inlink">Minix</a>和<a href="https://baike.baidu.com/item/Unix/219943?fromModule=lemma_inlink">Unix</a>思想的启发，是一个基于<a href="https://baike.baidu.com/item/POSIX/3792413?fromModule=lemma_inlink">POSIX</a>的多用户、<a href="https://baike.baidu.com/item/%E5%A4%9A%E4%BB%BB%E5%8A%A1/1011764?fromModule=lemma_inlink">多任务</a>、支持<a href="https://baike.baidu.com/item/%E5%A4%9A%E7%BA%BF%E7%A8%8B/1190404?fromModule=lemma_inlink">多线程</a>和多<a href="https://baike.baidu.com/item/CPU/120556?fromModule=lemma_inlink">CPU</a>的<a href="https://baike.baidu.com/item/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/192?fromModule=lemma_inlink">操作系统</a>。它支持<a href="https://baike.baidu.com/item/32%E4%BD%8D/5812218?fromModule=lemma_inlink">32位</a>和<a href="https://baike.baidu.com/item/64%E4%BD%8D/2262282?fromModule=lemma_inlink">64位</a>硬件，能运行主要的<a href="https://baike.baidu.com/item/Unix/219943?fromModule=lemma_inlink">Unix</a>工具软件、应用程序和网络协议。</p><p>Linux继承了Unix以网络为核心的设计思想，是一个性能稳定的多用户网络操作系统。Linux有上百种不同的发行版，如基于社区开发的<a href="https://baike.baidu.com/item/debian/748667?fromModule=lemma_inlink">debian</a>、<a href="https://baike.baidu.com/item/archlinux/10857530?fromModule=lemma_inlink">archlinux</a>，和基于商业开发的[Red Hat Enterprise Linux](<a href="https://baike.baidu.com/item/Red">https://baike.baidu.com/item/Red</a> Hat Enterprise Linux&#x2F;10770503?fromModule&#x3D;lemma_inlink)、<a href="https://baike.baidu.com/item/SUSE/60409?fromModule=lemma_inlink">SUSE</a>、[Oracle Linux](<a href="https://baike.baidu.com/item/Oracle">https://baike.baidu.com/item/Oracle</a> Linux&#x2F;6876458?fromModule&#x3D;lemma_inlink)等。</p><p>2022年11月20日，Linux 提交了最后一批 drm-intel-next 功能补丁，Linux 6.2将迎来对英特尔锐炫独显的正式支持。</p><h3 id="Linux发行版"><a href="#Linux发行版" class="headerlink" title="Linux发行版"></a>Linux发行版</h3><p>Linux 的发行版说简单点就是将 Linux 内核与应用软件做一个打包。</p><p>目前市面上较知名的发行版有：Ubuntu、RedHat、<strong>CentOS</strong>(我学习时用的)、Debian、Fedora、SuSE、OpenSUSE、Arch Linux、SolusOS 等。</p><h3 id="Linux应用领域"><a href="#Linux应用领域" class="headerlink" title="Linux应用领域"></a>Linux应用领域</h3><p>今天各种场合都有使用各种 Linux 发行版，从嵌入式设备到超级计算机，并且在服务器领域确定了地位，通常服务器使用 LAMP（Linux + Apache + MySQL + PHP）或 LNMP（Linux + Nginx+ MySQL + PHP）组合。</p><p>目前 Linux 不仅在家庭与企业中使用，并且在政府中也很受欢迎。</p><ul><li>巴西联邦政府由于支持 Linux 而世界闻名。</li><li>有新闻报道俄罗斯军队自己制造的 Linux 发布版的，做为 G.H.ost 项目已经取得成果。</li><li>印度的 Kerala 联邦计划在向全联邦的高中推广使用 Linux。</li><li>中华人民共和国为取得技术独立，在龙芯处理器中排他性地使用 Linux。</li><li>在西班牙的一些地区开发了自己的 Linux 发布版，并且在政府与教育领域广泛使用，如 Extremadura 地区的 gnuLinEx 和 Andalusia 地区的 Guadalinex。</li><li>葡萄牙同样使用自己的 Linux 发布版 Caixa Mágica，用于 Magalh?es 笔记本电脑和 e-escola 政府软件。</li><li>法国和德国同样开始逐步采用 Linux。</li></ul><h3 id="对比Windows"><a href="#对比Windows" class="headerlink" title="对比Windows"></a>对比Windows</h3><p>Windows和Linux是目前最为流行的两种操作系统，它们有很多不同之处。下面是它们在一些重要方面的对比：</p><p>用户界面：Windows使用图形用户界面（GUI）来让用户方便地进行日常操作。Linux也可以安装GUI，但通常是基于命令行终端或者类似于Windows中的文件管理器这样的轻量级桌面环境。在服务器场景下，Linux也更倾向于使用无头环境（即无GUI）。</p><p>软件兼容性：Windows上有丰富的商业和非商业软件可用，并且大多数软件都是为Windows设计开发的，这使得 Windows 更加易用、适合普遍用户的需求。而 Linux 软件则 往往是免费并且开源 的，用户可以自由地修改和重新分发它们。虽然越来越多的商业公司已经将自己的软件移植到了 Linux 上，但是兼容性仍然存在限制。</p><p>安全性：Linux通常被认为比Windows更安全，因为Linux开源的内核使得安全专家能够查看和编辑源代码，从而更好地发现并修复漏洞。与此相反，Windows在过去曾经存在很多安全问题，需要不断地发布安全补丁程序进行修复。</p><p>自由度：Linux是自由软件，并且有多个发行版可供选择（例如 Ubuntu，CentOS，Debian和ArchLinux等），用户可以按照自己的需求自由地定制其所使用的操作系统。而Windows只有Microsoft公司发布的官方版本，虽然也有各种不同版本，但自由度相对较低。</p><p>硬件支持：在兼容性方面 Windows 通常具有更优秀的硬件驱动程序支持，因为大多数硬件厂商都会为 Windows 开发驱动程序; Linux 驱动程序则通常是基于社区维护和开发的，因此可能存在硬件与系统的兼容性问题。</p><p>性能：Linux被认为是一个占用资源较少、高效、可靠的操作系统，适合服务器和嵌入式环境等场景。同时，没有类似Windows的杀毒软件这样的程序常驻后台，可以无需消耗额外的系统资源。</p><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>Linux 的安装，安装步骤比较繁琐，现在其实云服务器挺普遍的，价格也便宜，如果直接不想搭建，也可以直接买一台学习用用！</p><h4 id="1-安装CentOS-虚拟机安装，耗费资源"><a href="#1-安装CentOS-虚拟机安装，耗费资源" class="headerlink" title="1.安装CentOS(虚拟机安装，耗费资源)"></a>1.安装CentOS(虚拟机安装，耗费资源)</h4><p>1.通过镜像安装即可</p><p>2.使用VMware虚拟机软件</p><p>3.我使用的是CentOS7(网上都有教学，我也有资源)</p><h4 id="2-云服务器-推荐"><a href="#2-云服务器-推荐" class="headerlink" title="2.云服务器(推荐)"></a>2.云服务器(推荐)</h4><p>注意事项：<br><strong>如果要打开端口，需要在服务器的安全组面板中开启对应的出入规则，不然会被拦截</strong></p><p>下载xShell工具(用于远程连接服务器)</p><p>记得开放22端口</p><p><img src="https://s2.loli.net/2023/06/27/nGNKyvhRDprCJb3.png" alt="image-20230627174221288"></p><p>连接成功如下图</p><p><img src="https://s2.loli.net/2023/06/27/8opyKjVQcRTFkSr.png" alt="image-20230627180223270"></p><p>下载xFtp工具(用于本机和服务器之间的文件传输)</p><p>可以使用宝塔面板操作</p><h2 id="2-走进Linux系统"><a href="#2-走进Linux系统" class="headerlink" title="2.走进Linux系统"></a>2.走进Linux系统</h2><h3 id="开机登录"><a href="#开机登录" class="headerlink" title="开机登录"></a>开机登录</h3><p>开机会启动许多程序。它们在Windows叫做”服务”（service），在Linux就叫做”守护进程”（daemon）。</p><p>开机成功后，它会显示一个文本登录界面，这个界面就是我们经常看到的登录界面，在这个登录界面中会提示用户输入用户名，而用户输入的用户将作为参数传给login程序来验证用户的身份，密码是不显示的，输完回车即可！</p><p>一般来说，用户的登录方式有三种：</p><ul><li>命令行登录</li><li>ssh登录</li><li>图形界面登录</li></ul><p>最高权限账户为 root，可以操作一切！</p><h3 id="关机"><a href="#关机" class="headerlink" title="关机"></a>关机</h3><p>在linux领域内大多用在服务器上，很少遇到关机的操作。毕竟服务器上跑一个服务是永无止境的，除非特殊情况下，不得已才会关机。</p><p>关机指令为：shutdown ；</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">sync # 将数据由内存同步到硬盘中。</span><br><span class="line"></span><br><span class="line">shutdown # 关机指令，你可以man shutdown 来看一下帮助文档。例如你可以运行如下命令关机：</span><br><span class="line"></span><br><span class="line">shutdown –h 10 # 这个命令告诉大家，计算机将在10分钟后关机</span><br><span class="line"></span><br><span class="line">shutdown –h now # 立马关机</span><br><span class="line"></span><br><span class="line">shutdown –h 20:25 # 系统会在今天20:25关机</span><br><span class="line"></span><br><span class="line">shutdown –h +10 # 十分钟后关机</span><br><span class="line"></span><br><span class="line">shutdown –r now # 系统立马重启</span><br><span class="line"></span><br><span class="line">shutdown –r +10 # 系统十分钟后重启</span><br><span class="line"></span><br><span class="line">reboot # 就是重启，等同于 shutdown –r now</span><br><span class="line"></span><br><span class="line">halt # 关闭系统，等同于shutdown –h now 和 poweroff</span><br></pre></td></tr></table></figure><p>最后总结一下，不管是重启系统还是关闭系统，首先要运行 <strong>sync</strong> 命令，把内存中的数据写到磁盘中。</p><h3 id="系统目录结构"><a href="#系统目录结构" class="headerlink" title="系统目录结构"></a>系统目录结构</h3><p>登录系统后，在当前命令窗口下输入命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls /</span><br></pre></td></tr></table></figure><p>你会看到如下图所示：<br><img src="https://s2.loli.net/2023/06/28/PbFN2paAqY7w6In.png" alt="image-20230628084947921"></p><p>树状目录结构：(Linux的一切资源都挂在这个 &#x2F; 根节点下)</p><p><img src="https://s2.loli.net/2023/06/28/wANrJtpWiaodc24.png" alt="image-20230628085218696"></p><p><strong>以下是对这些目录的解释：</strong></p><ul><li><strong>&#x2F;bin</strong>：bin是Binary的缩写, 这个目录存放着最经常使用的命令。</li><li><strong>&#x2F;boot：</strong> 这里存放的是启动Linux时使用的一些核心文件，包括一些连接文件以及镜像文件。</li><li><strong>&#x2F;dev ：</strong> dev是Device(设备)的缩写, 存放的是Linux的外部设备，在Linux中访问设备的方式和访问文件的方式是相同的。</li><li><strong>&#x2F;etc： 这个目录用来存放所有的系统管理所需要的配置文件和子目录。</strong></li><li><strong>&#x2F;home</strong>：用户的主目录，在Linux中，每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的。</li><li><strong>&#x2F;lib</strong>：这个目录里存放着系统最基本的动态连接共享库，其作用类似于Windows里的DLL文件。</li><li><strong>&#x2F;lost+found</strong>：这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件。</li><li><strong>&#x2F;media</strong>：linux系统会自动识别一些设备，例如U盘、光驱等等，当识别后，linux会把识别的设备挂载到这个目录下。</li><li><strong>&#x2F;mnt</strong>：系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将光驱挂载在&#x2F;mnt&#x2F;上，然后进入该目录就可以查看光驱里的内容了。</li><li><strong>&#x2F;opt</strong>：这是给主机额外安装软件所摆放的目录。比如你安装一个ORACLE数据库则就可以放到这个目录下。默认是空的。</li><li><strong>&#x2F;proc</strong>：这个目录是一个虚拟的目录，它是系统内存的映射，我们可以通过直接访问这个目录来获取系统信息。</li><li><strong>&#x2F;root</strong>：该目录为系统管理员，也称作超级权限者的用户主目录。</li><li><strong>&#x2F;sbin</strong>：s就是Super User的意思，这里存放的是系统管理员使用的系统管理程序。</li><li><strong>&#x2F;srv</strong>：该目录存放一些服务启动之后需要提取的数据。</li><li><strong>&#x2F;sys</strong>：这是linux2.6内核的一个很大的变化。该目录下安装了2.6内核中新出现的一个文件系统 sysfs 。</li><li><strong>&#x2F;tmp</strong>：这个目录是用来存放一些临时文件的。</li><li><strong>&#x2F;usr</strong>：这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似于windows下的program files目录。</li><li><strong>&#x2F;usr&#x2F;bin：</strong> 系统用户使用的应用程序。</li><li><strong>&#x2F;usr&#x2F;sbin：</strong> 超级用户使用的比较高级的管理程序和系统守护程序。</li><li><strong>&#x2F;usr&#x2F;src：</strong> 内核源代码默认的放置目录。</li><li><strong>&#x2F;var</strong>：这个目录中存放着在不断扩充着的东西，我们习惯将那些经常被修改的目录放在这个目录下。包括各种日志文件。</li><li><strong>&#x2F;run</strong>：是一个临时文件系统，存储系统启动以来的信息。当系统重启时，这个目录下的文件应该被删掉或清除。</li></ul><h2 id="3-常用的基本命令"><a href="#3-常用的基本命令" class="headerlink" title="3.常用的基本命令"></a>3.常用的基本命令</h2><h3 id="目录管理"><a href="#目录管理" class="headerlink" title="目录管理"></a>目录管理</h3><blockquote><p>相对路径和绝对路径</p></blockquote><p>我们知道Linux的目录结构为树状结构，最顶级的目录为根目录 &#x2F; 。</p><p>其他目录通过挂载可以将它们添加到树中，通过解除挂载可以移除它们。</p><p>首先绝对路径：<br>写法：由&#x2F;写起</p><p>例如：&#x2F;usr&#x2F;share&#x2F;doc这个目录</p><p>相对路径：<br>写法:不是由&#x2F;写起</p><p>例如由 &#x2F;usr&#x2F;share&#x2F;doc 要到 &#x2F;usr&#x2F;share&#x2F;man 底下时，可以写成：cd ..&#x2F;man 这就是相对路径的写法</p><blockquote><p>处理目录的常用命令</p></blockquote><ul><li>ls：列出目录</li><li>cd：切换目录</li><li>pwd：显示目前的目录</li><li>mkdir：创建一个新的目录</li><li>rmdir：删除一个空的目录</li><li>cp: 复制文件或目录</li><li>rm: 移除文件或目录</li><li>mv: 移动文件与目录，或修改文件与目录的名称</li></ul><blockquote><p>ls(列出目录)</p></blockquote><p>在Linux中，ls命令可谓是最常用的命令</p><p>语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-4-7-centos /]<span class="comment"># ls  [-aAdfFhilnrRSt] 目录名称</span></span><br></pre></td></tr></table></figure><p>选项与参数：</p><ul><li>-a ：全部的文件，连同隐藏文件( 开头为 . 的文件) 一起列出来(常用)</li><li>-l ：长数据串列出，包含文件的属性与权限等等数据；(常用)</li></ul><p>将目录下的所有文件列出来(含属性与隐藏档)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-4-7-centos /]<span class="comment"># ls -al ~</span></span><br></pre></td></tr></table></figure><blockquote><p>cd（切换目录）</p></blockquote><p>cd是Change Directory的缩写，这是用来变换工作目录的命令。</p><p>语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> [相对路径或绝对路径]</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-4-7-centos /]<span class="comment"># ls</span></span><br><span class="line">bin   data  etc   lib    lost+found  mnt  patch  root  sbin  sys  usr  www</span><br><span class="line">boot  dev   home  lib64  media       opt  proc   run   srv   tmp  var</span><br><span class="line"><span class="comment">#切换到用户目录下</span></span><br><span class="line">[root@VM-4-7-centos /]<span class="comment"># cd home</span></span><br><span class="line"><span class="comment">#查看当前目录下的文件夹子</span></span><br><span class="line">[root@VM-4-7-centos home]<span class="comment"># ls</span></span><br><span class="line">lighthouse  www</span><br><span class="line"><span class="comment">#使用mkdir命令创建lddstudy目录</span></span><br><span class="line">[root@VM-4-7-centos home]<span class="comment"># mkdir lddstudy</span></span><br><span class="line"><span class="comment">#进入lddstudy目录</span></span><br><span class="line">[root@VM-4-7-centos home]<span class="comment"># cd lddstudy/</span></span><br><span class="line"><span class="comment">#回到上一级</span></span><br><span class="line">[root@VM-4-7-centos lddstudy]<span class="comment"># cd ..</span></span><br><span class="line"><span class="comment">#回到根目录 /</span></span><br><span class="line">[root@VM-4-7-centos home]<span class="comment"># cd /</span></span><br><span class="line"><span class="comment">#表示回到自己的家的目录，即是/root这个目录</span></span><br><span class="line">[root@VM-4-7-centos /]<span class="comment"># cd ~</span></span><br><span class="line"><span class="comment">#查看自己所在目录</span></span><br><span class="line">[root@VM-4-7-centos ~]<span class="comment"># pwd</span></span><br><span class="line">/root</span><br><span class="line">[root@VM-4-7-centos ~]<span class="comment"># </span></span><br></pre></td></tr></table></figure><blockquote><p>pwd（显示目前所在的目录）</p></blockquote><p>pwd 是 <strong>Print Working Directory</strong> 的缩写，也就是显示目前所在目录的命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-4-7-centos ~]<span class="comment"># pwd [-p]</span></span><br></pre></td></tr></table></figure><p>选项与参数：**-P** ：显示出确实的路径，而非使用连接(link) 路径。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># 如果是链接，要显示真实地址，可以使用 -P参数</span><br></pre></td></tr></table></figure><blockquote><p>mkdir (创建新目录)</p></blockquote><p>如果想要创建新的目录的话，那么就使用mkdir (make directory)吧。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> [-mp] 目录名称</span><br></pre></td></tr></table></figure><p>选项与参数：</p><ul><li>-m ：配置文件的权限喔！直接配置，不需要看默认权限 (umask) 的脸色～</li><li>-p ：帮助你直接将所需要的目录(包含上一级目录)递归创建起来！</li></ul><p>测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-4-7-centos home]<span class="comment"># ls</span></span><br><span class="line">lddstudy  lighthouse  www</span><br><span class="line"><span class="comment">#创建一个test1目录</span></span><br><span class="line">[root@VM-4-7-centos home]<span class="comment"># mkdir test1</span></span><br><span class="line"></span><br><span class="line">[root@VM-4-7-centos home]<span class="comment"># ls</span></span><br><span class="line">lddstudy  lighthouse  test1  www</span><br><span class="line"></span><br><span class="line"><span class="comment">#直接创建多层级目录</span></span><br><span class="line">[root@VM-4-7-centos home]<span class="comment"># mkdir test1/test2/test3</span></span><br><span class="line"><span class="built_in">mkdir</span>: cannot create directory ‘test1/test2/test3’: No such file or directory</span><br><span class="line"><span class="comment">#没办法直接创建</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#加一个-p的选项，可以自行帮你创建多层目录</span></span><br><span class="line">[root@VM-4-7-centos home]<span class="comment"># mkdir -p test1/test2/test3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#检查</span></span><br><span class="line">[root@VM-4-7-centos home]<span class="comment"># ls</span></span><br><span class="line">lddstudy  lighthouse  test1  www</span><br><span class="line">[root@VM-4-7-centos home]<span class="comment"># cd test1/</span></span><br><span class="line">[root@VM-4-7-centos test1]<span class="comment"># ls</span></span><br><span class="line">test2</span><br><span class="line">[root@VM-4-7-centos test1]<span class="comment"># cd test2/</span></span><br><span class="line">[root@VM-4-7-centos test2]<span class="comment"># ls</span></span><br><span class="line">test3</span><br><span class="line">[root@VM-4-7-centos test2]<span class="comment"># </span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>rmdir（删除空的目录）</p></blockquote><p>语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rmdir</span> [-p] 目录名称</span><br></pre></td></tr></table></figure><p>选项与参数：**-p ：**连同上一级『空的』目录也一起删除</p><p>测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在test2中直接删除test3是成功的，因为test3是空的</span></span><br><span class="line">[root@VM-4-7-centos test2]<span class="comment"># rmdir test3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#接下来我们回到home目录尝试直接删除test1是失败的，因为test1下还有一个test2</span></span><br><span class="line">[root@VM-4-7-centos test2]<span class="comment"># cd /home/</span></span><br><span class="line">[root@VM-4-7-centos home]<span class="comment"># ls</span></span><br><span class="line">lddstudy  lighthouse  test1  www</span><br><span class="line">[root@VM-4-7-centos home]<span class="comment"># mrdir test1</span></span><br><span class="line">-bash: mrdir: <span class="built_in">command</span> not found</span><br><span class="line">[root@VM-4-7-centos home]<span class="comment"># rmdir test1</span></span><br><span class="line"><span class="built_in">rmdir</span>: failed to remove ‘test1’: Directory not empty</span><br><span class="line"><span class="comment">#加一个-p选项即可删除</span></span><br><span class="line">[root@VM-4-7-centos home]<span class="comment"># rmdir -p test1/test2</span></span><br><span class="line">[root@VM-4-7-centos home]<span class="comment"># ls</span></span><br><span class="line">lddstudy  lighthouse  www</span><br><span class="line">[root@VM-4-7-centos home]<span class="comment"># </span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>注意：这个 rmdir 仅能删除空的目录，你可以使用 rm 命令来删除非空目录</strong></p><blockquote><p>cp（复制文件或者目录）</p></blockquote><p>语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-4-7-centos ~]<span class="comment"># cp [-adfilprsu] 来源档(source) 目标档(destination)</span></span><br><span class="line">[root@VM-4-7-centos ~]<span class="comment"># cp [options] source1 source2 source3 .... directory</span></span><br></pre></td></tr></table></figure><p>选项与参数：</p><ul><li><strong>-a：</strong>相当于 -pdr 的意思，至於 pdr 请参考下列说明；(常用)</li><li><strong>-p：</strong>连同文件的属性一起复制过去，而非使用默认属性(备份常用)；</li><li><strong>-d：</strong>若来源档为连结档的属性(link file)，则复制连结档属性而非文件本身；</li><li><strong>-r：</strong>递归持续复制，用於目录的复制行为；(常用)</li><li><strong>-f：</strong>为强制(force)的意思，若目标文件已经存在且无法开启，则移除后再尝试一次；</li><li><strong>-i：</strong>若目标档(destination)已经存在时，在覆盖时会先询问动作的进行(常用)</li><li><strong>-l：</strong>进行硬式连结(hard link)的连结档创建，而非复制文件本身。</li><li><strong>-s：</strong>复制成为符号连结档 (symbolic link)，亦即『捷径』文件；</li><li><strong>-u：</strong>若 destination 比 source 旧才升级 destination ！</li></ul><p>测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#回到根目录</span></span><br><span class="line">root@VM-4-7-centos home]<span class="comment"># cd /</span></span><br><span class="line">[root@VM-4-7-centos /]<span class="comment"># ls</span></span><br><span class="line">bin   data  etc   lib    lost+found  mnt  patch  root  sbin  sys  usr  www</span><br><span class="line">boot  dev   home  lib64  media       opt  proc   run   srv   tmp  var</span><br><span class="line"><span class="comment">#进入root目录</span></span><br><span class="line">[root@VM-4-7-centos /]<span class="comment"># cd root/</span></span><br><span class="line">[root@VM-4-7-centos ~]<span class="comment"># ls</span></span><br><span class="line">centos7.sh  dnspod.sh         install.sh  txcdn.sh          正在检查事务</span><br><span class="line">cosfs.sh    install_panel.sh  ql          正在处理依赖关系  软件包</span><br><span class="line"></span><br><span class="line"><span class="comment">#我们将install.sh文件复制到/home/lddstudy目录下</span></span><br><span class="line">[root@VM-4-7-centos ~]<span class="comment"># cp install.sh /home/lddstudy</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#检查</span></span><br><span class="line">[root@VM-4-7-centos ~]<span class="comment"># cd /home</span></span><br><span class="line">[root@VM-4-7-centos home]<span class="comment"># ls</span></span><br><span class="line">lddstudy  lighthouse  www</span><br><span class="line">[root@VM-4-7-centos home]<span class="comment"># cd lddstudy</span></span><br><span class="line">[root@VM-4-7-centos lddstudy]<span class="comment"># ls</span></span><br><span class="line">install.sh</span><br><span class="line"></span><br><span class="line"><span class="comment">#继续回到/root目录</span></span><br><span class="line">[root@VM-4-7-centos lddstudy]<span class="comment"># cd /root</span></span><br><span class="line"><span class="comment">#清屏</span></span><br><span class="line">[root@VM-4-7-centos ~]<span class="comment"># clear</span></span><br><span class="line">[root@VM-4-7-centos ~]<span class="comment"># ls</span></span><br><span class="line">centos7.sh  dnspod.sh         install.sh  txcdn.sh          正在检查事务</span><br><span class="line">cosfs.sh    install_panel.sh  ql          正在处理依赖关系  软件包</span><br><span class="line"><span class="comment">#再次复制就会询问是否覆盖复制</span></span><br><span class="line">[root@VM-4-7-centos ~]<span class="comment"># cp install.sh /home/lddstudy</span></span><br><span class="line"><span class="built_in">cp</span>: overwrite ‘/home/lddstudy/install.sh’? y</span><br><span class="line">[root@VM-4-7-centos ~]<span class="comment"># </span></span><br><span class="line"><span class="comment">#y覆盖，n不覆盖</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>rm(移除文件或者目录)</strong></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> [-fir] 文件或目录</span><br></pre></td></tr></table></figure><p>选项与参数：</p><ul><li>-f ：就是 force 的意思，忽略不存在的文件，不会出现警告信息；</li><li>-i ：互动模式，在删除前会询问使用者是否动作</li><li>-r ：递归删除啊！最常用在目录的删除了！这是非常危险的选项！！！</li></ul><p>测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#将刚刚在 cp 的实例中创建的 install.sh删除掉！</span></span><br><span class="line">[root@VM-4-7-centos ~]<span class="comment"># cd /home</span></span><br><span class="line">[root@VM-4-7-centos home]<span class="comment"># ls</span></span><br><span class="line">lddstudy  lighthouse  www</span><br><span class="line">[root@VM-4-7-centos home]<span class="comment"># cd lddstudy/</span></span><br><span class="line">[root@VM-4-7-centos lddstudy]<span class="comment"># ls</span></span><br><span class="line">install.sh</span><br><span class="line">[root@VM-4-7-centos lddstudy]<span class="comment"># rm -i install.sh </span></span><br><span class="line"><span class="built_in">rm</span>: remove regular file ‘install.sh’? y</span><br><span class="line">[root@VM-4-7-centos lddstudy]<span class="comment"># ls</span></span><br><span class="line">[root@VM-4-7-centos lddstudy]<span class="comment"># </span></span><br><span class="line"><span class="comment"># 如果加上 -i 的选项就会主动询问喔，避免你删除到错误的档名！</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 尽量不要在服务器上使用 rm -rf /</span></span><br><span class="line"><span class="comment">#Linux中一切皆文件，使用这个命令根目录下的所有文件都会清空</span></span><br></pre></td></tr></table></figure><blockquote><p>mv (移动文件与目录，或修改名称)</p></blockquote><p>语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-4-7-centos ~]<span class="comment"># mv [-fiu] source destination</span></span><br><span class="line">[root@VM-4-7-centos ~]<span class="comment"># mv [options] source1 source2 source3 .... directory</span></span><br></pre></td></tr></table></figure><p>选项与参数：</p><ul><li>-f ：force 强制的意思，如果目标文件已经存在，不会询问而直接覆盖；</li><li>-i ：若目标文件 (destination) 已经存在时，就会询问是否覆盖！</li><li>-u ：若目标文件已经存在，且 source 比较新，才会升级 (update)</li></ul><p>测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#去复制一个文件到/home/lddstudy/目录</span></span><br><span class="line">[root@VM-4-7-centos home]<span class="comment"># cd /root</span></span><br><span class="line">[root@VM-4-7-centos ~]<span class="comment"># cp install.sh /home/lddstudy/</span></span><br><span class="line">[root@VM-4-7-centos ~]<span class="comment"># cd /home/lddstudy/</span></span><br><span class="line">[root@VM-4-7-centos lddstudy]<span class="comment"># ls</span></span><br><span class="line">install.sh</span><br><span class="line"><span class="comment">#创建一个test目录执行移动操作</span></span><br><span class="line">[root@VM-4-7-centos lddstudy]<span class="comment"># cd ..</span></span><br><span class="line">[root@VM-4-7-centos home]<span class="comment"># mkdir test</span></span><br><span class="line">[root@VM-4-7-centos home]<span class="comment"># cd lddstudy/</span></span><br><span class="line">[root@VM-4-7-centos lddstudy]<span class="comment"># mv install.sh ../test/</span></span><br><span class="line"><span class="comment">#检查</span></span><br><span class="line">[root@VM-4-7-centos lddstudy]<span class="comment"># ls</span></span><br><span class="line">[root@VM-4-7-centos lddstudy]<span class="comment"># cd /home/test/</span></span><br><span class="line">[root@VM-4-7-centos <span class="built_in">test</span>]<span class="comment"># ls</span></span><br><span class="line">install.sh</span><br><span class="line">[root@VM-4-7-centos <span class="built_in">test</span>]<span class="comment"># cd /home</span></span><br><span class="line"><span class="comment">#尝试移动时候的重命名操作</span></span><br><span class="line">[root@VM-4-7-centos home]<span class="comment"># mv lddstudy/ ldd/</span></span><br><span class="line">[root@VM-4-7-centos home]<span class="comment"># ls</span></span><br><span class="line">ldd  lighthouse  <span class="built_in">test</span>  www</span><br><span class="line">[root@VM-4-7-centos home]<span class="comment"># </span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="基本属性"><a href="#基本属性" class="headerlink" title="基本属性"></a>基本属性</h3><blockquote><p>看懂文件属性</p></blockquote><p>Linux系统是一种典型的多用户系统，不同的用户处于不同的地位，拥有不同的权限。为了保护系统的安全性，Linux系统对不同的用户访问同一文件（包括目录文件）的权限做了不同的规定。</p><p>在Linux中我们可以使用<code>ll</code>或者<code>ls –l</code>命令来显示一个文件的属性以及文件所属的用户和组，如：</p><p><img src="https://s2.loli.net/2023/06/28/kh5AozM2P1VSIrJ.png" alt="image-20230628164752898"></p><p>实例中，boot文件的第一个属性用”d”表示。”d”在Linux中代表该文件是一个目录文件。在Linux中第一个字符代表这个文件是目录、文件或链接文件等等：</p><ul><li><strong>当为[ d ]则是目录</strong></li><li><strong>当为[ - ]则是文件；</strong></li><li><strong>若是[ l ]则表示为链接文档 ( link file )；</strong></li><li>若是[ <strong>b</strong> ]则表示为装置文件里面的可供储存的接口设备 ( 可随机存取装置 )；</li><li>若是[ <strong>c</strong> ]则表示为装置文件里面的串行端口设备，例如键盘、鼠标 ( 一次性读取装置 )。</li></ul><p><img src="https://s2.loli.net/2023/06/28/5OUfP3HSQE8spB4.png" alt="image-20230628165056346"></p><p>接下来的字符中，以三个为一组，且均为『rwx』 的三个参数的组合。</p><p>其中，[ r ]代表可读(read)、[ w ]代表可写(write)、[ x ]代表可执行(execute)。</p><p>要注意的是，这三个权限的位置不会改变，如果没有权限，就会出现减号[ - ]而已。</p><p><img src="https://s2.loli.net/2023/06/28/7YCFazfmvGBqWNi.png" alt="image-20230628170608474"></p><p>从左至右用0-9这些数字来表示。</p><p>第0位确定文件类型，第1-3位确定属主（该文件的所有者）拥有该文件的权限。第4-6位确定属组（所有者的同组用户）拥有该文件的权限，第7-9位确定其他用户拥有该文件的权限。</p><p>其中：</p><p>第1、4、7位表示读权限，如果用”r”字符表示，则有读权限，如果用”-“字符表示，则没有读权限；</p><p>第2、5、8位表示写权限，如果用”w”字符表示，则有写权限，如果用”-“字符表示没有写权限；</p><p>第3、6、9位表示可执行权限，如果用”x”字符表示，则有执行权限，如果用”-“字符表示，则没有执行权限。</p><p>对于文件来说，它都有一个特定的所有者，也就是对该文件具有所有权的用户。</p><p>同时，在Linux系统中，用户是按组分类的，一个用户属于一个或多个组。</p><p>文件所有者以外的用户又可以分为文件所有者的同组用户和其他用户。</p><p>因此，Linux系统按文件所有者、文件所有者同组用户和其他用户来规定了不同的文件访问权限。</p><p>在以上实例中，boot 文件是一个目录文件，属主和属组都为 root。</p><blockquote><p>修改文件属性</p></blockquote><ol><li><strong>chgrp:更改文件属组</strong></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chgrp</span> [-R] 属组名 文件名</span><br></pre></td></tr></table></figure><p>-R：递归更改文件属组，就是在更改某个目录文件的属组时，如果加上-R的参数，那么该目录下的所有文件的属组都会更改。</p><ol start="2"><li><p><strong>chown：更改文件属主，也可以同时更改文件属组</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chown [–R] 属主名 文件名</span><br><span class="line">chown [-R] 属主名：属组名 文件名</span><br></pre></td></tr></table></figure></li><li><p><strong>chmod：更改文件9个属性</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod [-R] xyz 文件或目录</span><br></pre></td></tr></table></figure><p>Linux文件属性有两种设置方法，一种是数字，一种是符号。</p><p>Linux文件的基本权限就有九个，分别是owner&#x2F;group&#x2F;others三种身份各有自己的read&#x2F;write&#x2F;execute权限。</p><p>先复习一下刚刚上面提到的数据：文件的权限字符为：『-rwxrwxrwx』， 这九个权限是三个三个一组的！其中，我们可以使用数字来代表各个权限，各权限的分数对照表如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">r:4     w:2         x:1</span><br></pre></td></tr></table></figure><p>每种身份(owner&#x2F;group&#x2F;others)各自的三个权限(r&#x2F;w&#x2F;x)分数是需要累加的，例如当权限为：[-rwxrwx—] 分数则是：</p><ul><li>owner &#x3D; rwx &#x3D; 4+2+1 &#x3D; 7</li><li>group &#x3D; rwx &#x3D; 4+2+1 &#x3D; 7</li><li>others&#x3D; — &#x3D; 0+0+0 &#x3D; 0</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 770 filename</span><br></pre></td></tr></table></figure></li></ol><h3 id="文件内容查看"><a href="#文件内容查看" class="headerlink" title="文件内容查看"></a>文件内容查看</h3><p>Linux系统中使用以下命令来查看文件的内容：</p><ul><li>cat 由第一行开始显示文件内容</li><li>tac 从最后一行开始显示，可以看出 tac 是 cat 的倒着写！</li><li>nl  显示的时候，顺道输出行号！</li><li>more 一页一页的显示文件内容</li><li>less 与 more 类似，但是比 more 更好的是，他可以往前翻页！</li><li>head 只看头几行</li><li>tail 只看尾巴几行</li></ul><p>你可以使用 *man [命令]*来查看各个命令的使用文档，如 ：man cp。</p><blockquote><p>cat   由第一行开始显示文件内容</p></blockquote><p>语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> [-AbEnTv]</span><br></pre></td></tr></table></figure><p>选项与参数：</p><ul><li>-A ：相当於 -vET 的整合选项，可列出一些特殊字符而不是空白而已；</li><li>-b ：列出行号，仅针对非空白行做行号显示，空白行不标行号！</li><li>-E ：将结尾的断行字节 $ 显示出来；</li><li>-n ：列印出行号，连同空白行也会有行号，与 -b 的选项不同；</li><li>-T ：将 [tab] 按键以 ^I 显示出来；</li><li>-v ：列出一些看不出来的特殊字符</li></ul><p>测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看网络配置: 文件地址 /etc/sysconfig/network-scripts/</span></span><br><span class="line">[root@VM-4-7-centos ~]<span class="comment"># cat /etc/sysconfig/network-scripts/ifcfg-eth0</span></span><br><span class="line">DEVICE=eth0</span><br><span class="line">BOOTPROTO=dhcp</span><br><span class="line">ONBOOT=<span class="built_in">yes</span></span><br></pre></td></tr></table></figure><blockquote><p>tac</p></blockquote><p>tac与cat命令刚好相反，文件内容从最后一行开始显示，可以看出 tac 是 cat 的倒着写！</p><blockquote><p>nl  显示行号</p></blockquote><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nl [-bnw] 文件</span><br></pre></td></tr></table></figure><p>选项与参数：</p><ul><li>-b ：指定行号指定的方式，主要有两种：-b a ：表示不论是否为空行，也同样列出行号(类似 cat -n)；-b t ：如果有空行，空的那一行不要列出行号(默认值)；</li><li>-n ：列出行号表示的方法，主要有三种：-n ln ：行号在荧幕的最左方显示；-n rn ：行号在自己栏位的最右方显示，且不加 0 ；-n rz ：行号在自己栏位的最右方显示，且加 0 ；</li><li>-w ：行号栏位的占用的位数。</li></ul><p>测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-4-7-centos ~]<span class="comment"># nl /etc/sysconfig/network-scripts/ifcfg-eth0</span></span><br><span class="line">1DEVICE=eth0</span><br><span class="line">2BOOTPROTO=dhcp</span><br><span class="line">3ONBOOT=<span class="built_in">yes</span></span><br></pre></td></tr></table></figure><blockquote><p>more  一页一页翻动</p></blockquote><p>在 more 这个程序的运行过程中，你有几个按键可以按的：</p><ul><li>空白键 (space)：代表向下翻一页；</li><li>Enter   ：代表向下翻『一行』；</li><li>&#x2F;字串   ：代表在这个显示的内容当中，向下搜寻『字串』这个关键字；</li><li>:f    ：立刻显示出档名以及目前显示的行数；</li><li>q    ：代表立刻离开 more ，不再显示该文件内容。</li><li>b 或 [ctrl]-b ：代表往回翻页，不过这动作只对文件有用，对管线无用。</li></ul><blockquote><p>less 一页一页翻动，以下实例输出&#x2F;etc&#x2F;man.config文件的内容：</p></blockquote><p>less运行时可以输入的命令有：</p><ul><li>空白键  ：向下翻动一页；</li><li>[pagedown]：向下翻动一页；</li><li>[pageup] ：向上翻动一页；</li><li>&#x2F;字串  ：向下搜寻『字串』的功能；</li><li>?字串  ：向上搜寻『字串』的功能；</li><li>n   ：重复前一个搜寻 (与 &#x2F; 或 ? 有关！)</li><li>N   ：反向的重复前一个搜寻 (与 &#x2F; 或 ? 有关！)</li><li>q   ：离开 less 这个程序；</li></ul><blockquote><p>head 取出文件前面几行</p></blockquote><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">head [-n number] 文件</span><br></pre></td></tr></table></figure><p>选项与参数：**-n** 后面接数字，代表显示几行的意思！</p><p>默认的情况中，显示前面 10 行！若要显示前 20 行，就得要这样：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-4-7-centos etc]<span class="comment"># head -n 20 /etc/csh.login</span></span><br></pre></td></tr></table></figure><blockquote><p>tail取出文件后面几行</p></blockquote><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tail [-n number] 文件</span><br></pre></td></tr></table></figure><p>选项与参数：</p><ul><li>-n ：后面接数字，代表显示几行的意思</li></ul><h3 id="拓展：硬链接与软链接"><a href="#拓展：硬链接与软链接" class="headerlink" title="拓展：硬链接与软链接"></a>拓展：硬链接与软链接</h3><p>Linux 链接分两种，一种被称为硬链接（Hard Link），另一种被称为符号链接（Symbolic Link）。</p><p>情况下，<strong>ln</strong> 命令产生硬链接。</p><p><strong>硬连接</strong></p><p>硬连接指通过索引节点来进行连接。在 Linux 的文件系统中，保存在磁盘分区中的文件不管是什么类型都给它分配一个编号，称为索引节点号(Inode Index)。在 Linux 中，多个文件名指向同一索引节点是存在的。比如：A 是 B 的硬链接（A 和 B 都是文件名），则 A 的目录项中的 inode 节点号与 B 的目录项中的 inode 节点号相同，即一个 inode 节点对应两个不同的文件名，两个文件名指向同一个文件，A 和 B 对文件系统来说是完全平等的。删除其中任何一个都不会影响另外一个的访问。</p><p>硬连接的作用是允许一个文件拥有多个有效路径名，这样用户就可以建立硬连接到重要文件，以防止“误删”的功能。其原因如上所述，因为对应该目录的索引节点有一个以上的连接。只删除一个连接并不影响索引节点本身和其它的连接，只有当最后一个连接被删除后，文件的数据块及目录的连接才会被释放。也就是说，文件真正删除的条件是与之相关的所有硬连接文件均被删除。</p><p><strong>软连接</strong></p><p>另外一种连接称之为符号连接（Symbolic Link），也叫软连接。软链接文件有类似于 Windows 的快捷方式。它实际上是一个特殊的文件。在符号连接中，文件实际上是一个文本文件，其中包含的有另一文件的位置信息。比如：A 是 B 的软链接（A 和 B 都是文件名），A 的目录项中的 inode 节点号与 B 的目录项中的 inode 节点号不相同，A 和 B 指向的是两个不同的 inode，继而指向两块不同的数据块。但是 A 的数据块中存放的只是 B 的路径名（可以根据这个找到 B 的目录项）。A 和 B 之间是“主从”关系，如果 B 被删除了，A 仍然存在（因为两个是不同的文件），但指向的是一个无效的链接。</p><p>测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-4-7-centos ~]<span class="comment"># cd /home               #切换到home目录</span></span><br><span class="line">[root@VM-4-7-centos home]<span class="comment"># ls</span></span><br><span class="line">lighthouse  www</span><br><span class="line">[root@VM-4-7-centos home]<span class="comment"># touch f1  #创建一个f1文件</span></span><br><span class="line">[root@VM-4-7-centos home]<span class="comment"># ls</span></span><br><span class="line">f1  lighthouse  www</span><br><span class="line">[root@VM-4-7-centos home]<span class="comment"># ln f1 f2            #创建一个f1的硬链接文件f2</span></span><br><span class="line">[root@VM-4-7-centos home]<span class="comment"># ln -s f1 f3         #创建一个f1的软链接文件f3</span></span><br><span class="line">[root@VM-4-7-centos home]<span class="comment"># ls</span></span><br><span class="line">f1  f2  f3  lighthouse  www</span><br><span class="line">[root@VM-4-7-centos home]<span class="comment"># ls -ll              #可以看到f1和f2都是文件，f3是链接</span></span><br><span class="line">total 8</span><br><span class="line">-rw-r--r-- 2 root       root          0 Jun 30 08:55 f1</span><br><span class="line">-rw-r--r-- 2 root       root          0 Jun 30 08:55 f2</span><br><span class="line">lrwxrwxrwx 1 root       root          2 Jun 30 08:55 f3 -&gt; f1</span><br><span class="line">drwx------ 5 lighthouse lighthouse 4096 Nov  2  2022 lighthouse</span><br><span class="line">drwx------ 2 www        www        4096 Aug 11  2022 www</span><br><span class="line"></span><br><span class="line">[root@VM-4-7-centos home]<span class="comment"># echo &quot;I Love Linux&quot; &gt;&gt;f1  #向文件中写入东西</span></span><br><span class="line"></span><br><span class="line">[root@VM-4-7-centos home]<span class="comment"># cat f1     #查看f1，f2，f3</span></span><br><span class="line">I Love Linux</span><br><span class="line">[root@VM-4-7-centos home]<span class="comment"># cat f2</span></span><br><span class="line">I Love Linux</span><br><span class="line">[root@VM-4-7-centos home]<span class="comment"># cat f3</span></span><br><span class="line">I Love Linux</span><br><span class="line"></span><br><span class="line">[root@VM-4-7-centos home]<span class="comment"># rm -f f1  #删除f1文件</span></span><br><span class="line">[root@VM-4-7-centos home]<span class="comment"># cat f2    #再来查看f2文件和f3文件，可以看到f3文件提示这个文件找不到！</span></span><br><span class="line">I Love Linux</span><br><span class="line">[root@VM-4-7-centos home]<span class="comment"># ls</span></span><br><span class="line">f2  f3  lighthouse  www</span><br><span class="line">[root@VM-4-7-centos home]<span class="comment"># cat f3</span></span><br><span class="line"><span class="built_in">cat</span>: f3: No such file or directory</span><br><span class="line">[root@VM-4-7-centos home]<span class="comment"># </span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/06/30/dWAGtci7mnF1NKE.png" alt="image-20230630090226865"></p><p>通过上面的测试可以看出：当删除原始文件 f1 后，硬连接 f2 不受影响，但是符号连接 f1 文件无效；</p><p>依此您可以做一些相关的测试，可以得到以下全部结论：</p><ul><li>删除符号连接f3,对f1,f2无影响；</li><li>删除硬连接f2，对f1,f3也无影响；</li><li>删除原文件f1，对硬连接f2没有影响，导致符号连接f3失效；</li><li>同时删除原文件f1,硬连接f2，整个文件会真正的被删除。</li></ul><h3 id="Vim编辑器的基本使用"><a href="#Vim编辑器的基本使用" class="headerlink" title="Vim编辑器的基本使用"></a>Vim编辑器的基本使用</h3><h4 id="什么是Vim编辑器"><a href="#什么是Vim编辑器" class="headerlink" title="什么是Vim编辑器"></a>什么是Vim编辑器</h4><p>Vim是从 vi 发展出来的一个文本编辑器。代码补完、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用。</p><p>简单的来说， vi 是老式的字处理器，不过功能已经很齐全了，但是还是有可以进步的地方。</p><p>vim 则可以说是程序开发者的一项很好用的工具。</p><p>所有的 Unix Like 系统都会内建 vi 文书编辑器，其他的文书编辑器则不一定会存在。</p><p>连 vim 的官方网站 (<a href="http://www.vim.org/">http://www.vim.org</a>) 自己也说 vim 是一个程序开发工具而不是文字处理软件。</p><h4 id="三种使用模式"><a href="#三种使用模式" class="headerlink" title="三种使用模式"></a>三种使用模式</h4><p>基本上 vi&#x2F;vim 共分为三种模式，分别是<strong>命令模式（Command mode）</strong>，<strong>输入模式（Insert mode）</strong>和<strong>底线命令模式（Last line mode）</strong>。这三种模式的作用分别是：</p><h5 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h5><p>用户刚刚启动 vi&#x2F;vim，便进入了命令模式。</p><p>此状态下敲击键盘动作会被Vim识别为命令，而非输入字符。比如我们此时按下i，并不会输入一个字符，i被当作了一个命令。</p><p>以下是常用的几个命令：</p><ul><li><strong>i</strong> 切换到输入模式，以输入字符。</li><li><strong>x</strong> 删除当前光标所在处的字符。</li><li><strong>:</strong> 切换到底线命令模式，以在最底一行输入命令。</li></ul><p>若想要编辑文本：启动Vim，进入了命令模式，按下i，切换到输入模式。</p><p>命令模式只有一些最基本的命令，因此仍要依靠底线命令模式输入更多命令。</p><h5 id="输入模式"><a href="#输入模式" class="headerlink" title="输入模式"></a>输入模式</h5><p>在命令模式下按下i就进入了输入模式。</p><p>在输入模式中，可以使用以下按键：</p><ul><li><strong>字符按键以及Shift组合</strong>，输入字符</li><li><strong>ENTER</strong>，回车键，换行</li><li><strong>BACK SPACE</strong>，退格键，删除光标前一个字符</li><li><strong>DEL</strong>，删除键，删除光标后一个字符</li><li><strong>方向键</strong>，在文本中移动光标</li><li><strong>HOME</strong>&#x2F;<strong>END</strong>，移动光标到行首&#x2F;行尾</li><li><strong>Page Up</strong>&#x2F;<strong>Page Down</strong>，上&#x2F;下翻页</li><li><strong>Insert</strong>，切换光标为输入&#x2F;替换模式，光标将变成竖线&#x2F;下划线</li><li><strong>ESC</strong>，退出输入模式，切换到命令模式</li></ul><p><strong>底线命令模式</strong></p><p>在命令模式下按下:（英文冒号）就进入了底线命令模式。</p><p>底线命令模式可以输入单个或多个字符的命令，可用的命令非常多。</p><p>在底线命令模式中，基本的命令有（已经省略了冒号）：</p><ul><li>q 退出程序</li><li>w 保存文件</li></ul><p>按ESC键可随时退出底线命令模式。</p><h4 id="测试："><a href="#测试：" class="headerlink" title="测试："></a>测试：</h4><p>如果你想要使用 vi 来建立一个名为 ldd.txt 的文件时，你可以这样做：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-4-7-centos home]<span class="comment"># vim ldd.txt</span></span><br></pre></td></tr></table></figure><p>然后我们进入文件</p><p><img src="https://s2.loli.net/2023/06/30/muta5CS4zcLlqsd.png" alt="image-20230630182715078"></p><p><strong>按下 i 进入输入模式(也称为编辑模式)，开始编辑文字</strong></p><p>在一般模式之中，只要按下 i, o, a 等字符就可以进入输入模式了！</p><p>在编辑模式当中，你可以发现在左下角状态栏中会出现 –INSERT- 的字样，那就是可以输入任意字符的提示。</p><p>这个时候，键盘上除了 <strong>Esc</strong> 这个按键之外，其他的按键都可以视作为一般的输入按钮了，所以你可以进行任何的编辑。</p><p><img src="https://s2.loli.net/2023/06/30/25RtkWOa3lBbyeL.png" alt="image-20230630182849559"></p><p><strong>按下 ESC 按钮回到一般模式</strong></p><p>好了，假设我已经按照上面的样式给他编辑完毕了，那么应该要如何退出呢？是的！没错！就是给他按下 <strong>Esc</strong> 这个按钮即可！马上你就会发现画面左下角的 – INSERT – 不见了！</p><p>在一般模式中按下 <strong>:wq</strong> 储存后离开 vim！</p><p><img src="https://s2.loli.net/2023/06/30/eHPo1kFhfcyUiE7.png" alt="image-20230630182936821"></p><p>查看：</p><p><img src="https://s2.loli.net/2023/06/30/Guq4HnoC12BKmFT.png" alt="image-20230630183014621"></p><h4 id="Vim按键说明"><a href="#Vim按键说明" class="headerlink" title="Vim按键说明"></a>Vim按键说明</h4><p>除了上面简易范例的 i, Esc, :wq 之外，其实 vim 还有非常多的按键可以使用。</p><p><strong>第一部分：一般模式可用的光标移动、复制粘贴、搜索替换等</strong></p><table><thead><tr><th align="left">移动光标的方法</th><th>说明</th></tr></thead><tbody><tr><td align="left">h 或 向左箭头键(<strong>←</strong>)</td><td>光标向左移动一个字符</td></tr><tr><td align="left">j 或 向下箭头键(<strong>↓</strong>)</td><td>光标向下移动一个字符</td></tr><tr><td align="left">k 或 向上箭头键(↑)</td><td>光标向上移动一个字符</td></tr><tr><td align="left">l 或 向右箭头键(<strong>→</strong>)</td><td>光标向右移动一个字符</td></tr><tr><td align="left">[Ctrl] + [f]</td><td>屏幕『向下』移动一页，相当于 [Page Down]按键 (常用)</td></tr><tr><td align="left">[Ctrl] + [b]</td><td>屏幕『向上』移动一页，相当于 [Page Up] 按键 (常用)</td></tr><tr><td align="left">[Ctrl] + [d]</td><td>屏幕『向下』移动半页</td></tr><tr><td align="left">[Ctrl] + [u]</td><td>屏幕『向上』移动半页</td></tr><tr><td align="left">+</td><td>光标移动到非空格符的下一行</td></tr><tr><td align="left">-</td><td>光标移动到非空格符的上一行</td></tr><tr><td align="left"><strong>n&lt; space&gt;</strong></td><td>那个 n 表示『数字』，例如 20 。按下数字后再按空格键，光标会向右移动这一行的 n 个字符。</td></tr><tr><td align="left">0 或功能键[Home]</td><td>这是数字『 0 』：移动到这一行的最前面字符处 (常用)</td></tr><tr><td align="left">$ 或功能键[End]</td><td>移动到这一行的最后面字符处(常用)</td></tr><tr><td align="left">H</td><td>光标移动到这个屏幕的最上方那一行的第一个字符</td></tr><tr><td align="left">M</td><td>光标移动到这个屏幕的中央那一行的第一个字符</td></tr><tr><td align="left">L</td><td>光标移动到这个屏幕的最下方那一行的第一个字符</td></tr><tr><td align="left">G</td><td>移动到这个档案的最后一行(常用)</td></tr><tr><td align="left">nG</td><td>n 为数字。移动到这个档案的第 n 行。例如 20G 则会移动到这个档案的第 20 行(可配合 :set nu)</td></tr><tr><td align="left">gg</td><td>移动到这个档案的第一行，相当于 1G 啊！(常用)</td></tr><tr><td align="left">n&lt; Enter&gt;</td><td>n 为数字。光标向下移动 n 行(常用)</td></tr></tbody></table><table><thead><tr><th align="left">搜索替换</th><th>说明</th></tr></thead><tbody><tr><td align="left">&#x2F;word</td><td>向光标之下寻找一个名称为 word 的字符串。例如要在档案内搜寻 vbird 这个字符串，就输入 &#x2F;vbird 即可！(常用)</td></tr><tr><td align="left">?word</td><td>向光标之上寻找一个字符串名称为 word 的字符串。</td></tr><tr><td align="left">n</td><td>这个 n 是英文按键。代表重复前一个搜寻的动作。举例来说， 如果刚刚我们执行 &#x2F;vbird 去向下搜寻 vbird 这个字符串，则按下 n 后，会向下继续搜寻下一个名称为 vbird 的字符串。如果是执行 ?vbird 的话，那么按下 n 则会向上继续搜寻名称为 vbird 的字符串！</td></tr><tr><td align="left">N</td><td>这个 N 是英文按键。与 n 刚好相反，为『反向』进行前一个搜寻动作。例如 &#x2F;vbird 后，按下 N 则表示『向上』搜寻 vbird 。</td></tr></tbody></table><table><thead><tr><th align="left">删除、复制与粘贴</th><th>说明</th></tr></thead><tbody><tr><td align="left">x, X</td><td>在一行字当中，x 为向后删除一个字符 (相当于 [del] 按键)， X 为向前删除一个字符(相当于 [backspace] 亦即是退格键) (常用)</td></tr><tr><td align="left">nx</td><td>n 为数字，连续向后删除 n 个字符。举例来说，我要连续删除 10 个字符， 『10x』。</td></tr><tr><td align="left">dd</td><td>删除游标所在的那一整行(常用)</td></tr><tr><td align="left">ndd</td><td>n 为数字。删除光标所在的向下 n 行，例如 20dd 则是删除 20 行 (常用)</td></tr><tr><td align="left">d1G</td><td>删除光标所在到第一行的所有数据</td></tr><tr><td align="left">dG</td><td>删除光标所在到最后一行的所有数据</td></tr><tr><td align="left">d$</td><td>删除游标所在处，到该行的最后一个字符</td></tr><tr><td align="left">d0</td><td>那个是数字的 0 ，删除游标所在处，到该行的最前面一个字符</td></tr><tr><td align="left">yy</td><td>复制游标所在的那一行(常用)</td></tr><tr><td align="left">nyy</td><td>n 为数字。复制光标所在的向下 n 行，例如 20yy 则是复制 20 行(常用)</td></tr><tr><td align="left">y1G</td><td>复制游标所在行到第一行的所有数据</td></tr><tr><td align="left">yG</td><td>复制游标所在行到最后一行的所有数据</td></tr><tr><td align="left">y0</td><td>复制光标所在的那个字符到该行行首的所有数据</td></tr><tr><td align="left">y$</td><td>复制光标所在的那个字符到该行行尾的所有数据</td></tr><tr><td align="left">p, P</td><td>p 为将已复制的数据在光标下一行贴上，P 则为贴在游标上一行！举例来说，我目前光标在第 20 行，且已经复制了 10 行数据。则按下 p 后， 那 10 行数据会贴在原本的 20 行之后，亦即由 21 行开始贴。但如果是按下 P 呢？那么原本的第 20 行会被推到变成 30 行。(常用)</td></tr><tr><td align="left">J</td><td>将光标所在行与下一行的数据结合成同一行</td></tr><tr><td align="left">c</td><td>重复删除多个数据，例如向下删除 10 行，[ 10cj ]</td></tr><tr><td align="left">u</td><td>复原前一个动作。(常用)</td></tr><tr><td align="left">[Ctrl]+r</td><td>重做上一个动作。(常用)</td></tr></tbody></table><p><strong>第二部分：一般模式切换到编辑模式的可用的按钮说明</strong></p><table><thead><tr><th align="left"><strong>进入输入或取代的编辑模式</strong></th><th>说明</th></tr></thead><tbody><tr><td align="left"><strong>i, I</strong></td><td>进入输入模式(Insert mode)：i 为『从目前光标所在处输入』， I 为『在目前所在行的第一个非空格符处开始输入』。(常用)</td></tr><tr><td align="left">a, A</td><td>进入输入模式(Insert mode)：a 为『从目前光标所在的下一个字符处开始输入』， A 为『从光标所在行的最后一个字符处开始输入』。(常用)</td></tr><tr><td align="left">o, O</td><td>进入输入模式(Insert mode)：这是英文字母 o 的大小写。o 为『在目前光标所在的下一行处输入新的一行』；O 为在目前光标所在处的上一行输入新的一行！(常用)</td></tr><tr><td align="left">r, R</td><td>进入取代模式(Replace mode)：r 只会取代光标所在的那一个字符一次；R会一直取代光标所在的文字，直到按下 ESC 为止；(常用)</td></tr><tr><td align="left"><strong>[Esc]</strong></td><td>退出编辑模式，回到一般模式中(常用)</td></tr></tbody></table><p><strong>第三部分：一般模式切换到指令行模式的可用的按钮说明</strong></p><table><thead><tr><th align="left">指令行的储存、离开等指令</th><th>说明</th></tr></thead><tbody><tr><td align="left"><strong>:w</strong></td><td>将编辑的数据写入硬盘档案中(常用)</td></tr><tr><td align="left">:w!</td><td>若文件属性为『只读』时，强制写入该档案。不过，到底能不能写入， 还是跟你对该档案的档案权限有关啊！</td></tr><tr><td align="left"><strong>:q</strong></td><td>离开 vi (常用)</td></tr><tr><td align="left">:q!</td><td>若曾修改过档案，又不想储存，使用 ! 为强制离开不储存档案。</td></tr><tr><td align="left">注意一下啊，那个惊叹号 (!) 在 vi 当中，常常具有『强制』的意思～</td><td></td></tr><tr><td align="left"><strong>:wq</strong></td><td>储存后离开，若为 :wq! 则为强制储存后离开 (常用)</td></tr><tr><td align="left">ZZ</td><td>这是大写的 Z 喔！若档案没有更动，则不储存离开，若档案已经被更动过，则储存后离开！</td></tr><tr><td align="left">:w [filename]</td><td>将编辑的数据储存成另一个档案（类似另存新档）</td></tr><tr><td align="left">:r [filename]</td><td>在编辑的数据中，读入另一个档案的数据。亦即将 『filename』 这个档案内容加到游标所在行后面</td></tr><tr><td align="left">:n1,n2 w [filename]</td><td>将 n1 到 n2 的内容储存成 filename 这个档案。</td></tr><tr><td align="left">:! command</td><td>暂时离开 vi 到指令行模式下执行 command 的显示结果！例如 『:! ls &#x2F;home』即可在 vi 当中看 &#x2F;home 底下以 ls 输出的档案信息！</td></tr><tr><td align="left">:set nu</td><td>显示行号，设定之后，会在每一行的前缀显示该行的行号</td></tr><tr><td align="left">:set nonu</td><td>与 set nu 相反，为取消行号！</td></tr></tbody></table><h2 id="4-账号管理"><a href="#4-账号管理" class="headerlink" title="4.账号管理"></a>4.账号管理</h2><h3 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h3><p>Linux系统是一个多用户多任务的分时操作系统，任何一个要使用系统资源的用户，都必须首先向系统管理员申请一个账号，然后以这个账号的身份进入系统。</p><p>用户的账号一方面可以帮助系统管理员对使用系统的用户进行跟踪，并控制他们对系统资源的访问；另一方面也可以帮助用户组织文件，并为用户提供安全性保护。</p><p>每个用户账号都拥有一个唯一的用户名和各自的口令。</p><p>用户在登录时键入正确的用户名和口令后，就能够进入系统和自己的主目录。</p><p>实现用户账号的管理，要完成的工作主要有如下几个方面：</p><ul><li>用户账号的添加、删除与修改。</li><li>用户口令的管理。</li><li>用户组的管理。</li></ul><h3 id="用户账号的管理"><a href="#用户账号的管理" class="headerlink" title="用户账号的管理"></a>用户账号的管理</h3><p>用户账号的管理工作主要涉及到用户账号的添加、修改和删除。</p><p>添加用户账号就是在系统中创建一个新账号，然后为新账号分配用户号、用户组、主目录和登录Shell等资源。</p><blockquote><p>添加账号useradd</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useradd 选项 用户名</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li><p>选项 :</p></li><li><ul><li>-c comment 指定一段注释性描述。</li><li>-d 目录 指定用户主目录，如果此目录不存在，则同时使用-m选项，可以创建主目录。</li><li>-g 用户组 指定用户所属的用户组。</li><li>-G 用户组，用户组 指定用户所属的附加组。</li><li>-m　使用者目录如不存在则自动建立。</li><li>-s Shell文件 指定用户的登录Shell。</li><li>-u 用户号 指定用户的用户号，如果同时有-o选项，则可以重复使用其他用户的标识号。</li></ul></li><li><p>用户名 :</p></li><li><ul><li>指定新账号的登录名。</li></ul></li></ul><p>测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#此命令创建了一个用户ldd，其中-m选项用来为登录名ldd产生一个主目录 /home/ldd</span></span><br><span class="line">[root@VM-4-7-centos home]<span class="comment"># useradd -m ldd</span></span><br></pre></td></tr></table></figure><p>增加用户账号就是在&#x2F;etc&#x2F;passwd文件中为新用户增加一条记录，同时更新其他系统文件如&#x2F;etc&#x2F;shadow, &#x2F;etc&#x2F;group等。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看管理账户的这个文件</span></span><br><span class="line">[root@VM-4-7-centos home]<span class="comment"># cat /etc/passwd</span></span><br></pre></td></tr></table></figure><blockquote><p>Linux下切换用户</p></blockquote><p>1.切换用户的命令为：su 【username】 【username是你的用户名哦】</p><p>2.从普通用户切换到root用户，还可以使用命令：sudo su</p><p>3.在终端输入exit或logout或使用快捷方式ctrl+d，可以退回到原来用户，其实ctrl+d也是执行的exit命令</p><p>4.在切换用户时，如果想在切换用户之后使用新用户的工作环境，可以在su和username之间加-，例如：【su - root】</p><p>$表示普通用户</p><p>#表示超级用户，也就是root用户</p><blockquote><p>删除账号userdel</p></blockquote><p>如果一个用户的账号不再使用，可以从系统中删除。</p><p>删除用户账号就是要将&#x2F;etc&#x2F;passwd等系统文件中的该用户记录删除，必要时还删除用户的主目录。</p><p>删除一个已有的用户账号使用userdel命令，其格式如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">userdel 选项 用户名</span><br></pre></td></tr></table></figure><p>常用的选项是 <strong>-r</strong>，它的作用是把用户的主目录一起删除。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-4-7-centos home]<span class="comment"># userdel -r ldd</span></span><br></pre></td></tr></table></figure><p>此命令删除用户kuangshen在系统文件中（主要是&#x2F;etc&#x2F;passwd, &#x2F;etc&#x2F;shadow, &#x2F;etc&#x2F;group等）的记录，同时删除用户的主目录。</p><blockquote><p>修改账号usermod</p></blockquote><p>修改用户账号就是根据实际情况更改用户的有关属性，如用户号、主目录、用户组、登录Shell等。</p><p>修改已有用户的信息使用usermod命令，其格式如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">usermod 选项 用户名</span><br></pre></td></tr></table></figure><p>常用的选项包括-c, -d, -m, -g, -G, -s, -u以及-o等，这些选项的意义与useradd命令中的选项一样，可以为用户指定新的资源值。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># usermod -s /bin/ksh -d /home/z –g developer ldd</span></span><br></pre></td></tr></table></figure><p>此命令将用户ldd的登录Shell修改为ksh，主目录改为&#x2F;home&#x2F;z，用户组改为developer。</p><blockquote><p>用户口令的管理</p></blockquote><p>用户管理的一项重要内容是用户口令的管理。用户账号刚创建时没有口令，但是被系统锁定，无法使用，必须为其指定口令后才可以使用，即使是指定空口令。</p><p>指定和修改用户口令的Shell命令是passwd。超级用户可以为自己和其他用户指定口令，普通用户只能用它修改自己的口令。</p><p>命令的格式为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd 选项 用户名</span><br></pre></td></tr></table></figure><p>可使用的选项：</p><ul><li>-l 锁定口令，即禁用账号。</li><li>-u 口令解锁。</li><li>-d 使账号无口令。</li><li>-f 强迫用户下次登录时修改口令。</li></ul><p>如果默认用户名，则修改当前用户的口令。</p><p>例如，假设当前用户是ldd，则下面的命令修改该用户自己的口令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ passwd</span><br><span class="line">Old password:******</span><br><span class="line">New password:*******</span><br><span class="line">Re-enter new password:*******</span><br></pre></td></tr></table></figure><p>如果是超级用户，可以用下列形式指定任何用户的口令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># passwd ldd</span><br><span class="line">New password:*******</span><br><span class="line">Re-enter new password:*******</span><br></pre></td></tr></table></figure><p>普通用户修改自己的口令时，passwd命令会先询问原口令，验证后再要求用户输入两遍新口令，如果两次输入的口令一致，则将这个口令指定给用户；而超级用户为用户指定口令时，就不需要知道原口令。</p><p>为了系统安全起见，用户应该选择比较复杂的口令，例如最好使用8位长的口令，口令中包含有大写、小写字母和数字，并且应该与姓名、生日等不相同。</p><p>为用户指定空口令时，执行下列形式的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># passwd -d ldd</span></span><br></pre></td></tr></table></figure><p>此命令将用户 kuangshen的口令删除，这样用户 kuangshen下一次登录时，系统就不再允许该用户登录了。</p><p>passwd 命令还可以用 -l(lock) 选项锁定某一用户，使其不能登录，例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># passwd -l ldd</span></span><br></pre></td></tr></table></figure><h2 id="5-用户组管理"><a href="#5-用户组管理" class="headerlink" title="5.用户组管理"></a>5.用户组管理</h2><p>每个用户都有一个用户组，系统可以对一个用户组中的所有用户进行集中管理。不同Linux 系统对用户组的规定有所不同，如Linux下的用户属于与它同名的用户组，这个用户组在创建用户时同时创建。</p><p>用户组的管理涉及用户组的添加、删除和修改。组的增加、删除和修改实际上就是对&#x2F;etc&#x2F;group文件的更新。</p><h3 id="用户组的操作"><a href="#用户组的操作" class="headerlink" title="用户组的操作"></a>用户组的操作</h3><blockquote><p>添加用户组groupadd</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groupadd 选项 用户组</span><br></pre></td></tr></table></figure><p>可以使用的选项有：</p><ul><li>-g GID 指定新用户组的组标识号（GID）。</li><li>-o 一般与-g选项同时使用，表示新用户组的GID可以与系统已有用户组的GID相同。</li></ul><p>测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#此命令向系统中增加了一个新组group1，新组的组标识号是在当前已有的最大组标识号的基础上加1。</span></span><br><span class="line">[root@VM-4-7-centos home]<span class="comment"># groupadd ldd</span></span><br><span class="line"><span class="comment">#此命令向系统中增加了一个新组group2，同时指定新组的组标识号是520。</span></span><br><span class="line">[root@VM-4-7-centos home]<span class="comment"># groupadd -g 520 jfl</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看组的配置</span></span><br><span class="line">[root@VM-4-7-centos home]<span class="comment"># cat /etc/group</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/07/01/cabYdOQlNsHIzWT.png" alt="image-20230701214431142"></p><blockquote><p>修改用户组groupmod</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groupmod 选项 用户组</span><br></pre></td></tr></table></figure><p>常用的选项有：</p><ul><li>-g GID 为用户组指定新的组标识号。</li><li>-o 与-g选项同时使用，用户组的新GID可以与系统已有用户组的GID相同。</li><li>-n新用户组 将用户组的名字改为新名字</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#此命令将组ldd的组标识号修改为1314。</span></span><br><span class="line">[root@VM-4-7-centos home]<span class="comment"># groupmod -g 1314 ldd#</span></span><br><span class="line"><span class="comment">#将组jfl的标识号改为3344，组名修改为jfl2。</span></span><br><span class="line">[root@VM-4-7-centos home]<span class="comment"># groupmod -g 3344 -n jfl2 jfl</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/07/01/pRbyWNjPdq98cOM.png" alt="image-20230701214924693"></p><blockquote><p>切换组</p></blockquote><p>如果一个用户同时属于多个用户组，那么用户可以在用户组之间切换，以便具有其他用户组的权限。</p><p>用户可以在登录后，使用命令newgrp切换到其他用户组，这个命令的参数就是目的用户组。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ newgrp root</span><br></pre></td></tr></table></figure><p>这条命令将当前用户切换到root用户组，前提条件是root用户组确实是该用户的主组或附加组。</p><h3 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h3><blockquote><p>&#x2F;etc&#x2F;passwd</p></blockquote><p>完成用户管理的工作有许多种方法，但是每一种方法实际上都是对有关的系统文件进行修改。</p><p>与用户和用户组相关的信息都存放在一些系统文件中，这些文件包括&#x2F;etc&#x2F;passwd, &#x2F;etc&#x2F;shadow, &#x2F;etc&#x2F;group等。</p><p>下面分别介绍这些文件的内容。</p><p><strong>&#x2F;etc&#x2F;passwd文件是用户管理工作涉及的最重要的一个文件。</strong></p><p>Linux系统中的每个用户都在&#x2F;etc&#x2F;passwd文件中有一个对应的记录行，它记录了这个用户的一些基本属性。</p><p>这个文件对所有用户都是可读的。它的内容类似下面的例子：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line">bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class="line">daemon:x:2:2:daemon:/sbin:/sbin/nologin</span><br><span class="line">adm:x:3:4:adm:/var/adm:/sbin/nologin</span><br><span class="line">lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin</span><br><span class="line"><span class="built_in">sync</span>:x:5:0:<span class="built_in">sync</span>:/sbin:/bin/sync</span><br><span class="line">shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown</span><br><span class="line">halt:x:7:0:halt:/sbin:/sbin/halt</span><br><span class="line">mail:x:8:12:mail:/var/spool/mail:/sbin/nologin</span><br></pre></td></tr></table></figure><p>从上面的例子我们可以看到，&#x2F;etc&#x2F;passwd中一行记录对应着一个用户，每行记录又被冒号(:)分隔为7个字段，其格式和具体含义如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#用户名:口令:用户标识号:组标识号:注释性描述:主目录:登录Shell</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/07/01/1KmJMLAIYqWZhkV.png" alt="image-20230701215628920"></p><p>1）”用户名”是代表用户账号的字符串。</p><p>通常长度不超过8个字符，并且由大小写字母和&#x2F;或数字组成。登录名中不能有冒号(:)，因为冒号在这里是分隔符。</p><p>为了兼容起见，登录名中最好不要包含点字符(.)，并且不使用连字符(-)和加号(+)打头。</p><p>2）“口令”一些系统中，存放着加密后的用户口令字。</p><p>虽然这个字段存放的只是用户口令的加密串，不是明文，但是由于&#x2F;etc&#x2F;passwd文件对所有用户都可读，所以这仍是一个安全隐患。因此，现在许多Linux 系统（如SVR4）都使用了shadow技术，把真正的加密后的用户口令字存放到&#x2F;etc&#x2F;shadow文件中，而在&#x2F;etc&#x2F;passwd文件的口令字段中只存放一个特殊的字符，例如“x”或者“*”。</p><p>3）“用户标识号”是一个整数，系统内部用它来标识用户。</p><p>一般情况下它与用户名是一一对应的。如果几个用户名对应的用户标识号是一样的，系统内部将把它们视为同一个用户，但是它们可以有不同的口令、不同的主目录以及不同的登录Shell等。</p><p>通常用户标识号的取值范围是0～65 535。0是超级用户root的标识号，1～99由系统保留，作为管理账号，普通用户的标识号从100开始。在Linux系统中，这个界限是500。</p><p>4）“组标识号”字段记录的是用户所属的用户组。</p><p>它对应着&#x2F;etc&#x2F;group文件中的一条记录。</p><p>5)“注释性描述”字段记录着用户的一些个人情况。</p><p>例如用户的真实姓名、电话、地址等，这个字段并没有什么实际的用途。在不同的Linux 系统中，这个字段的格式并没有统一。在许多Linux系统中，这个字段存放的是一段任意的注释性描述文字，用作finger命令的输出。</p><p>6)“主目录”，也就是用户的起始工作目录。</p><p>它是用户在登录到系统之后所处的目录。在大多数系统中，各用户的主目录都被组织在同一个特定的目录下，而用户主目录的名称就是该用户的登录名。各用户对自己的主目录有读、写、执行（搜索）权限，其他用户对此目录的访问权限则根据具体情况设置。</p><p>7)用户登录后，要启动一个进程，负责将用户的操作传给内核，这个进程是用户登录到系统后运行的命令解释器或某个特定的程序，即Shell。</p><p>Shell是用户与Linux系统之间的接口。Linux的Shell有许多种，每种都有不同的特点。常用的有sh(Bourne Shell), csh(C Shell), ksh(Korn Shell), tcsh(TENEX&#x2F;TOPS-20 type C Shell), bash(Bourne Again Shell)等。</p><p>系统管理员可以根据系统情况和用户习惯为用户指定某个Shell。如果不指定Shell，那么系统使用sh为默认的登录Shell，即这个字段的值为&#x2F;bin&#x2F;sh。</p><p>用户的登录Shell也可以指定为某个特定的程序（此程序不是一个命令解释器）。</p><p>利用这一特点，我们可以限制用户只能运行指定的应用程序，在该应用程序运行结束后，用户就自动退出了系统。有些Linux 系统要求只有那些在系统中登记了的程序才能出现在这个字段中。</p><p>8)系统中有一类用户称为伪用户（pseudo users）。</p><p>常见的伪用户如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">伪 用 户 含 义</span><br><span class="line">bin 拥有可执行的用户命令文件</span><br><span class="line">sys 拥有系统文件</span><br><span class="line">adm 拥有帐户文件</span><br><span class="line">uucp UUCP使用</span><br><span class="line">lp lp或lpd子系统使用</span><br><span class="line">nobody NFS使用</span><br></pre></td></tr></table></figure><blockquote><p>&#x2F;etc&#x2F;shadow</p></blockquote><p><strong>1、除了上面列出的伪用户外，还有许多标准的伪用户，例如：audit, cron, mail, usenet等，它们也都各自为相关的进程和文件所需要。</strong></p><p>由于&#x2F;etc&#x2F;passwd文件是所有用户都可读的，如果用户的密码太简单或规律比较明显的话，一台普通的计算机就能够很容易地将它破解，因此对安全性要求较高的Linux系统都把加密后的口令字分离出来，单独存放在一个文件中，这个文件是&#x2F;etc&#x2F;shadow文件。有超级用户才拥有该文件读权限，这就保证了用户密码的安全性。</p><p><strong>2、&#x2F;etc&#x2F;shadow中的记录行与&#x2F;etc&#x2F;passwd中的一一对应，它由pwconv命令根据&#x2F;etc&#x2F;passwd中的数据自动产生</strong></p><p>它的文件格式与&#x2F;etc&#x2F;passwd类似，由若干个字段组成，字段之间用”:”隔开。这些字段是:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">登录名:加密口令:最后一次修改时间:最小时间间隔:最大时间间隔:警告时间:不活动时间:失效时间:标志</span><br></pre></td></tr></table></figure><ol><li>“登录名”是与&#x2F;etc&#x2F;passwd文件中的登录名相一致的用户账号</li><li>“口令”字段存放的是加密后的用户口令字，长度为13个字符。如果为空，则对应用户没有口令，登录时不需要口令；如果含有不属于集合 { .&#x2F;0-9A-Za-z }中的字符，则对应的用户不能登录。</li><li>“最后一次修改时间”表示的是从某个时刻起，到用户最后一次修改口令时的天数。时间起点对不同的系统可能不一样。例如在SCO Linux 中，这个时间起点是1970年1月1日。</li><li>“最小时间间隔”指的是两次修改口令之间所需的最小天数。</li><li>“最大时间间隔”指的是口令保持有效的最大天数。</li><li>“警告时间”字段表示的是从系统开始警告用户到用户密码正式失效之间的天数。</li><li>“不活动时间”表示的是用户没有登录活动但账号仍能保持有效的最大天数。</li><li>“失效时间”字段给出的是一个绝对的天数，如果使用了这个字段，那么就给出相应账号的生存期。期满后，该账号就不再是一个合法的账号，也就不能再用来登录了。</li></ol><blockquote><p>&#x2F;etc&#x2F;group</p></blockquote><p>用户组的所有信息都存放在&#x2F;etc&#x2F;group文件中。</p><p>将用户分组是Linux 系统中对用户进行管理及控制访问权限的一种手段。</p><p>每个用户都属于某个用户组；一个组中可以有多个用户，一个用户也可以属于不同的组。</p><p>当一个用户同时是多个组中的成员时，在&#x2F;etc&#x2F;passwd文件中记录的是用户所属的主组，也就是登录时所属的默认组，而其他组称为附加组。</p><p>用户要访问属于附加组的文件时，必须首先使用newgrp命令使自己成为所要访问的组中的成员。</p><p>用户组的所有信息都存放在&#x2F;etc&#x2F;group文件中。此文件的格式也类似于&#x2F;etc&#x2F;passwd文件，由冒号(:)隔开若干个字段，这些字段有：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">组名:口令:组标识号:组内用户列表</span><br></pre></td></tr></table></figure><ol><li>“组名”是用户组的名称，由字母或数字构成。与&#x2F;etc&#x2F;passwd中的登录名一样，组名不应重复。</li><li>“口令”字段存放的是用户组加密后的口令字。一般Linux 系统的用户组都没有口令，即这个字段一般为空，或者是*。</li><li>“组标识号”与用户标识号类似，也是一个整数，被系统内部用来标识组。</li><li>“组内用户列表”是属于这个组的所有用户的列表&#x2F;b]，不同用户之间用逗号(,)分隔。这个用户组可能是用户的主组，也可能是附加组。</li></ol><h2 id="6-磁盘管理"><a href="#6-磁盘管理" class="headerlink" title="6.磁盘管理"></a>6.磁盘管理</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>Linux磁盘管理好坏直接关系到整个系统的性能问题。</p><p>Linux磁盘管理常用命令为 df、du。</p><ul><li>df ：列出文件系统的整体磁盘使用量</li><li>du：检查磁盘空间使用量</li></ul><h3 id="磁盘操作"><a href="#磁盘操作" class="headerlink" title="磁盘操作"></a>磁盘操作</h3><blockquote><p>df</p></blockquote><p>df命令参数功能：检查文件系统的磁盘空间占用情况。可以利用该命令来获取硬盘被占用了多少空间，目前还剩下多少空间等信息。</p><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df [-ahikHTm] [目录或文件名]</span><br></pre></td></tr></table></figure><p>选项与参数：</p><ul><li>-a ：列出所有的文件系统，包括系统特有的 &#x2F;proc 等文件系统；</li><li>-k ：以 KBytes 的容量显示各文件系统；</li><li>-m ：以 MBytes 的容量显示各文件系统；</li><li>-h ：以人们较易阅读的 GBytes, MBytes, KBytes 等格式自行显示；</li><li>-H ：以 M&#x3D;1000K 取代 M&#x3D;1024K 的进位方式；</li><li>-T ：显示文件系统类型, 连同该 partition 的 filesystem 名称 (例如 ext3) 也列出；</li><li>-i ：不用硬盘容量，而以 inode 的数量来显示</li></ul><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 将系统内所有的文件系统列出来！</span><br><span class="line"># 在 Linux 底下如果 df 没有加任何选项</span><br><span class="line"># 那么默认会将系统内所有的 (不含特殊内存内的文件系统与 swap) 都以 <span class="number">1</span> Kbytes 的容量来列出来！</span><br><span class="line">[root<span class="meta">@VM</span>-<span class="number">4</span>-<span class="number">7</span>-centos /]# df</span><br><span class="line">Filesystem     1K-blocks     Used Available Use% Mounted on</span><br><span class="line">devtmpfs         <span class="number">1012384</span>        <span class="number">0</span>   <span class="number">1012384</span>   <span class="number">0</span>% /dev</span><br><span class="line">tmpfs            <span class="number">1023340</span>       <span class="number">40</span>   <span class="number">1023300</span>   <span class="number">1</span>% /dev/shm</span><br><span class="line">tmpfs            <span class="number">1023340</span>      <span class="number">732</span>   <span class="number">1022608</span>   <span class="number">1</span>% /run</span><br><span class="line">tmpfs            <span class="number">1023340</span>        <span class="number">0</span>   <span class="number">1023340</span>   <span class="number">0</span>% /sys/fs/cgroup</span><br><span class="line">/dev/vda1       <span class="number">41152716</span> <span class="number">14523104</span>  <span class="number">24851828</span>  <span class="number">37</span>% /</span><br><span class="line">tmpfs             <span class="number">204668</span>        <span class="number">0</span>    <span class="number">204668</span>   <span class="number">0</span>% /run/user/<span class="number">0</span></span><br><span class="line">overlay         <span class="number">41152716</span> <span class="number">14523104</span>  <span class="number">24851828</span>  <span class="number">37</span>% /<span class="keyword">var</span>/lib/docker/overlay2/d79989816b6161643759e816c4b5f8098ed933cf376963ad30cbe36ee6fab351/merged</span><br><span class="line">shm                <span class="number">65536</span>        <span class="number">0</span>     <span class="number">65536</span>   <span class="number">0</span>% /<span class="keyword">var</span>/lib/docker/containers/ef6ab4284976b72a056a64ffe6fa46775bea948fdae3d1775cbf8011db0a4453/shm</span><br><span class="line">[root<span class="meta">@VM</span>-<span class="number">4</span>-<span class="number">7</span>-centos /]# </span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将容量结果以易读的容量格式显示出来</span></span><br><span class="line">[root@VM-4-7-centos /]<span class="comment"># df -h</span></span><br><span class="line">Filesystem      Size  Used Avail Use% Mounted on</span><br><span class="line">devtmpfs        989M     0  989M   0% /dev</span><br><span class="line">tmpfs          1000M   40K 1000M   1% /dev/shm</span><br><span class="line">tmpfs          1000M  732K  999M   1% /run</span><br><span class="line">tmpfs          1000M     0 1000M   0% /sys/fs/cgroup</span><br><span class="line">/dev/vda1        40G   14G   24G  37% /</span><br><span class="line">tmpfs           200M     0  200M   0% /run/user/0</span><br><span class="line">overlay          40G   14G   24G  37% /var/lib/docker/overlay2/d79989816b6161643759e816c4b5f8098ed933cf376963ad30cbe36ee6fab351/merged</span><br><span class="line">shm              64M     0   64M   0% /var/lib/docker/containers/ef6ab4284976b72a056a64ffe6fa46775bea948fdae3d1775cbf8011db0a4453/shm</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将系统内的所有特殊文件格式及名称都列出来</span></span><br><span class="line">[root@VM-4-7-centos /]<span class="comment"># df -aT</span></span><br><span class="line">Filesystem     Type       1K-blocks     Used Available Use% Mounted on</span><br><span class="line">sysfs          sysfs              0        0         0    - /sys</span><br><span class="line">proc           proc               0        0         0    - /proc</span><br><span class="line">devtmpfs       devtmpfs     1012384        0   1012384   0% /dev</span><br><span class="line">securityfs     securityfs         0        0         0    - /sys/kernel/security</span><br><span class="line">tmpfs          tmpfs        1023340       40   1023300   1% /dev/shm</span><br><span class="line">devpts         devpts             0        0         0    - /dev/pts</span><br><span class="line">tmpfs          tmpfs        1023340      732   1022608   1% /run</span><br><span class="line">tmpfs          tmpfs        1023340        0   1023340   0% /sys/fs/cgroup</span><br><span class="line">cgroup         cgroup             0        0         0    - /sys/fs/cgroup/systemd</span><br><span class="line">pstore         pstore             0        0         0    - /sys/fs/pstore</span><br><span class="line">cgroup         cgroup             0        0         0    - /sys/fs/cgroup/freezer</span><br><span class="line">cgroup         cgroup             0        0         0    - /sys/fs/cgroup/cpu,cpuacct</span><br><span class="line">cgroup         cgroup             0        0         0    - /sys/fs/cgroup/cpuset</span><br><span class="line">cgroup         cgroup             0        0         0    - /sys/fs/cgroup/net_cls,net_prio</span><br><span class="line">cgroup         cgroup             0        0         0    - /sys/fs/cgroup/memory</span><br><span class="line">cgroup         cgroup             0        0         0    - /sys/fs/cgroup/blkio</span><br><span class="line">cgroup         cgroup             0        0         0    - /sys/fs/cgroup/hugetlb</span><br><span class="line">cgroup         cgroup             0        0         0    - /sys/fs/cgroup/perf_event</span><br><span class="line">cgroup         cgroup             0        0         0    - /sys/fs/cgroup/pids</span><br><span class="line">cgroup         cgroup             0        0         0    - /sys/fs/cgroup/devices</span><br><span class="line">configfs       configfs           0        0         0    - /sys/kernel/config</span><br><span class="line">/dev/vda1      ext4        41152716 14523248  24851684  37% /</span><br><span class="line">debugfs        debugfs            0        0         0    - /sys/kernel/debug</span><br><span class="line">mqueue         mqueue             0        0         0    - /dev/mqueue</span><br><span class="line">hugetlbfs      hugetlbfs          0        0         0    - /dev/hugepages</span><br><span class="line">tmpfs          tmpfs         204668        0    204668   0% /run/user/0</span><br><span class="line">systemd-1      autofs             0        0         0    - /proc/sys/fs/binfmt_misc</span><br><span class="line">/dev/vda1      ext4        41152716 14523248  24851684  37% /var/lib/docker/containers</span><br><span class="line">/dev/vda1      ext4        41152716 14523248  24851684  37% /var/lib/docker/overlay2</span><br><span class="line">overlay        overlay     41152716 14523248  24851684  37% /var/lib/docker/overlay2/d79989816b6161643759e816c4b5f8098ed933cf376963ad30cbe36ee6fab351/merged</span><br><span class="line">shm            tmpfs          65536        0     65536   0% /var/lib/docker/containers/ef6ab4284976b72a056a64ffe6fa46775bea948fdae3d1775cbf8011db0a4453/shm</span><br><span class="line">proc           proc               0        0         0    - /run/docker/netns/22e06debcaed</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将 /etc 底下的可用的磁盘容量以易读的容量格式显示</span></span><br><span class="line"></span><br><span class="line">[root@VM-4-7-centos /]<span class="comment"># df -h /etc</span></span><br><span class="line">Filesystem      Size  Used Avail Use% Mounted on</span><br><span class="line">/dev/vda1        40G   14G   24G  37% /</span><br></pre></td></tr></table></figure><blockquote><p>du</p></blockquote><p>Linux du命令也是查看使用空间的，但是与df命令不同的是Linux du命令是对文件和目录磁盘使用的空间的查看，还是和df命令有一些区别的，这里介绍Linux du命令。</p><p>语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">du</span> [-ahskm] 文件或目录名称</span><br></pre></td></tr></table></figure><p>选项与参数：</p><ul><li>-a ：列出所有的文件与目录容量，因为默认仅统计目录底下的文件量而已。</li><li>-h ：以人们较易读的容量格式 (G&#x2F;M) 显示；</li><li>-s ：列出总量而已，而不列出每个各别的目录占用容量；</li><li>-S ：不包括子目录下的总计，与 -s 有点差别。</li><li>-k ：以 KBytes 列出容量显示；</li><li>-m ：以 MBytes 列出容量显示；</li></ul><p>测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 只列出当前目录下的所有文件夹容量（包括隐藏文件夹）:</span></span><br><span class="line"><span class="comment"># 直接输入 du 没有加任何选项时，则 du 会分析当前所在目录的文件与目录所占用的硬盘空间。</span></span><br><span class="line">[root@VM-4-7-centos home]<span class="comment"># du</span></span><br><span class="line">16./www</span><br><span class="line">8./lighthouse/.cache/abrt</span><br><span class="line">12./lighthouse/.cache</span><br><span class="line">8./lighthouse/.ssh</span><br><span class="line">4./lighthouse/.config/abrt</span><br><span class="line">8./lighthouse/.config</span><br><span class="line">48./lighthouse</span><br><span class="line">68. <span class="comment"># 这个目录(.)所占用的总量</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将文件的容量也列出来</span></span><br><span class="line">[root@VM-4-7-centos home]<span class="comment"># du -a</span></span><br><span class="line">4./www/.bashrc</span><br><span class="line">4./www/.bash_logout</span><br><span class="line">4./www/.bash_profile</span><br><span class="line">16./www</span><br><span class="line">4./lighthouse/.bashrc</span><br><span class="line">4./lighthouse/.bash_logout</span><br><span class="line">4./lighthouse/.cache/abrt/lastnotification</span><br><span class="line">8./lighthouse/.cache/abrt</span><br><span class="line">12./lighthouse/.cache</span><br><span class="line">4./lighthouse/.bash_history</span><br><span class="line">4./lighthouse/.ssh/authorized_keys</span><br><span class="line">8./lighthouse/.ssh</span><br><span class="line">4./lighthouse/.config/abrt</span><br><span class="line">8./lighthouse/.config</span><br><span class="line">4./lighthouse/.bash_profile</span><br><span class="line">48./lighthouse</span><br><span class="line">68.</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 检查根目录底下每个目录所占用的容量</span></span><br><span class="line">[root@VM-4-7-centos home]<span class="comment"># du -sm /*</span></span><br><span class="line">0/bin</span><br><span class="line">228/boot</span><br><span class="line">1/data</span><br><span class="line">1/dev</span><br><span class="line">41/etc</span><br><span class="line">1/home</span><br><span class="line">0/lib</span><br><span class="line">0/lib64</span><br><span class="line">1/lost+found</span><br><span class="line">1/media</span><br><span class="line">1/mnt</span><br><span class="line">35/opt</span><br><span class="line">1/patch</span><br><span class="line">.....省略......</span><br><span class="line">0/proc</span><br><span class="line">901/root</span><br><span class="line">1/run</span><br><span class="line">0/sbin</span><br><span class="line">1/srv</span><br><span class="line">0/sys</span><br><span class="line">1/tmp</span><br><span class="line">2855/usr <span class="comment"># 系统初期最大就是他了啦！</span></span><br><span class="line">6776/var</span><br><span class="line">3522/www</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>通配符 * 来代表每个目录。</p><p>与 df 不一样的是，du 这个命令其实会直接到文件系统内去搜寻所有的文件数据。</p><h3 id="拓展-1"><a href="#拓展-1" class="headerlink" title="拓展"></a>拓展</h3><blockquote><p>磁盘的挂载与卸除</p></blockquote><p>根文件系统之外的其他文件要想能够被访问，都必须通过“关联”至根文件系统上的某个目录来实现，此关联操作即为“挂载”，此目录即为“挂载点”,解除此关联关系的过程称之为“卸载”</p><p>Linux 的磁盘挂载使用mount命令，卸载使用umount命令。</p><p>磁盘挂载语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mount [-t 文件系统] [-L Label名] [-o 额外选项] [-n] 装置文件名 挂载点</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将 /dev/hdc6 挂载到 /mnt/hdc6 上面！</span></span><br><span class="line">[root@www ~]<span class="comment"># mkdir /mnt/hdc6</span></span><br><span class="line">[root@www ~]<span class="comment"># mount /dev/hdc6 /mnt/hdc6</span></span><br><span class="line">[root@www ~]<span class="comment"># df</span></span><br><span class="line">Filesystem           1K-blocks     Used Available Use% Mounted on</span><br><span class="line">/dev/hdc6              1976312     42072   1833836   3% /mnt/hdc6</span><br></pre></td></tr></table></figure><p>磁盘卸载命令 umount 语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">umount [-fn] 装置文件名或挂载点</span><br></pre></td></tr></table></figure><p>选项与参数：</p><ul><li>-f ：强制卸除！可用在类似网络文件系统 (NFS) 无法读取到的情况下；</li><li>-n ：不升级 &#x2F;etc&#x2F;mtab 情况下卸除。</li></ul><p>卸载&#x2F;dev&#x2F;hdc6</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@www ~]<span class="comment"># umount /dev/hdc6</span></span><br></pre></td></tr></table></figure><h2 id="7-进程管理"><a href="#7-进程管理" class="headerlink" title="7.进程管理"></a>7.进程管理</h2><blockquote><p>基本概念</p></blockquote><p>1、在Linux中，每一个程序都是自己的一个进程，每一个进程都有一个id号；</p><p>2、每一个进程都会有一个父进程；</p><p>3、进程可以有两种存在方式：前台！后台运行；</p><p>4、一般的话服务都是后台进行的，基本的程序都是前台运行的。</p><blockquote><p>命令</p></blockquote><p><strong>ps查看当前系统中正在执行的各种执行的信息！</strong></p><p>ps-xx ：</p><ul><li>-a：显示当前终端运行的所有的进程信息(当前的进程一个)</li><li>-u：以用户的信息显示进程</li><li>-x：显示后台进程的参数</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#ps -aux 查看所有线程</span></span><br><span class="line">ps -aux |grep mysql</span><br><span class="line"></span><br><span class="line"><span class="comment">#| 在Linux这个叫做管道符  A|B 也就是将A的结果作为B的参数</span></span><br><span class="line"><span class="comment"># grep 查找文件中符合条件的字符串</span></span><br></pre></td></tr></table></figure><p><strong>重点：ps -xx|grep 进程名字   过滤进程信息</strong></p><p>ps-ef：可以查看父进程的信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ps -ef|grep mysql <span class="comment">#看父进程我们一般我们一般可以通过目录树结构来查看</span></span><br><span class="line"></span><br><span class="line">pstree</span><br><span class="line">-p 显示父<span class="built_in">id</span></span><br><span class="line">-u 显示用户组</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/07/02/6pGs9xTP2I5k18t.png" alt="image-20230702130421117"></p><p>结束进程：杀掉进程，等价于windows结束任务！</p><p><code>kill -9 [进程的id]</code></p><p>表示强制结束该进程</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Linux学习&quot;&gt;&lt;a href=&quot;#Linux学习&quot; class=&quot;headerlink&quot; title=&quot;Linux学习&quot;&gt;&lt;/a&gt;Linux学习&lt;/h1&gt;&lt;h2 id=&quot;1-概述和环境搭建&quot;&gt;&lt;a href=&quot;#1-概述和环境搭建&quot; class=&quot;header</summary>
      
    
    
    
    <category term="Linux" scheme="https://humbledong.github.io/categories/Linux/"/>
    
    
    <category term="Linux基本命令" scheme="https://humbledong.github.io/tags/Linux%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/"/>
    
    <category term="Linux基础" scheme="https://humbledong.github.io/tags/Linux%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis-Plus代码生成器</title>
    <link href="https://humbledong.github.io/undefined/ced26210.html"/>
    <id>https://humbledong.github.io/undefined/ced26210.html</id>
    <published>2023-06-10T00:10:20.000Z</published>
    <updated>2024-01-07T11:31:53.722Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MyBatis-Plus代码生成器"><a href="#MyBatis-Plus代码生成器" class="headerlink" title="MyBatis-Plus代码生成器"></a>MyBatis-Plus代码生成器</h1><h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h2><p>虽然IDEA中一些类似于<strong>easycode</strong>插件也能实现代码自动生成，但是他们并不全面，而且缺乏灵活度。而MyBatis-Plus比他们更全面，虽然需要我们自己编写一些配置代码，但是在构建Springboot项目中，通过代码自动生成，直接构建出项目全面的基本结构。例如常用的POJO，DAO，Service，Service实现类，Controller层以及mapper.xml文件 ，并且在service中继承了封装好的IService类，一般的sql和实现类基本不用书写就能在controller中调用，并且我们还可以自己编辑自己的业务SQL语句，可谓相当灵活！</p><p>首先该文档会根据我个人的情况去依据MyBatis-Plus的新旧代码生成器都写出步骤，具体根据官网</p><p><strong>注意</strong>：适用版本：mybatis-plus-generator <strong>3.5.1 及其以上</strong>版本，对历史版本不兼容！</p><p>全部跟着<strong>官方文档</strong>书写的</p><p>官网：<a href="https://baomidou.com/pages/56bac0/">代码生成器</a></p><h2 id="2-前期准备"><a href="#2-前期准备" class="headerlink" title="2.前期准备"></a>2.前期准备</h2><p>不管是新还是旧都一切从简了，一张表来构建</p><p>数据库搭建：</p><p>这里就使用上篇博客中的数据和结构了</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> NAMES utf8mb4;</span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for user</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `<span class="keyword">user</span>`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `<span class="keyword">user</span>`  (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">0</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;主键ID&#x27;</span>,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">30</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">  `age` <span class="type">int</span>(<span class="number">0</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;年龄&#x27;</span>,</span><br><span class="line">  `email` <span class="type">varchar</span>(<span class="number">50</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;邮箱&#x27;</span>,</span><br><span class="line">  `create_time` datetime(<span class="number">0</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `update_time` datetime(<span class="number">0</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;更新时间&#x27;</span>,</span><br><span class="line">  `version` <span class="type">int</span>(<span class="number">0</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;版本号&#x27;</span>,</span><br><span class="line">  `is_delete` <span class="type">int</span>(<span class="number">0</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;逻辑删除0(未删除)1(已删除)&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8_general_ci ROW_FORMAT <span class="operator">=</span> <span class="keyword">Dynamic</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Records of user</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `<span class="keyword">user</span>` <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;Jone&#x27;</span>, <span class="number">2</span>, <span class="string">&#x27;ldd@qq.com&#x27;</span>, <span class="keyword">NULL</span>, <span class="string">&#x27;2023-06-09 08:26:56&#x27;</span>, <span class="number">3</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `<span class="keyword">user</span>` <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">&#x27;wlz&#x27;</span>, <span class="number">16</span>, <span class="string">&#x27;wlz@qq.com&#x27;</span>, <span class="string">&#x27;2023-06-09 15:16:05&#x27;</span>, <span class="string">&#x27;2023-06-09 15:16:05&#x27;</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `<span class="keyword">user</span>` <span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="string">&#x27;Tom&#x27;</span>, <span class="number">28</span>, <span class="string">&#x27;test3@baomidou.com&#x27;</span>, <span class="keyword">NULL</span>, <span class="keyword">NULL</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `<span class="keyword">user</span>` <span class="keyword">VALUES</span> (<span class="number">4</span>, <span class="string">&#x27;Sandy&#x27;</span>, <span class="number">21</span>, <span class="string">&#x27;test4@baomidou.com&#x27;</span>, <span class="keyword">NULL</span>, <span class="keyword">NULL</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `<span class="keyword">user</span>` <span class="keyword">VALUES</span> (<span class="number">5</span>, <span class="string">&#x27;Billie&#x27;</span>, <span class="number">24</span>, <span class="string">&#x27;test5@baomidou.com&#x27;</span>, <span class="keyword">NULL</span>, <span class="keyword">NULL</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `<span class="keyword">user</span>` <span class="keyword">VALUES</span> (<span class="number">1667060406940205058</span>, <span class="string">&#x27;jfl&#x27;</span>, <span class="number">17</span>, <span class="string">&#x27;3187162029@qq.com&#x27;</span>, <span class="keyword">NULL</span>, <span class="keyword">NULL</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `<span class="keyword">user</span>` <span class="keyword">VALUES</span> (<span class="number">1667074842170212353</span>, <span class="string">&#x27;hyh&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;hyh@qq.com&#x27;</span>, <span class="string">&#x27;2023-06-09 07:43:10&#x27;</span>, <span class="string">&#x27;2023-06-09 07:43:10&#x27;</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-新版代码生成器"><a href="#3-新版代码生成器" class="headerlink" title="3.新版代码生成器"></a>3.新版代码生成器</h2><h3 id="1-导入依赖"><a href="#1-导入依赖" class="headerlink" title="1.导入依赖"></a>1.导入依赖</h3><p>由于是SpringBoot项目，标注数字依赖必须导入</p><p>使用的SpringBoot 2.7.12</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--1. mybatis-plus依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--2. MP代码生成器依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-generator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--3. 模板引擎依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.velocity<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>velocity-engine-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--4. swagger依赖--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger2 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger-ui --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--5. 数据库驱动--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.32<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--6. lombok--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-数据库配置"><a href="#2-数据库配置" class="headerlink" title="2.数据库配置"></a>2.数据库配置</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/mybatis_plus?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8180</span></span><br></pre></td></tr></table></figure><p>IDEA连接上数据库</p><p><img src="https://s2.loli.net/2023/06/09/9O5bfKQZljw2zAR.png" alt="image-20230609224754669"></p><p>现在好戏才正式开始</p><h3 id="3-代码生成器"><a href="#3-代码生成器" class="headerlink" title="3.代码生成器"></a>3.代码生成器</h3><p>书写代码生成器，在测试包下新建即可！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ldd;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.FieldFill;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.IdType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.AutoGenerator;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.*;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.rules.DateType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.rules.NamingStrategy;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.fill.Column;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.fill.Property;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyCodeGeneration</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//数据源配置，依次是url，username，password</span></span><br><span class="line">        <span class="type">DataSourceConfig</span> <span class="variable">dsc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataSourceConfig</span>.Builder(<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis_plus?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf-8&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;123456&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//自动生成器</span></span><br><span class="line">        <span class="type">AutoGenerator</span> <span class="variable">generator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AutoGenerator</span>(dsc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//全局配置</span></span><br><span class="line">        <span class="type">GlobalConfig</span> <span class="variable">globalConfig</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GlobalConfig</span>.Builder()</span><br><span class="line">                .fileOverride()</span><br><span class="line">                .outputDir(<span class="string">&quot;G:\\study\\Mybatis-Plus\\新旧代码生成器\\new_code\\src\\main\\java&quot;</span>)<span class="comment">//输出文件夹目录，一般都是java目录</span></span><br><span class="line">                .author(<span class="string">&quot;小东&quot;</span>)<span class="comment">//设置作者</span></span><br><span class="line">                .enableSwagger()<span class="comment">//是否开启Swagger配置</span></span><br><span class="line">                .dateType(DateType.TIME_PACK)<span class="comment">//时间策略</span></span><br><span class="line">                .commentDate(<span class="string">&quot;yyyy-MM-dd&quot;</span>)<span class="comment">//注释时间</span></span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//包配置</span></span><br><span class="line">        <span class="type">PackageConfig</span> <span class="variable">packageConfig</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PackageConfig</span>.Builder()</span><br><span class="line">                .parent(<span class="string">&quot;com.ldd&quot;</span>)<span class="comment">//父模块名称</span></span><br><span class="line">                .moduleName(<span class="string">&quot;&quot;</span>)<span class="comment">//父包模块名，一般不写</span></span><br><span class="line">                .entity(<span class="string">&quot;pojo&quot;</span>)<span class="comment">//实体类名称，一下不多说</span></span><br><span class="line">                .service(<span class="string">&quot;service&quot;</span>)</span><br><span class="line">                .serviceImpl(<span class="string">&quot;service.impl&quot;</span>)</span><br><span class="line">                .mapper(<span class="string">&quot;mapper&quot;</span>)</span><br><span class="line">                .xml(<span class="string">&quot;mapper.xml&quot;</span>)</span><br><span class="line">                .controller(<span class="string">&quot;controller&quot;</span>)</span><br><span class="line">                .other(<span class="string">&quot;other&quot;</span>)</span><br><span class="line">                .pathInfo(Collections.singletonMap(OutputFile.mapperXml, <span class="string">&quot;G:\\study\\Mybatis-Plus\\新旧代码生成器\\new_code\\src\\main\\resources\\com\\ldd\\mapper&quot;</span>))<span class="comment">//这个是*mapper.xml输出目录</span></span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//策略配置</span></span><br><span class="line">        <span class="type">StrategyConfig</span> <span class="variable">build</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StrategyConfig</span>.Builder()</span><br><span class="line">                .entityBuilder()</span><br><span class="line">                .disableSerialVersionUID()</span><br><span class="line">                .enableChainModel()</span><br><span class="line">                .enableLombok()</span><br><span class="line">                .enableRemoveIsPrefix()</span><br><span class="line">                .enableTableFieldAnnotation()</span><br><span class="line">                .enableActiveRecord()</span><br><span class="line">                .versionColumnName(<span class="string">&quot;version&quot;</span>)<span class="comment">//乐观锁字段名(数据库)</span></span><br><span class="line">                .versionPropertyName(<span class="string">&quot;version&quot;</span>)<span class="comment">//乐观锁属性名(实体)</span></span><br><span class="line">                .logicDeleteColumnName(<span class="string">&quot;is_delete&quot;</span>)<span class="comment">//逻辑删除字段名(数据库)</span></span><br><span class="line">                .logicDeletePropertyName(<span class="string">&quot;isDelete&quot;</span>)<span class="comment">//逻辑删除属性名(实体)</span></span><br><span class="line">                .naming(NamingStrategy.no_change)</span><br><span class="line">                .columnNaming(NamingStrategy.underline_to_camel)</span><br><span class="line">                .addSuperEntityColumns(<span class="string">&quot;created_time&quot;</span>, <span class="string">&quot;updated_time&quot;</span>)<span class="comment">//添加父类公共字段</span></span><br><span class="line">                .addTableFills(<span class="keyword">new</span> <span class="title class_">Column</span>(<span class="string">&quot;create_time&quot;</span>, FieldFill.INSERT))<span class="comment">//自动填充，记得导包</span></span><br><span class="line">                .addTableFills(<span class="keyword">new</span> <span class="title class_">Property</span>(<span class="string">&quot;updateTime&quot;</span>, FieldFill.INSERT_UPDATE))</span><br><span class="line">                .idType(IdType.ASSIGN_ID)</span><br><span class="line">                .formatFileName(<span class="string">&quot;%sPojo&quot;</span>)<span class="comment">//格式化文件名称</span></span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//执行上面的配置和策略</span></span><br><span class="line">        generator</span><br><span class="line">                .global(globalConfig)</span><br><span class="line">                .packageInfo(packageConfig)</span><br><span class="line">                .strategy(build)</span><br><span class="line">                .execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后直接运行即可！</p><p>无报错即生成以下所有文件</p><p><img src="https://s2.loli.net/2023/06/10/L8PYpWBmlIQnNXb.png" alt="image-20230610101951519"></p><h2 id="4-老版代码生成器"><a href="#4-老版代码生成器" class="headerlink" title="4.老版代码生成器"></a>4.老版代码生成器</h2><h3 id="1-导入依赖-1"><a href="#1-导入依赖-1" class="headerlink" title="1.导入依赖"></a>1.导入依赖</h3><p>一定要导入低于3.5.1的MP生成器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--1. mybatis-plus依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--2. MP代码生成器依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-generator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--3. 模板引擎依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.velocity<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>velocity-engine-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--4. swagger依赖--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger2 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger-ui --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--5. 数据库驱动--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.32<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--6. lombok--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-数据库配置-1"><a href="#2-数据库配置-1" class="headerlink" title="2.数据库配置"></a>2.数据库配置</h3><p>跟新版不变</p><h3 id="3-代码生成器-1"><a href="#3-代码生成器-1" class="headerlink" title="3.代码生成器"></a>3.代码生成器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ldd;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.DbType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.FieldFill;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.IdType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.AutoGenerator;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.DataSourceConfig;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.GlobalConfig;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.PackageConfig;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.StrategyConfig;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.po.TableFill;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.rules.DateType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.rules.NamingStrategy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyCodeGenerator</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       <span class="comment">//我们需要构建一个代码生成器对象</span></span><br><span class="line">        <span class="type">AutoGenerator</span> <span class="variable">mpg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AutoGenerator</span>();</span><br><span class="line">        <span class="comment">//怎么样去执行，配置策略</span></span><br><span class="line">        <span class="comment">//1、全局配置</span></span><br><span class="line">        <span class="type">GlobalConfig</span> <span class="variable">gc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GlobalConfig</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">projectPath</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;user.dir&quot;</span>);<span class="comment">//获取当前目录</span></span><br><span class="line">        gc.setOutputDir(projectPath+<span class="string">&quot;/src/main/java&quot;</span>);<span class="comment">//输出到哪个目录</span></span><br><span class="line">        gc.setAuthor(<span class="string">&quot;小东&quot;</span>);</span><br><span class="line">        gc.setOpen(<span class="literal">false</span>);</span><br><span class="line">        gc.setFileOverride(<span class="literal">false</span>);<span class="comment">//是否覆盖</span></span><br><span class="line">        gc.setServiceName(<span class="string">&quot;%sService&quot;</span>);<span class="comment">//去Service的I前缀</span></span><br><span class="line">        gc.setIdType(IdType.ID_WORKER);</span><br><span class="line">        gc.setDateType(DateType.ONLY_DATE);</span><br><span class="line">        gc.setSwagger2(<span class="literal">true</span>);</span><br><span class="line">        mpg.setGlobalConfig(gc);</span><br><span class="line">        <span class="comment">//2、设置数据源</span></span><br><span class="line">        <span class="type">DataSourceConfig</span> <span class="variable">dsc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataSourceConfig</span>();</span><br><span class="line">        dsc.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        dsc.setPassword(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        dsc.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis_plus?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf-8&quot;</span>);</span><br><span class="line">        dsc.setDriverName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">        dsc.setDbType(DbType.MYSQL);</span><br><span class="line">        mpg.setDataSource(dsc);</span><br><span class="line">        <span class="comment">//3、包的配置</span></span><br><span class="line">        <span class="type">PackageConfig</span> <span class="variable">pc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PackageConfig</span>();</span><br><span class="line">        pc.setParent(<span class="string">&quot;com.ldd&quot;</span>);</span><br><span class="line">        pc.setEntity(<span class="string">&quot;pojo&quot;</span>);</span><br><span class="line">        pc.setMapper(<span class="string">&quot;mapper&quot;</span>);</span><br><span class="line">        pc.setService(<span class="string">&quot;service&quot;</span>);</span><br><span class="line">        pc.setController(<span class="string">&quot;controller&quot;</span>);</span><br><span class="line">        mpg.setPackageInfo(pc);</span><br><span class="line">        <span class="comment">//4、策略配置</span></span><br><span class="line">        <span class="type">StrategyConfig</span> <span class="variable">strategy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StrategyConfig</span>();</span><br><span class="line">        strategy.setInclude(<span class="string">&quot;user&quot;</span>);<span class="comment">//设置要映射的表名,只需改这里即可</span></span><br><span class="line">        strategy.setNaming(NamingStrategy.underline_to_camel);</span><br><span class="line">        strategy.setColumnNaming(NamingStrategy.underline_to_camel);</span><br><span class="line">        strategy.setEntityLombokModel(<span class="literal">true</span>);<span class="comment">//是否使用lombok开启注解</span></span><br><span class="line">        strategy.setLogicDeleteFieldName(<span class="string">&quot;is_delete&quot;</span>);</span><br><span class="line">        <span class="comment">//自动填充配置</span></span><br><span class="line">        <span class="type">TableFill</span> <span class="variable">gmtCreate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TableFill</span>(<span class="string">&quot;create_time&quot;</span>, FieldFill.INSERT);</span><br><span class="line">        <span class="type">TableFill</span> <span class="variable">gmtUpdate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TableFill</span>(<span class="string">&quot;update_time&quot;</span>, FieldFill.INSERT_UPDATE);</span><br><span class="line">        ArrayList&lt;TableFill&gt; tableFills = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        tableFills.add(gmtCreate);</span><br><span class="line">        tableFills.add(gmtUpdate);</span><br><span class="line">        strategy.setTableFillList(tableFills);</span><br><span class="line">        <span class="comment">//乐观锁配置</span></span><br><span class="line">        strategy.setVersionFieldName(<span class="string">&quot;version&quot;</span>);</span><br><span class="line">        strategy.setRestControllerStyle(<span class="literal">true</span>);<span class="comment">//开启驼峰命名</span></span><br><span class="line">        strategy.setControllerMappingHyphenStyle(<span class="literal">true</span>);<span class="comment">//localhost:8080/hello_id_2</span></span><br><span class="line">        mpg.setStrategy(strategy);</span><br><span class="line">        mpg.execute();<span class="comment">//执行</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后再检查即可</p><p><img src="https://s2.loli.net/2023/06/10/BAl2pjKOyoMs9La.png" alt="image-20230610103723375"></p><p><img src="https://s2.loli.net/2023/06/10/TxZpqWBVHnzUEuF.png" alt="image-20230610103743438"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;MyBatis-Plus代码生成器&quot;&gt;&lt;a href=&quot;#MyBatis-Plus代码生成器&quot; class=&quot;headerlink&quot; title=&quot;MyBatis-Plus代码生成器&quot;&gt;&lt;/a&gt;MyBatis-Plus代码生成器&lt;/h1&gt;&lt;h2 id=&quot;1-前言&quot;</summary>
      
    
    
    
    <category term="框架" scheme="https://humbledong.github.io/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
    <category term="MyBatis-plus" scheme="https://humbledong.github.io/tags/MyBatis-plus/"/>
    
    <category term="代码生成器" scheme="https://humbledong.github.io/tags/%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis-Plus应用</title>
    <link href="https://humbledong.github.io/undefined/cc2af2d6.html"/>
    <id>https://humbledong.github.io/undefined/cc2af2d6.html</id>
    <published>2023-06-09T11:30:20.000Z</published>
    <updated>2024-01-07T11:18:15.828Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MyBatis-Plus"><a href="#MyBatis-Plus" class="headerlink" title="MyBatis-Plus"></a>MyBatis-Plus</h1><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h2><p>MyBatis-Plus (opens new window)（简称 MP）是一个 MyBatis (opens new window)的增强工具，在 MyBatis 的基础上只做增强不做改变，为<strong>简化开发、提高效率</strong>而生。</p><h6 id="本博客使用的MyBatis-Plus版本为3-5-2"><a href="#本博客使用的MyBatis-Plus版本为3-5-2" class="headerlink" title="本博客使用的MyBatis-Plus版本为3.5.2"></a><strong>本博客使用的MyBatis-Plus版本为3.5.2</strong></h6><p>特性：</p><ul><li>无侵入：只做增强不做改变，引入它不会对现有工程产生影响，如丝般顺滑</li><li>损耗小：启动即会自动注入基本 CURD，性能基本无损耗，直接面向对象操作，BaseMapper</li><li>强大的 CRUD 操作：内置通用 Mapper、通用 Service，仅仅通过少量配置即可实现单表大部分 CRUD 操作，更有强大的条件构造器，满足各类使用需求，以后简单的CRUD操作，不用自己编写了 ！</li><li>支持 Lambda 形式调用：通过 Lambda 表达式，方便的编写各类查询条件，无需再担心字段写错</li><li>支持主键自动生成：支持多达 4 种主键策略（内含分布式唯一 ID 生成器 - Sequence），可自由配置，完美解决主键问题</li><li>支持 ActiveRecord 模式：支持 ActiveRecord 形式调用，实体类只需继承 Model 类即可进行强大的 CRUD 操作</li><li>支持自定义全局通用操作：支持全局通用方法注入（ Write once, use anywhere ）</li><li>内置代码生成器：采用代码或者 Maven 插件可快速生成 Mapper 、 Model 、 Service 、 Controller 层代码，支持模板引擎，更有超多自定义配置等您来使用（自动帮你生成代码）</li><li>内置分页插件：基于 MyBatis 物理分页，开发者无需关心具体操作，配置好插件之后，写分页等同于普通 List 查询</li><li>分页插件支持多种数据库：支持 MySQL、MariaDB、Oracle、DB2、H2、HSQL、SQLite、Postgre、SQLServer 等多种数据库</li><li>内置性能分析插件：可输出 Sql 语句以及其执行时间，建议开发测试时启用该功能，能快速揪出慢查询</li><li>内置全局拦截插件：提供全表 delete 、 update 操作智能分析阻断，也可自定义拦截规则，预防误操作</li></ul><h2 id="2-快速入门"><a href="#2-快速入门" class="headerlink" title="2.快速入门"></a>2.快速入门</h2><p>地址：<a href="https://baomidou.com/pages/226c21/">快速开始 | MyBatis-Plus (baomidou.com)</a>初始化工程</p><p>使用第三方插件：</p><p>1.导入相关依赖</p><p>2.研究依赖如何配置</p><p>3.代码如何编写</p><p>4.提高扩展技术能力</p><blockquote><p><strong>步骤</strong></p></blockquote><h3 id="1-创建数据库mybatis-plus"><a href="#1-创建数据库mybatis-plus" class="headerlink" title="1.创建数据库mybatis_plus"></a>1.创建数据库mybatis_plus</h3><p><img src="https://s2.loli.net/2023/06/09/kPIbKLr2tex3jYh.png" alt="image-20230609121251139"></p><h3 id="2-创建user表并插入数据"><a href="#2-创建user表并插入数据" class="headerlink" title="2.创建user表并插入数据"></a>2.创建user表并插入数据</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> <span class="keyword">user</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">user</span></span><br><span class="line">(</span><br><span class="line">    id <span class="type">BIGINT</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;主键ID&#x27;</span>,</span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">    age <span class="type">INT</span>(<span class="number">11</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;年龄&#x27;</span>,</span><br><span class="line">    email <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;邮箱&#x27;</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> <span class="keyword">user</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">user</span> (id, name, age, email) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1</span>, <span class="string">&#x27;Jone&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;test1@baomidou.com&#x27;</span>),</span><br><span class="line">(<span class="number">2</span>, <span class="string">&#x27;Jack&#x27;</span>, <span class="number">20</span>, <span class="string">&#x27;test2@baomidou.com&#x27;</span>),</span><br><span class="line">(<span class="number">3</span>, <span class="string">&#x27;Tom&#x27;</span>, <span class="number">28</span>, <span class="string">&#x27;test3@baomidou.com&#x27;</span>),</span><br><span class="line">(<span class="number">4</span>, <span class="string">&#x27;Sandy&#x27;</span>, <span class="number">21</span>, <span class="string">&#x27;test4@baomidou.com&#x27;</span>),</span><br><span class="line">(<span class="number">5</span>, <span class="string">&#x27;Billie&#x27;</span>, <span class="number">24</span>, <span class="string">&#x27;test5@baomidou.com&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="3-编写项目，初始化工程"><a href="#3-编写项目，初始化工程" class="headerlink" title="3.编写项目，初始化工程"></a>3.编写项目，初始化工程</h3><p>初始一个springboot工程勾选一个web模块即可</p><h3 id="4-导入依赖"><a href="#4-导入依赖" class="headerlink" title="4.导入依赖"></a>4.导入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--1.数据库驱动--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.32<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--2.mybatis_plus--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--3.lombok--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>说明：尽量不要同时导入mybatis-plus和mybatis</p><h3 id="5-连接数据库"><a href="#5-连接数据库" class="headerlink" title="5.连接数据库"></a>5.连接数据库</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#数据库连接配置</span></span><br><span class="line"><span class="attr">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">spring.datasource.password</span>=<span class="string">123456</span></span><br><span class="line"><span class="comment">#mysql5~8 驱动不同driver-class-name     8需要增加时区的配置serverTimezone=UTC</span></span><br><span class="line"><span class="comment">#useSSL=false 安全连接</span></span><br><span class="line"><span class="attr">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/mybatis_plus?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf-8</span></span><br><span class="line"><span class="attr">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br></pre></td></tr></table></figure><h3 id="6-实体类"><a href="#6-实体类" class="headerlink" title="6.实体类"></a>6.实体类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="comment">//有参/无参，get/set，toString</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-Mapper接口"><a href="#7-Mapper接口" class="headerlink" title="7.Mapper接口"></a>7.Mapper接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ldd.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> com.ldd.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在对应的Mapper上面继承基本的类BaseMapper</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt; &#123;</span><br><span class="line">    <span class="comment">//所有的CRUD操作都已经编写完成了</span></span><br><span class="line">    <span class="comment">//你不需要像以前那样的一大堆配置了</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主启动类上扫描我们的mapper包下的所有接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//扫描mapper文件夹</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.ldd.mapper&quot;)</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisPlusApplication</span> &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-测试"><a href="#8-测试" class="headerlink" title="8.测试"></a>8.测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ldd;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ldd.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.ldd.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MybatisPlusApplicationTests</span> &#123;</span><br><span class="line">    <span class="comment">//继承了BaseMapper，所有的方法都来自自己的父类</span></span><br><span class="line">    <span class="comment">//我们也可以编写自己的扩展方法</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">///参数是一个Wrapper，条件构造器</span></span><br><span class="line">        <span class="comment">// 查询全部用户</span></span><br><span class="line">        List&lt;User&gt; users = userMapper.selectList(<span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/06/09/R8QU4sE3t2SFz9L.png" alt="image-20230609124047348"></p><h2 id="3-配置日志"><a href="#3-配置日志" class="headerlink" title="3.配置日志"></a>3.配置日志</h2><p>因为我们的sql现在都是不可见的，我们希望知道他是怎么执行的，就必须看日志</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置日志</span></span><br><span class="line"><span class="attr">mybatis-plus.configuration.logImpl</span>=<span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/06/09/HW36BaMtT24AQfg.png" alt="image-20230609124749853"></p><h2 id="4-CRUD扩展"><a href="#4-CRUD扩展" class="headerlink" title="4.CRUD扩展"></a>4.CRUD扩展</h2><h3 id="1-Insert"><a href="#1-Insert" class="headerlink" title="1.Insert"></a>1.Insert</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span><span class="comment">//测试插入</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertTest</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setName(<span class="string">&quot;ldd&quot;</span>);</span><br><span class="line">    user.setAge(<span class="number">18</span>);</span><br><span class="line">    user.setEmail(<span class="string">&quot;1355407724@qq.com&quot;</span>);</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">result</span> <span class="operator">=</span> userMapper.insert(user); <span class="comment">//会帮我们自动生成id</span></span><br><span class="line">    System.out.println(result); <span class="comment">//受影响的行数</span></span><br><span class="line">    System.out.println(user); <span class="comment">//通过日志发现id会自动回填</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/06/09/Rgr7M8axbhTIcYA.png" alt="image-20230609144616777"></p><p>这里的id我们并没有手动插入，是自动生成的！</p><h3 id="2-主键生成策略"><a href="#2-主键生成策略" class="headerlink" title="2.主键生成策略"></a>2.主键生成策略</h3><p>我们在id字段上加上注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TableId(type = IdType)</span></span><br></pre></td></tr></table></figure><p>进入IdType的源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">IdType</span> &#123;</span><br><span class="line">    AUTO(<span class="number">0</span>), <span class="comment">//数据库id自增</span></span><br><span class="line">    NONE(<span class="number">1</span>),<span class="comment">//未设置主键</span></span><br><span class="line">    INPUT(<span class="number">2</span>),<span class="comment">//手动输入</span></span><br><span class="line">    ASSIGN_ID(<span class="number">3</span>),<span class="comment">//全局默认id</span></span><br><span class="line">    ASSIGN_UUID(<span class="number">4</span>);<span class="comment">//uuid</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>*<strong>默认 :ASSIGN_ID(3)全局唯一Id*</strong></p><p>分布式系统唯一Id生成：<a href="https://www.cnblogs.com/haoxinyue/p/5208136.html">https://www.cnblogs.com/haoxinyue/p/5208136.html</a></p><ul><li><strong>Twitter的snowflake算法</strong></li></ul><p>snowflake是Twitter开源的分布式ID生成算法，结果是一个long型的ID。其核心思想是：使用41bit作为毫秒数，10bit作为机器的ID（5个bit是数据中心（北京、香港···），5个bit的机器ID），12bit作为毫秒内的流水号（意味着每个节点在每毫秒可以产生 4096 个 ID），最后还有一个符号位，永远是0。</p><ul><li>具体实现的代码可以参看<a href="https://github.com/twitter/snowflake%E3%80%82">https://github.com/twitter/snowflake。</a></li></ul><p>我们就测试第一个自动自增即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TableId(type = IdType.AUTO)</span></span><br></pre></td></tr></table></figure><p>数据库字段一定要是自增</p><p><img src="https://s2.loli.net/2023/06/09/RlQZE8bxPdA9GJI.png" alt="image-20230609145943993"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span><span class="comment">//主键策略插入测试</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertAutoTest</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setName(<span class="string">&quot;jfl&quot;</span>);</span><br><span class="line">    user.setAge(<span class="number">17</span>);</span><br><span class="line">    user.setEmail(<span class="string">&quot;3187162029@qq.com&quot;</span>);</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">result</span> <span class="operator">=</span> userMapper.insert(user);</span><br><span class="line">    System.out.println(result);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/06/09/m2spoJhKEifVtq3.png" alt="image-20230609150101148"></p><p>其他的就不测试了，意义不大</p><h3 id="3-更新操作"><a href="#3-更新操作" class="headerlink" title="3.更新操作"></a>3.更新操作</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span><span class="comment">//测试更新</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateTest</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setId(<span class="number">2L</span>);<span class="comment">//怎么改id？？</span></span><br><span class="line">    <span class="comment">//通过条件自动拼接动态Sql</span></span><br><span class="line">    user.setName(<span class="string">&quot;yy&quot;</span>);</span><br><span class="line">    user.setAge(<span class="number">16</span>);</span><br><span class="line">    user.setEmail(<span class="string">&quot;yy@qq.com&quot;</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> userMapper.updateById(user);<span class="comment">//updateById，但是参数是个user</span></span><br><span class="line">    System.out.println(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/06/09/Jycm18sip4WXMh5.png" alt="image-20230609150703511"></p><p><img src="https://s2.loli.net/2023/06/09/fSo2JCwRqVDbMUz.png" alt="image-20230609150723029"></p><h3 id="4-自动填充"><a href="#4-自动填充" class="headerlink" title="4.自动填充"></a>4.自动填充</h3><p>创建时间，更改时间！这些操作一般都是自动化完成的，我们不希望手动更新</p><p>阿里巴巴开发手册中说到</p><p><img src="https://s2.loli.net/2023/06/09/sIbURdzg8YwZ5cp.png" alt="image-20230609150920974"></p><h4 id="方式一：数据库级别-工作中不允许修改数据库级别"><a href="#方式一：数据库级别-工作中不允许修改数据库级别" class="headerlink" title="方式一：数据库级别(工作中不允许修改数据库级别)"></a>方式一：数据库级别(工作中不允许修改数据库级别)</h4><p><img src="https://s2.loli.net/2023/06/09/76wim5alvjOhTMZ.png" alt="image-20230609151210778"></p><p>再次插入或者更新方法我们需要在实体类中同步！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Date createTime;<span class="comment">//驼峰命名</span></span><br><span class="line"><span class="keyword">private</span> Date updateTime;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span><span class="comment">//测试自动填充时间</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateTimeTest</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setId(<span class="number">2L</span>);<span class="comment">//怎么改id？？</span></span><br><span class="line">    <span class="comment">//通过条件自动拼接动态Sql</span></span><br><span class="line">    user.setName(<span class="string">&quot;wlz&quot;</span>);</span><br><span class="line">    user.setAge(<span class="number">16</span>);</span><br><span class="line">    user.setEmail(<span class="string">&quot;wlz@qq.com&quot;</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> userMapper.updateById(user);<span class="comment">//updateById，但是参数是个user</span></span><br><span class="line">    System.out.println(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/06/09/X3T1ropfg57PKOy.png" alt="image-20230609151703807"></p><h4 id="方式二：代码级别"><a href="#方式二：代码级别" class="headerlink" title="方式二：代码级别"></a>方式二：代码级别</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TableField(fill = FieldFill.INSERT)</span><span class="comment">//value = (&quot;create_time&quot;),</span></span><br><span class="line"><span class="keyword">private</span> Date createTime;<span class="comment">//驼峰命名</span></span><br><span class="line"><span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line"><span class="keyword">private</span> Date updateTime;</span><br></pre></td></tr></table></figure><p>测试插入&#x2F;更新，观察时间</p><p><img src="https://s2.loli.net/2023/06/09/eDU2L3xm6r4FAoH.png" alt="image-20230609154802923"></p><h3 id="5-乐观锁-amp-悲观锁"><a href="#5-乐观锁-amp-悲观锁" class="headerlink" title="5.乐观锁&amp;悲观锁"></a>5.乐观锁&amp;悲观锁</h3><p>在面试过程中经常被问到乐观锁&#x2F;悲观锁，这个其实很简单</p><blockquote><p>乐观锁：顾名思义十分乐观,他总是认为不会出现问题,无论干什么都不上锁!如果出现了问题,再次更新值测试</p><p>悲观锁：顾名思义十分悲观,他总是认为出现问题,无论干什么都会上锁!再去操作!</p></blockquote><p>我们这里主要讲解 乐观锁机制!</p><p>乐观锁实现方式:</p><ul><li>取出记录时,获取当前version</li><li>更新时,带上这个version</li><li>执行更新时,set version &#x3D; newVersion where version &#x3D; oldVersion</li><li>如果version不对,就更新失败</li></ul><p>测试</p><h4 id="1-数据库中添加字段"><a href="#1-数据库中添加字段" class="headerlink" title="1.数据库中添加字段"></a>1.数据库中添加字段</h4><p><img src="https://s2.loli.net/2023/06/09/6bxMZKXptaCwfEB.png" alt="image-20230609155455924"></p><h4 id="2-实体类添加相应字段"><a href="#2-实体类添加相应字段" class="headerlink" title="2.实体类添加相应字段"></a>2.实体类添加相应字段</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Version</span><span class="comment">//乐观锁version注解</span></span><br><span class="line"><span class="keyword">private</span> Integer version;</span><br></pre></td></tr></table></figure><h4 id="3-注册组件"><a href="#3-注册组件" class="headerlink" title="3.注册组件"></a>3.注册组件</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ldd.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.inner.OptimisticLockerInnerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.EnableTransactionManagement;</span><br><span class="line"></span><br><span class="line"><span class="comment">//扫描mapper文件夹</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.ldd.mapper&quot;)</span><span class="comment">//交给mybatis做的，可以让这个配置类做扫描</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span><span class="comment">//自动管理事务</span></span><br><span class="line"><span class="meta">@Configuration</span><span class="comment">//配置类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBatisPlusConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注册乐观锁插件</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">MybatisPlusInterceptor</span> <span class="variable">mybatisPlusInterceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">        mybatisPlusInterceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">OptimisticLockerInnerInterceptor</span>());</span><br><span class="line">        <span class="keyword">return</span> mybatisPlusInterceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-测试"><a href="#4-测试" class="headerlink" title="4.测试"></a>4.测试</h4><ul><li><p>成功</p></li><li><p>&#96;&#96;&#96;java<br>@Test&#x2F;&#x2F;测试乐观锁成功<br>public void testOptimisticLocker1(){<br>&#x2F;&#x2F;1、查询用户信息<br>User user &#x3D; userMapper.selectById(1L);<br>&#x2F;&#x2F;2、修改用户信息<br>user.setAge(18);<br>user.setEmail(“<a href="mailto:&#x31;&#51;&#x35;&#53;&#x34;&#48;&#x37;&#x37;&#x32;&#x34;&#64;&#113;&#x71;&#x2e;&#x63;&#x6f;&#109;">&#x31;&#51;&#x35;&#53;&#x34;&#48;&#x37;&#x37;&#x32;&#x34;&#64;&#113;&#x71;&#x2e;&#x63;&#x6f;&#109;</a>“);<br>&#x2F;&#x2F;3、执行更新操作<br>userMapper.updateById(user);<br>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">![image-20230609160805053](https://s2.loli.net/2023/06/09/2HvdazDJSTLqnW7.png)</span><br><span class="line"></span><br><span class="line">![image-20230609162557441](https://s2.loli.net/2023/06/09/x7b6ja9m2YFEuy3.png)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- 失败</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">@Test//测试乐观锁失败  多线程下</span><br><span class="line">public void testOptimisticLocker2()&#123;</span><br><span class="line">    //线程1</span><br><span class="line">    User user1 = userMapper.selectById(1L);</span><br><span class="line">    user1.setAge(1);</span><br><span class="line">    user1.setEmail(&quot;3187162029@qq.com&quot;);</span><br><span class="line">    //模拟另外一个线程执行了插队操作</span><br><span class="line">    User user2 = userMapper.selectById(1L);</span><br><span class="line">    user2.setAge(2);</span><br><span class="line">    user2.setEmail(&quot;ldd@qq.com&quot;);</span><br><span class="line">    userMapper.updateById(user2);</span><br><span class="line">    //自旋锁来多次尝试提交！</span><br><span class="line">    userMapper.updateById(user1);//如果没有乐观锁就会覆盖插队线程的值</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://s2.loli.net/2023/06/09/hXyLvAjgJ4TknO1.png" alt="image-20230609162738248"></p><p><img src="https://s2.loli.net/2023/06/09/uIhLYUCzs3pi92k.png" alt="image-20230609162809722"></p><h3 id="6-Select"><a href="#6-Select" class="headerlink" title="6.Select"></a>6.Select</h3><h4 id="1-通过id查询单个用户"><a href="#1-通过id查询单个用户" class="headerlink" title="1.通过id查询单个用户"></a>1.通过id查询单个用户</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span><span class="comment">//通过id查询单个用户</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectById</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.selectById(<span class="number">1L</span>);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/06/09/IC93ehJP7nVtbsp.png" alt="image-20230609163009943"></p><h4 id="2-通过id查询多个用户"><a href="#2-通过id查询多个用户" class="headerlink" title="2.通过id查询多个用户"></a>2.通过id查询多个用户</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span><span class="comment">//通过id查询多个用户</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectBatchIds</span><span class="params">()</span>&#123;</span><br><span class="line">    List&lt;User&gt; users = userMapper.selectBatchIds(Arrays.asList(<span class="number">1L</span>, <span class="number">2L</span>, <span class="number">3L</span>));</span><br><span class="line">    users.forEach(System.out::println);</span><br><span class="line">    <span class="comment">//System.out.println(users);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/06/09/WB9uOl8dPCsgYVL.png" alt="image-20230609163124476"></p><h4 id="3-条件查询-通过map封装"><a href="#3-条件查询-通过map封装" class="headerlink" title="3.条件查询 通过map封装"></a>3.条件查询 通过map封装</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span><span class="comment">//通过条件查询之一  map</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testMap</span><span class="params">()</span>&#123;</span><br><span class="line">    HashMap&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//自定义要查询的</span></span><br><span class="line">    map.put(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;ldd&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;age&quot;</span>,<span class="number">18</span>);</span><br><span class="line">    List&lt;User&gt; users = userMapper.selectByMap(map);</span><br><span class="line">    users.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/06/09/VwMkN6ho8Rt7Si3.png" alt="image-20230609163249375"></p><h3 id="7-分页查询"><a href="#7-分页查询" class="headerlink" title="7.分页查询"></a>7.分页查询</h3><p>分页在网站的使用十分之多</p><p>1.原始的limit分页</p><p>2.pageHelper第三方插件</p><p>3.MybatisPlus内置分页插件</p><p>1.配置组件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ldd.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.DbType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.inner.OptimisticLockerInnerInterceptor;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.inner.PaginationInnerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.EnableTransactionManagement;</span><br><span class="line"></span><br><span class="line"><span class="comment">//扫描mapper文件夹</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.ldd.mapper&quot;)</span><span class="comment">//交给mybatis做的，可以让这个配置类做扫描</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span><span class="comment">//自动管理事务</span></span><br><span class="line"><span class="meta">@Configuration</span><span class="comment">//配置类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBatisPlusConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注册乐观锁插件</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">MybatisPlusInterceptor</span> <span class="variable">mybatisPlusInterceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">        mybatisPlusInterceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">OptimisticLockerInnerInterceptor</span>());</span><br><span class="line">        <span class="comment">// 添加分页插件</span></span><br><span class="line">        mybatisPlusInterceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>(DbType.MYSQL));</span><br><span class="line">        <span class="keyword">return</span> mybatisPlusInterceptor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span><span class="comment">//测试分页查询</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testPage</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//参数一current：当前页   参数二size：页面大小</span></span><br><span class="line">    <span class="comment">//使用了分页插件之后，所有的分页操作都变得简单了</span></span><br><span class="line">    Page&lt;User&gt; page = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line">    userMapper.selectPage(page,<span class="literal">null</span>);</span><br><span class="line">    page.getRecords().forEach(System.out::println);</span><br><span class="line">    System.out.println(<span class="string">&quot;总页数==&gt;&quot;</span>+page.getTotal());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/06/09/gjh9zBEs3NrYQLw.png" alt="image-20230609164444950"></p><h3 id="8-Delete"><a href="#8-Delete" class="headerlink" title="8.Delete"></a>8.Delete</h3><h4 id="基本删除"><a href="#基本删除" class="headerlink" title="基本删除"></a>基本删除</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//id删除</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDeleteById</span><span class="params">()</span>&#123;</span><br><span class="line">    userMapper.deleteById(<span class="number">1667060406940205057L</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//多个删除</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDeleteBatchIds</span><span class="params">()</span>&#123;</span><br><span class="line">    userMapper.deleteBatchIds(Arrays.asList(<span class="number">1667060406940205058L</span>,<span class="number">1667074842170212353L</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//条件删除</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testD</span><span class="params">()</span>&#123;</span><br><span class="line">    HashMap&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;age&quot;</span>,<span class="string">&quot;18&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;ldd&quot;</span>);</span><br><span class="line">    userMapper.deleteByMap(map);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我就不去测试了</p><h4 id="逻辑删除"><a href="#逻辑删除" class="headerlink" title="逻辑删除"></a>逻辑删除</h4><blockquote><p>物理删除：从数据库中直接删除</p><p>逻辑删除：在数据库中没有被删除，而是通过一个变量来使他失效！ deleted&#x3D;0 &#x3D;&#x3D;&gt; deleted&#x3D;1</p></blockquote><p><strong>管理员可以查看被删除的记录！防止数据的丢失，类似于回收站！</strong></p><p>测试</p><p>1.数据库表中增加一个is_delete字段</p><p><img src="https://s2.loli.net/2023/06/09/MIU5Po7yVzdD4Hv.png" alt="image-20230609165319503"></p><p>默认都是未删除0</p><p>2.实体类跟进</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TableLogic(value = &quot;0&quot;,delval = &quot;1&quot;)</span><span class="comment">//逻辑删除注解</span></span><br><span class="line"><span class="keyword">private</span> Integer deleted;</span><br></pre></td></tr></table></figure><p>3.配置文件配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#配置逻辑删除</span></span><br><span class="line"><span class="attr">mybatis-plus.global-config.db-config.logic-delete-value</span>=<span class="string">1 # 逻辑已删除值(默认为 1)</span></span><br><span class="line"><span class="attr">mybatis-plus.global-config.db-config.logic-not-delete-value</span>=<span class="string">0 # 逻辑未删除值(默认为 0)</span></span><br></pre></td></tr></table></figure><p><strong>如果采取这种配置就省去步骤二注解</strong></p><p>4.测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//逻辑删除</span></span><br><span class="line"><span class="comment">//将删除的改进回来</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDeleteById2</span><span class="params">()</span> &#123;</span><br><span class="line">    userMapper.deleteById(<span class="number">1667060406940205058L</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/06/09/G8Wx9pYEhKjDzrb.png" alt="image-20230609173607419"></p><p><img src="https://s2.loli.net/2023/06/09/F1PUxYZavVIcd4O.png" alt="image-20230609173630690"></p><p>到这里CRUD就结束了，没事进入正题，性能分析(Swagger也可以做),Warpper(核心)，代码生成器</p><h2 id="5-性能分析插件"><a href="#5-性能分析插件" class="headerlink" title="5.性能分析插件"></a>5.性能分析插件</h2><p>我们在平时的开发中，会遇到一些满Sql。测试、druid···</p><p>MybatisPlus也提供了性能分析插件，如果超过这个时间就停止运行！</p><p><strong>性能分析拦截器作用：用于输出每条sql语句及其执行时间</strong></p><p>注意：</p><p>3.2.0版本之后，mp自带的性能分析插件被官方移除了，而推荐食用第三方性能分析插件</p><h4 id="1-导入依赖"><a href="#1-导入依赖" class="headerlink" title="1.导入依赖"></a>1.导入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--第三方性能分析插件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>p6spy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>p6spy<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-resources下书写spy-properties"><a href="#2-resources下书写spy-properties" class="headerlink" title="2.resources下书写spy.properties"></a>2.resources下书写spy.properties</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">modulelist</span>=<span class="string">com.baomidou.mybatisplus.extension.p6spy.MybatisPlusLogFactory,com.p6spy.engine.outage.P6OutageFactory</span></span><br><span class="line"><span class="comment"># 自定义日志打印</span></span><br><span class="line"><span class="attr">logMessageFormat</span>=<span class="string">com.baomidou.mybatisplus.extension.p6spy.P6SpyLogger</span></span><br><span class="line"><span class="comment">#日志输出到控制台</span></span><br><span class="line"><span class="attr">appender</span>=<span class="string">com.baomidou.mybatisplus.extension.p6spy.StdoutLogger</span></span><br><span class="line"><span class="comment"># 使用日志系统记录 sql</span></span><br><span class="line"><span class="comment">#appender=com.p6spy.engine.spy.appender.Slf4JLogger</span></span><br><span class="line"><span class="comment"># 设置 p6spy driver 代理</span></span><br><span class="line"><span class="attr">deregisterdrivers</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"># 取消JDBC URL前缀</span></span><br><span class="line"><span class="attr">useprefix</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"># 配置记录 Log 例外,可去掉的结果集有error,info,batch,debug,statement,commit,rollback,result,resultset.</span></span><br><span class="line"><span class="attr">excludecategories</span>=<span class="string">info,debug,result,commit,resultset</span></span><br><span class="line"><span class="comment"># 日期格式</span></span><br><span class="line"><span class="attr">dateformat</span>=<span class="string">yyyy-MM-dd HH:mm:ss</span></span><br><span class="line"><span class="comment"># 实际驱动可多个</span></span><br><span class="line"><span class="comment">#driverlist=org.h2.Driver</span></span><br><span class="line"><span class="comment"># 是否开启慢SQL记录</span></span><br><span class="line"><span class="attr">outagedetection</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"># 慢SQL记录标准 2 秒</span></span><br><span class="line"><span class="attr">outagedetectioninterval</span>=<span class="string">2</span></span><br></pre></td></tr></table></figure><h4 id="3-更改数据库连接配置"><a href="#3-更改数据库连接配置" class="headerlink" title="3.更改数据库连接配置"></a>3.更改数据库连接配置</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#数据库连接配置</span></span><br><span class="line"><span class="attr">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">spring.datasource.password</span>=<span class="string">123456</span></span><br><span class="line"><span class="comment">#mysql5~8 驱动不同driver-class-name     8需要增加时区的配置serverTimezone=UTC</span></span><br><span class="line"><span class="comment">#useSSL=false 安全连接</span></span><br><span class="line"><span class="attr">spring.datasource.url</span>=<span class="string">jdbc:p6spy:mysql://localhost:3306/mybatis_plus?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf-8</span></span><br><span class="line"><span class="attr">spring.datasource.driver-class-name</span>=<span class="string">com.p6spy.engine.spy.P6SpyDriver</span></span><br><span class="line"><span class="comment">#spring.datasource:.driver-class-name=com.p6spy.engine.spy.P6SpyDriver \</span></span><br><span class="line"><span class="comment">#  #换成p6spy的驱动</span></span><br><span class="line"><span class="comment"># spring.datasource.url=jdbc:p6spy:mysql...</span></span><br></pre></td></tr></table></figure><h4 id="4-测试-1"><a href="#4-测试-1" class="headerlink" title="4.测试"></a>4.测试</h4><p>随便测试一条sql</p><p>可以发现sql中逻辑删除掉的数据不会被查询出来</p><p><img src="https://s2.loli.net/2023/06/09/P84XkLm5aBvFZiu.png" alt="image-20230609183125957"></p><p>注意：尽量不要在生成环境时候使用，会影响性能，在测试(test)和开发(dev)环境中使用有利于以后根据sql快慢进行优化</p><h2 id="6-条件查询器-核心"><a href="#6-条件查询器-核心" class="headerlink" title="6.条件查询器(核心)"></a>6.条件查询器(核心)</h2><h4 id="1-测试1"><a href="#1-测试1" class="headerlink" title="1.测试1"></a>1.测试1</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WrapperTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testWrapper1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//参数是一个wrapper ，条件构造器，和刚才的map对比学习！</span></span><br><span class="line">        <span class="comment">//查询name不为空，email不为空，age大于且等于18的用户</span></span><br><span class="line">        QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">        wrapper</span><br><span class="line">                .isNotNull(<span class="string">&quot;name&quot;</span>)</span><br><span class="line">                .isNotNull(<span class="string">&quot;email&quot;</span>)</span><br><span class="line">                .ge(<span class="string">&quot;age&quot;</span>,<span class="number">18</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;User&gt; users = userMapper.selectList(wrapper);</span><br><span class="line">        users.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/06/09/zMSrvdl7GZ2TIjX.png" alt="image-20230609184449735"></p><h4 id="2-测试2"><a href="#2-测试2" class="headerlink" title="2.测试2"></a>2.测试2</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testWrapper2</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//查询name=hyh的用户</span></span><br><span class="line">    QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">    wrapper.eq(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;hyh&quot;</span>);</span><br><span class="line">    <span class="comment">//查询一个数据selectOne，若查询出多个会报错</span></span><br><span class="line">    <span class="comment">//Expected one result (or null) to be returned by selectOne(), but found: *</span></span><br><span class="line">    <span class="comment">//若出现多个结果使用list或map</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.selectOne(wrapper);<span class="comment">//查询一个数据，若出现多个结果使用list或map</span></span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/06/09/YEVi4QcuqrthyZ1.png" alt="image-20230609184706240"></p><h4 id="3-测试3"><a href="#3-测试3" class="headerlink" title="3.测试3"></a>3.测试3</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testWrapper3</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//查询age在20-30之间的用户</span></span><br><span class="line">    QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">    wrapper.between(<span class="string">&quot;age&quot;</span>, <span class="number">20</span>, <span class="number">30</span>);<span class="comment">//区间</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">count</span> <span class="operator">=</span> userMapper.selectCount(wrapper);<span class="comment">//输出查询的数量selectCount</span></span><br><span class="line">    System.out.println(count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/06/09/6mHt9WZhTGDjnB2.png" alt="image-20230609185046733"></p><h4 id="4-测试4"><a href="#4-测试4" class="headerlink" title="4.测试4"></a>4.测试4</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testWrapper4</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//模糊查询</span></span><br><span class="line">    <span class="comment">//查询名字中不包含a的</span></span><br><span class="line">    <span class="comment">//邮箱中%右边边包含t的</span></span><br><span class="line">    QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">    wrapper</span><br><span class="line">            .notLike(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;a&quot;</span>)</span><br><span class="line">            .likeRight(<span class="string">&quot;email&quot;</span>,<span class="string">&quot;t&quot;</span>);</span><br><span class="line">    List&lt;Map&lt;String, Object&gt;&gt; maps = userMapper.selectMaps(wrapper);</span><br><span class="line">    maps.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/06/09/VJ59nqkRj4QBo3e.png" alt="image-20230609190105146"></p><h4 id="5-测试5"><a href="#5-测试5" class="headerlink" title="5.测试5"></a>5.测试5</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testWrapper5</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//模糊查询</span></span><br><span class="line">    <span class="comment">// SELECT id,name,age,email,version,deleted,create_time,update_time</span></span><br><span class="line">    <span class="comment">//FROM user</span></span><br><span class="line">    <span class="comment">//WHERE deleted=0 AND id IN</span></span><br><span class="line">    <span class="comment">//(select id from user where id&lt;5)</span></span><br><span class="line">    QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//id 在子查询中查出来</span></span><br><span class="line">    wrapper.inSql(<span class="string">&quot;id&quot;</span>,<span class="string">&quot;select id from user where id&lt;5&quot;</span>);</span><br><span class="line">    List&lt;Object&gt; objects = userMapper.selectObjs(wrapper);</span><br><span class="line">    objects.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/06/09/GM4nNOujb3hCzXY.png" alt="image-20230609190302510"></p><h4 id="6-测试6"><a href="#6-测试6" class="headerlink" title="6.测试6"></a>6.测试6</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testWrapper6</span><span class="params">()</span> &#123;</span><br><span class="line">    QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//通过id进行降序排序</span></span><br><span class="line">    wrapper.orderByDesc(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">    List&lt;User&gt; userList = userMapper.selectList(wrapper);</span><br><span class="line">    userList.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/06/09/vhegByFYbPaq6WQ.png" alt="image-20230609190430768"></p><h2 id="7-代码生成器-单独写"><a href="#7-代码生成器-单独写" class="headerlink" title="7.代码生成器(单独写)"></a>7.代码生成器(单独写)</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;MyBatis-Plus&quot;&gt;&lt;a href=&quot;#MyBatis-Plus&quot; class=&quot;headerlink&quot; title=&quot;MyBatis-Plus&quot;&gt;&lt;/a&gt;MyBatis-Plus&lt;/h1&gt;&lt;h2 id=&quot;1-简介&quot;&gt;&lt;a href=&quot;#1-简介&quot; cla</summary>
      
    
    
    
    <category term="框架" scheme="https://humbledong.github.io/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
    <category term="MyBatis-plus" scheme="https://humbledong.github.io/tags/MyBatis-plus/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot2-task</title>
    <link href="https://humbledong.github.io/undefined/6fcd83fa.html"/>
    <id>https://humbledong.github.io/undefined/6fcd83fa.html</id>
    <published>2023-05-08T14:14:03.000Z</published>
    <updated>2024-01-07T11:26:25.585Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot-任务"><a href="#SpringBoot-任务" class="headerlink" title="SpringBoot-任务"></a>SpringBoot-任务</h1><h2 id="了解"><a href="#了解" class="headerlink" title="了解"></a>了解</h2><p>在我们的工作中，常常会用到异步处理任务，比如我们在网站上发送邮件，后台会去发送邮件，此时前台会造成响应不动，直到邮件发送完毕，响应才会成功，所以我们一般会采用多线程的方式去处理这些任务。还有一些定时任务，比如需要在每天凌晨的时候，分析一次前一天的日志信息。还有就是邮件的发送，微信的前身也是邮件服务呢？这些东西都是怎么实现的呢？其实SpringBoot都给我们提供了对应的支持，我们上手使用十分的简单，只需要开启一些注解支持，配置一些配置文件即可！那我们来看看吧~  </p><h2 id="1-异步任务"><a href="#1-异步任务" class="headerlink" title="1.异步任务"></a>1.异步任务</h2><p>1.创建一个service包</p><p>2.创建一个类AsyncService</p><p>异步处理还是非常常用的，比如我们在网站上发送邮件，后台会去发送邮件，此时前台会造成响应不动，直到邮件发送完毕，响应才会成功，所以我们一般会采用多线程的方式去处理这些任务。</p><p>编写方法，假装正在处理数据，使用线程设置一些延时，模拟同步等待的情况；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AsyncService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;数据处理中....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.编写controller包</p><p>4.编写AsyncController类</p><p>我们去写一个Controller测试一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AsyncController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    AsyncService asyncService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">        asyncService.hello();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5.访问<a href="http://localhost:8080/hello%E8%BF%9B%E8%A1%8C%E6%B5%8B%E8%AF%95%EF%BC%8C3%E7%A7%92%E5%90%8E%E5%87%BA%E7%8E%B0success%EF%BC%8C%E8%BF%99%E6%98%AF%E5%90%8C%E6%AD%A5%E7%AD%89%E5%BE%85%E7%9A%84%E6%83%85%E5%86%B5%E3%80%82">http://localhost:8080/hello进行测试，3秒后出现success，这是同步等待的情况。</a></p><p>问题：我们如果想让用户直接得到消息，就在后台使用多线程的方式进行处理即可，但是每次都需要自己手动去编写多线程的实现的话，太麻烦了，我们只需要用一个简单的办法，在我们的方法上加一个简单的注解即可，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//告诉Spring这是一个异步方法</span></span><br><span class="line"><span class="meta">@Async</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">       Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">       e.printStackTrace();</span><br><span class="line">  &#125;</span><br><span class="line">   System.out.println(<span class="string">&quot;业务进行中....&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SpringBoot就会自己开一个线程池，进行调用！但是要让这个注解生效，我们还需要在主程序上添加一个注解@EnableAsync ，开启异步注解功能；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableAsync</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Springboot09TaslApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(Springboot09TaslApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>7、重启测试，网页瞬间响应，后台代码依旧执行！</p><h2 id="2-邮件任务"><a href="#2-邮件任务" class="headerlink" title="2.邮件任务"></a>2.邮件任务</h2><p>邮件发送，在我们的日常开发中，也非常的多，Springboot也帮我们做了支持</p><ul><li>邮件发送需要引入spring-boot-start-mail</li><li>SpringBoot 自动配置MailSenderAutoConfiguration</li><li>定义MailProperties内容，配置在application.yml中</li><li>自动装配JavaMailSender</li><li>测试邮件发送</li></ul><h3 id="1-测试"><a href="#1-测试" class="headerlink" title="1.测试"></a>1.测试</h3><p>1、引入pom依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-mail<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>看它引入的依赖，可以看到 jakarta.mail</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sun.mail<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jakarta.mail<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-查看自动配置类：MailSenderAutoConfiguration"><a href="#2-查看自动配置类：MailSenderAutoConfiguration" class="headerlink" title="2.查看自动配置类：MailSenderAutoConfiguration"></a>2.查看自动配置类：MailSenderAutoConfiguration</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Import(&#123;MailSenderJndiConfiguration.class, MailSenderPropertiesConfiguration.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MailSenderAutoConfiguration</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MailSenderAutoConfiguration</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>MailSenderJndiConfiguration这个类中没有注册bena，看一下它导入的其他类</p><p>MailSenderJndiConfiguration</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">JavaMailSenderImpl <span class="title function_">mailSender</span><span class="params">(Session session)</span> &#123;</span><br><span class="line">    <span class="type">JavaMailSenderImpl</span> <span class="variable">sender</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JavaMailSenderImpl</span>();</span><br><span class="line">    sender.setDefaultEncoding(<span class="built_in">this</span>.properties.getDefaultEncoding().name());</span><br><span class="line">    sender.setSession(session);</span><br><span class="line">    <span class="keyword">return</span> sender;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们去看下配置文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(</span></span><br><span class="line"><span class="meta">   prefix = &quot;spring.mail&quot;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MailProperties</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Charset DEFAULT_CHARSET;</span><br><span class="line">   <span class="keyword">private</span> String host;</span><br><span class="line">   <span class="keyword">private</span> Integer port;</span><br><span class="line">   <span class="keyword">private</span> String username;</span><br><span class="line">   <span class="keyword">private</span> String password;</span><br><span class="line">   <span class="keyword">private</span> <span class="type">String</span> <span class="variable">protocol</span> <span class="operator">=</span> <span class="string">&quot;smtp&quot;</span>;</span><br><span class="line">   <span class="keyword">private</span> Charset defaultEncoding;</span><br><span class="line">   <span class="keyword">private</span> Map&lt;String, String&gt; properties;</span><br><span class="line">   <span class="keyword">private</span> String jndiName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、配置文件："><a href="#3、配置文件：" class="headerlink" title="3、配置文件："></a>3、配置文件：</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.mail.username</span>=<span class="string">1355407724@qq.com</span></span><br><span class="line"><span class="attr">spring.mail.password</span>=<span class="string">你的qq授权码</span></span><br><span class="line"><span class="attr">spring.mail.host</span>=<span class="string">smtp.qq.com</span></span><br><span class="line"><span class="comment"># qq需要配置ssl</span></span><br><span class="line"><span class="comment">#开启加密验证,只有qq邮箱需要</span></span><br><span class="line"><span class="attr">spring.mail.properties.mail.smtp.ssl.enable</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure><p>获取授权码：在QQ邮箱中的设置-&gt;账户-&gt;开启pop3和smtp服务</p><p><img src="https://s2.loli.net/2023/05/08/KulnD7AJGNj1vpa.png" alt="image-20230508125541862"></p><h3 id="4-Spring单元测试"><a href="#4-Spring单元测试" class="headerlink" title="4.Spring单元测试"></a>4.Spring单元测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ldd;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.mail.SimpleMailMessage;</span><br><span class="line"><span class="keyword">import</span> org.springframework.mail.javamail.JavaMailSenderImpl;</span><br><span class="line"><span class="keyword">import</span> org.springframework.mail.javamail.MimeMailMessage;</span><br><span class="line"><span class="keyword">import</span> org.springframework.mail.javamail.MimeMessageHelper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.mail.MessagingException;</span><br><span class="line"><span class="keyword">import</span> javax.mail.internet.MimeMessage;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Springboot09TaskApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    JavaMailSenderImpl mailSender;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//一个简单的邮件</span></span><br><span class="line">        <span class="type">SimpleMailMessage</span> <span class="variable">mailMessage</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleMailMessage</span>();</span><br><span class="line"></span><br><span class="line">        mailMessage.setSubject(<span class="string">&quot;通知：&quot;</span>);</span><br><span class="line">        mailMessage.setText(<span class="string">&quot;五一长假已经结束了，请好好搬砖&quot;</span>);</span><br><span class="line"></span><br><span class="line">        mailMessage.setTo(<span class="string">&quot;3187162029@qq.com&quot;</span>);<span class="comment">//收件人</span></span><br><span class="line">        mailMessage.setFrom(<span class="string">&quot;1355407724@qq.com&quot;</span>);<span class="comment">//发件人</span></span><br><span class="line"></span><br><span class="line">        mailSender.send(mailMessage);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">contextLoads2</span><span class="params">()</span> <span class="keyword">throws</span> MessagingException &#123;</span><br><span class="line">        <span class="comment">//一个复杂的邮件</span></span><br><span class="line">        <span class="comment">//new MimeMailMessage();和下面方式一样</span></span><br><span class="line">        <span class="type">MimeMessage</span> <span class="variable">mimeMessage</span> <span class="operator">=</span> mailSender.createMimeMessage();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//组装</span></span><br><span class="line">        <span class="type">MimeMessageHelper</span> <span class="variable">helper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MimeMessageHelper</span>(mimeMessage, <span class="literal">true</span>);</span><br><span class="line">        helper.setSubject(<span class="string">&quot;通知：&quot;</span>);</span><br><span class="line">        helper.setText(<span class="string">&quot;&lt;p&gt;今天全体放假了哦！收假日期为&lt;span style=&#x27;color:red&#x27;&gt;2023年5月8日&lt;/span&gt;&lt;/p&gt;&quot;</span>,<span class="literal">true</span>);<span class="comment">//是否开启html识别</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//附件</span></span><br><span class="line">        helper.addAttachment(<span class="string">&quot;一个图片&quot;</span>,<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;C:\\Users\\ASUS\\Desktop\\1.png&quot;</span>));</span><br><span class="line"></span><br><span class="line">        helper.setTo(<span class="string">&quot;3187162029@qq.com&quot;</span>);<span class="comment">//收件人</span></span><br><span class="line">        helper.setFrom(<span class="string">&quot;1355407724@qq.com&quot;</span>);<span class="comment">//发件人</span></span><br><span class="line"></span><br><span class="line">        mailSender.send(mimeMessage);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/05/08/oW9ys4EV3ejTzg2.png" alt="image-20230508125644587"></p><p><img src="https://s2.loli.net/2023/05/09/EpxWS4acz7j9wT6.png" alt="image-20230509094859380"></p><p>查看邮箱，邮件接收成功！我们只需要使用Thymeleaf进行前后端结合即可开发自己网站邮件收发功能了！</p><h2 id="3-定时任务"><a href="#3-定时任务" class="headerlink" title="3.定时任务"></a>3.定时任务</h2><p>项目开发中经常需要执行一些定时任务，比如需要在每天凌晨的时候，分析一次前一天的日志信息，Spring为我们提供了异步执行任务调度的方式，提供了两个接口。</p><ul><li>TaskExecutor接口</li><li>TaskScheduler接口</li></ul><p>两个注解：</p><ul><li>@EnableScheduling</li><li>@Scheduled</li><li></li></ul><p><strong>cron表达式：</strong></p><p>1.创建一个ScheduledService</p><p>我们里面存在一个hello方法，他需要定时执行，怎么处理呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ScheduledService</span> &#123;</span><br><span class="line">    <span class="comment">//秒  分   时   日   月   周几</span></span><br><span class="line">    <span class="comment">//0 * * * * MON-FRI</span></span><br><span class="line">    <span class="comment">//注意cron表达式的用法；</span></span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;0 * * * * 0-7&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello.....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.这里写完定时任务之后，我们需要在主程序上增加@EnableScheduling 开启定时任务功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableAsync</span> <span class="comment">//开启异步注解功能</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableScheduling</span> <span class="comment">//开启基于注解的定时任务</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Springboot09TaskApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(Springboot09TaskApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.我们来详细了解下cron表达式；</p><p><a href="http://www.bejson.com/othertools/cron/">http://www.bejson.com/othertools/cron/</a></p><p>4.常用的表达式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">（1）0/2 * * * * ?   表示每2秒 执行任务</span><br><span class="line">（1）0 0/2 * * * ?   表示每2分钟 执行任务</span><br><span class="line">（1）0 0 2 1 * ?   表示在每月的1日的凌晨2点调整任务</span><br><span class="line">（2）0 15 10 ? * MON-FRI   表示周一到周五每天上午10:15执行作业</span><br><span class="line">（3）0 15 10 ? 6L 2002-2006   表示2002-2006年的每个月的最后一个星期五上午10:15执行作</span><br><span class="line">（4）0 0 10,14,16 * * ?   每天上午10点，下午2点，4点</span><br><span class="line">（5）0 0/30 9-17 * * ?   朝九晚五工作时间内每半小时</span><br><span class="line">（6）0 0 12 ? * WED   表示每个星期三中午12点</span><br><span class="line">（7）0 0 12 * * ?   每天中午12点触发</span><br><span class="line">（8）0 15 10 ? * *   每天上午10:15触发</span><br><span class="line">（9）0 15 10 * * ?     每天上午10:15触发</span><br><span class="line">（10）0 15 10 * * ?   每天上午10:15触发</span><br><span class="line">（11）0 15 10 * * ? 2005   2005年的每天上午10:15触发</span><br><span class="line">（12）0 * 14 * * ?     在每天下午2点到下午2:59期间的每1分钟触发</span><br><span class="line">（13）0 0/5 14 * * ?   在每天下午2点到下午2:55期间的每5分钟触发</span><br><span class="line">（14）0 0/5 14,18 * * ?     在每天下午2点到2:55期间和下午6点到6:55期间的每5分钟触发</span><br><span class="line">（15）0 0-5 14 * * ?   在每天下午2点到下午2:05期间的每1分钟触发</span><br><span class="line">（16）0 10,44 14 ? 3 WED   每年三月的星期三的下午2:10和2:44触发</span><br><span class="line">（17）0 15 10 ? * MON-FRI   周一至周五的上午10:15触发</span><br><span class="line">（18）0 15 10 15 * ?   每月15日上午10:15触发</span><br><span class="line">（19）0 15 10 L * ?   每月最后一日的上午10:15触发</span><br><span class="line">（20）0 15 10 ? * 6L   每月的最后一个星期五上午10:15触发</span><br><span class="line">（21）0 15 10 ? * 6L 2002-2005   2002年至2005年的每月的最后一个星期五上午10:15触发</span><br><span class="line">（22）0 15 10 ? * 6#3   每月的第三个星期五上午10:15触发</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;SpringBoot-任务&quot;&gt;&lt;a href=&quot;#SpringBoot-任务&quot; class=&quot;headerlink&quot; title=&quot;SpringBoot-任务&quot;&gt;&lt;/a&gt;SpringBoot-任务&lt;/h1&gt;&lt;h2 id=&quot;了解&quot;&gt;&lt;a href=&quot;#了解&quot; cla</summary>
      
    
    
    
    <category term="SpringBoot2" scheme="https://humbledong.github.io/categories/SpringBoot2/"/>
    
    
    <category term="定时task" scheme="https://humbledong.github.io/tags/%E5%AE%9A%E6%97%B6task/"/>
    
    <category term="邮件task" scheme="https://humbledong.github.io/tags/%E9%82%AE%E4%BB%B6task/"/>
    
    <category term="异步task" scheme="https://humbledong.github.io/tags/%E5%BC%82%E6%AD%A5task/"/>
    
    <category term="cron表达式" scheme="https://humbledong.github.io/tags/cron%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot2-Swagger</title>
    <link href="https://humbledong.github.io/undefined/384fce0c.html"/>
    <id>https://humbledong.github.io/undefined/384fce0c.html</id>
    <published>2023-05-04T01:34:20.000Z</published>
    <updated>2024-01-07T11:24:59.771Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot-Swagger"><a href="#SpringBoot-Swagger" class="headerlink" title="SpringBoot-Swagger"></a>SpringBoot-Swagger</h1><p><img src="https://s2.loli.net/2023/04/27/s6qWxFOL9SgARbk.png" alt="image-20230427094028541"></p><h2 id="1-Swagger简介"><a href="#1-Swagger简介" class="headerlink" title="1.Swagger简介"></a>1.Swagger简介</h2><p><strong>前后端分离</strong></p><ul><li>前端 -&gt; 前端控制层、视图层</li><li>后端 -&gt; 后端控制层、服务层、数据访问层</li><li>前后端通过API进行交互</li><li>前后端相对独立且松耦合</li></ul><p><strong>产生的问题</strong></p><ul><li>前后端集成，前端或者后端无法做到“及时协商，尽早解决”，最终导致问题集中爆发</li></ul><p><strong>解决方案</strong></p><ul><li>首先定义schema [ 计划的提纲 ]，并实时跟踪最新的API，降低集成风险</li></ul><p><strong>Swagger</strong></p><ul><li>号称世界上最流行的API框架</li><li>Restful Api 文档在线自动生成器 &#x3D;&gt; <strong>API 文档 与API 定义同步更新</strong></li><li>直接运行，在线测试API</li><li>支持多种语言 （如：Java，PHP等）</li><li>官网：<a href="https://swagger.io/">https://swagger.io/</a></li></ul><h2 id="2-SpringBoot集成Swagger"><a href="#2-SpringBoot集成Swagger" class="headerlink" title="2.SpringBoot集成Swagger"></a>2.SpringBoot集成Swagger</h2><p>在项目中使用Swagger&#x3D;&#x3D;&gt;springfox,两个jar包</p><ul><li>swagger2</li><li>ui</li></ul><p>1.新建一个模块</p><p>springboot-08-swagger</p><p>2.添加maven依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger2 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger-ui --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.编写HelloController，测试确保运行成功</p><p>4.要使用Swagger，我们需要编写一个配置类-SwaggerConfig来配置 Swagger</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span> <span class="comment">//配置类</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span><span class="comment">// 开启Swagger2的自动配置</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SwaggerConfig</span> &#123;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5.访问测试：</p><p><a href="http://localhost:8080/swagger-ui.html">http://localhost:8080/swagger-ui.html</a></p><p><img src="https://s2.loli.net/2023/05/06/mozScNYDG56wvg9.png" alt="image-20230506142519763"></p><h2 id="3-配置Swagger"><a href="#3-配置Swagger" class="headerlink" title="3.配置Swagger"></a>3.配置Swagger</h2><p>1.Swagger实例Bean是Docket，所以通过配置Docket实例来配置Swaggger。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span> <span class="comment">//配置docket以配置Swagger具体参数</span></span><br><span class="line"><span class="keyword">public</span> Docket <span class="title function_">docket</span><span class="params">()</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.可以通过apiInfo()属性配置文档信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Contact contact= <span class="keyword">new</span> <span class="title class_">Contact</span>(<span class="string">&quot;黎冬冬&quot;</span>,<span class="string">&quot;https://gh.qisui.xyz/&quot;</span>,<span class="string">&quot;1355407724@qq.com&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//配置Swagger信息，apiInfo</span></span><br><span class="line"><span class="keyword">public</span> ApiInfo <span class="title function_">apiInfo</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ApiInfo</span>(</span><br><span class="line">            <span class="string">&quot;小东的SwaggerApi文档&quot;</span>,</span><br><span class="line">            <span class="string">&quot;世界很大，我想去看看&quot;</span>,</span><br><span class="line">            <span class="string">&quot;1.0&quot;</span>,</span><br><span class="line">            <span class="string">&quot;https://gh.qisui.xyz/&quot;</span>,</span><br><span class="line">            contact,<span class="comment">//联系人信息</span></span><br><span class="line">            <span class="string">&quot;Apache 2.0&quot;</span>,</span><br><span class="line">            <span class="string">&quot;http://www.apache.org/licenses/LICENSE-2.0&quot;</span>,</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">ArrayList</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.Docket 实例关联上 apiInfo()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> Docket <span class="title function_">docket</span><span class="params">()</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2).apiInfo(apiInfo());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.重启项目，访问测试 <a href="http://localhost:8080/swagger-ui.html">http://localhost:8080/swagger-ui.html</a>  看下效果；</p><p><img src="https://s2.loli.net/2023/05/06/xTn8tcfsJaukEqv.png" alt="image-20230506144320885"></p><h2 id="4-配置扫描接口"><a href="#4-配置扫描接口" class="headerlink" title="4.配置扫描接口"></a>4.配置扫描接口</h2><p>1.通过Docket.select()方法配置扫描的接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> Docket <span class="title function_">docket</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2)</span><br><span class="line">            .apiInfo(apiInfo())</span><br><span class="line">            .select()</span><br><span class="line">            <span class="comment">//RequestHandlerSelectors 配置扫描接口的方式</span></span><br><span class="line">            <span class="comment">//basePackage 指定要扫描的包</span></span><br><span class="line">            <span class="comment">//any() 扫描全部</span></span><br><span class="line">            <span class="comment">//none() 不扫描</span></span><br><span class="line">            <span class="comment">//.withClassAnnotation()扫描类上的注解</span></span><br><span class="line">            <span class="comment">//.withMethodAnnotation() 扫描方法上的注解</span></span><br><span class="line">            .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.ldd.controller&quot;</span>))</span><br><span class="line">            <span class="comment">//paths  过滤什么请求</span></span><br><span class="line">            <span class="comment">//.paths(PathSelectors.ant(&quot;ldd/**&quot;))</span></span><br><span class="line">            .build();<span class="comment">//工厂模式</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.重启项目测试，由于我们配置根据包的路径扫描接口，所以我们只能看到一个类</p><p>3.除了通过包路径配置扫描接口外，还可以通过配置其他方式扫描接口，这里注释一下所有的配置方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">any() <span class="comment">// 扫描所有，项目中的所有接口都会被扫描到</span></span><br><span class="line">none() <span class="comment">// 不扫描接口</span></span><br><span class="line"><span class="comment">// 通过方法上的注解扫描，如withMethodAnnotation(GetMapping.class)只扫描get请求</span></span><br><span class="line">withMethodAnnotation(<span class="keyword">final</span> Class&lt;? <span class="keyword">extends</span> <span class="title class_">Annotation</span>&gt; annotation)</span><br><span class="line"><span class="comment">// 通过类上的注解扫描，如.withClassAnnotation(Controller.class)只扫描有controller注解的类中的接口</span></span><br><span class="line">withClassAnnotation(<span class="keyword">final</span> Class&lt;? <span class="keyword">extends</span> <span class="title class_">Annotation</span>&gt; annotation)</span><br><span class="line">basePackage(<span class="keyword">final</span> String basePackage) <span class="comment">// 根据包路径扫描接口</span></span><br></pre></td></tr></table></figure><p>4.除此之外，我们还可以配置接口扫描过滤</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//paths  过滤什么请求</span></span><br><span class="line"><span class="comment">//.paths(PathSelectors.ant(&quot;ldd/**&quot;))</span></span><br></pre></td></tr></table></figure><p>5.这里的可选值还有</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">any() <span class="comment">// 任何请求都扫描</span></span><br><span class="line">none() <span class="comment">// 任何请求都不扫描</span></span><br><span class="line">regex(<span class="keyword">final</span> String pathRegex) <span class="comment">// 通过正则表达式控制</span></span><br><span class="line">ant(<span class="keyword">final</span> String antPattern) <span class="comment">// 通过ant()控制</span></span><br></pre></td></tr></table></figure><h2 id="5-配置Swagger开关"><a href="#5-配置Swagger开关" class="headerlink" title="5.配置Swagger开关"></a>5.配置Swagger开关</h2><p>1.通过enable()方法配置是否启用swagger，如果是false，swagger将不能在浏览器中访问了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> Docket <span class="title function_">docket</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2)</span><br><span class="line">            .apiInfo(apiInfo())</span><br><span class="line">            .enable(<span class="literal">false</span>)</span><br><span class="line">            .select()</span><br><span class="line">            <span class="comment">//RequestHandlerSelectors 配置扫描接口的方式</span></span><br><span class="line">            <span class="comment">//basePackage 指定要扫描的包</span></span><br><span class="line">            <span class="comment">//any() 扫描全部</span></span><br><span class="line">            <span class="comment">//none() 不扫描</span></span><br><span class="line">            <span class="comment">//.withClassAnnotation()扫描类上的注解</span></span><br><span class="line">            <span class="comment">//.withMethodAnnotation() 扫描方法上的注解</span></span><br><span class="line">            .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.ldd.controller&quot;</span>))</span><br><span class="line">            <span class="comment">//paths  过滤什么请求</span></span><br><span class="line">            <span class="comment">//.paths(PathSelectors.ant(&quot;ldd/**&quot;))</span></span><br><span class="line">            .build();<span class="comment">//工厂模式</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/05/06/P6vNojRwQfqunIC.png" alt="image-20230506151606862"></p><p>2.如何动态配置当项目处于test、dev环境时显示swagger，处于prod时不显示？</p><p>写两个配置文件</p><p>application-dev.properties  端口为:8081</p><p>application-prod.properties 端口为:8082</p><p>我们在总的配置文件中激活dev的环境</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.profiles.active</span>=<span class="string">dev</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//配置Swagger的bean实例</span></span><br><span class="line"><span class="comment">//把信息替换成我们的</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> Docket <span class="title function_">docket</span><span class="params">(Environment environment)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置要显示的Swagger环境</span></span><br><span class="line">    Profiles profiles=Profiles.of(<span class="string">&quot;dev&quot;</span>,<span class="string">&quot;test&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取项目的环境</span></span><br><span class="line">    <span class="comment">//通过environment.acceptsProfiles判断是否处在自己设定的环境当中</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> environment.acceptsProfiles(profiles);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2)</span><br><span class="line">            .apiInfo(apiInfo())</span><br><span class="line">            .enable(flag)<span class="comment">//配置是否启用Swagger，如果是false，在浏览器将无法访问</span></span><br><span class="line">            .select()</span><br><span class="line">            <span class="comment">//RequestHandlerSelectors 配置扫描接口的方式</span></span><br><span class="line">            <span class="comment">//basePackage 指定要扫描的包</span></span><br><span class="line">            <span class="comment">//any() 扫描全部</span></span><br><span class="line">            <span class="comment">//none() 不扫描</span></span><br><span class="line">            <span class="comment">//.withClassAnnotation()扫描类上的注解</span></span><br><span class="line">            <span class="comment">//.withMethodAnnotation() 扫描方法上的注解</span></span><br><span class="line">            .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.ldd.controller&quot;</span>))</span><br><span class="line">            <span class="comment">//paths  过滤什么请求</span></span><br><span class="line">            <span class="comment">//.paths(PathSelectors.ant(&quot;ldd/**&quot;))</span></span><br><span class="line">            .build();<span class="comment">//工厂模式</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.测试两个环境中是否可以实现需求，注意就是两套环境的端口不一样，访问的时候需要注意！测试完成即可！</p><h2 id="6-配置API分组"><a href="#6-配置API分组" class="headerlink" title="6.配置API分组"></a>6.配置API分组</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.groupName(<span class="string">&quot;小东&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/05/08/6G7MzylhQcTqWgU.png" alt="image-20230508103319435"></p><p>1.如果没有配置分组，默认是default。通过groupName()方法即可配置分组：</p><p>2.如何配置多个分组？配置多个分组只需要配置多个docket即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> Docket <span class="title function_">docket1</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2).groupName(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> Docket <span class="title function_">docket2</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2).groupName(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> Docket <span class="title function_">docket3</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2).groupName(<span class="string">&quot;C&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-实体类配置"><a href="#7-实体类配置" class="headerlink" title="7.实体类配置"></a>7.实体类配置</h2><p>1.新建一个实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiModel(&quot;用户实体类&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;用户名&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String username;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;密码&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.只要这个实体在<strong>请求接口</strong>的返回值上（即使是泛型），都能映射到实体项中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//只要我们的接口中，返回值存在实体类，他就会被扫描到Swagger中</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">user</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.重启查看测试</p><p><img src="https://s2.loli.net/2023/05/08/IbmUf6aNTjR8gGQ.png" alt="image-20230508104348959"></p><h2 id="8-常用注解"><a href="#8-常用注解" class="headerlink" title="8.常用注解"></a>8.常用注解</h2><p>Swagger的所有注解定义在io.swagger.annotations包下</p><p>下面列一些经常用到的，未列举出来的可以另行查阅说明：</p><table><thead><tr><th>Swagger注解</th><th>简单说明</th></tr></thead><tbody><tr><td>@Api(tags &#x3D; “xxx模块说明”)</td><td>作用在模块类上</td></tr><tr><td>@ApiOperation(“xxx接口说明”)</td><td>作用在接口方法上</td></tr><tr><td>@ApiModel(“xxxPOJO说明”)</td><td>作用在模型类上：如VO、BO</td></tr><tr><td>@ApiModelProperty(value &#x3D; “xxx属性说明”,hidden &#x3D; true)</td><td>作用在类方法和属性上，hidden设置为true可以隐藏该属性</td></tr><tr><td>@ApiParam(“xxx参数说明”)</td><td>作用在参数、方法和字段上，类似@ApiModelProperty</td></tr></tbody></table><p>这样的话，可以给一些比较难理解的属性或者接口，增加一些配置信息，让人更容易阅读！</p><p>相较于传统的Postman或Curl方式测试接口，使用swagger简直就是傻瓜式操作，不需要额外说明文档(写得好本身就是文档)而且更不容易出错，只需要录入数据然后点击Execute，如果再配合自动化框架，可以说基本就不需要人为操作了。</p><p>Swagger是个优秀的工具，现在国内已经有很多的中小型互联网公司都在使用它，相较于传统的要先出Word接口文档再测试的方式，显然这样也更符合现在的快速迭代开发行情。当然了，提醒下大家在正式环境要记得关闭Swagger，一来出于安全考虑二来也可以节省运行时内存。</p><h2 id="9-拓展换肤"><a href="#9-拓展换肤" class="headerlink" title="9.拓展换肤"></a>9.拓展换肤</h2><p>我们可以导入不同的包实现不同的皮肤定义：</p><p>1.默认的  <strong>访问 <a href="http://localhost:8080/swagger-ui.html">http://localhost:8080/swagger-ui.html</a></strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/05/08/TkQHlLtxm4CA2g5.png" alt="image-20230508104841065"></p><p>2.bootstrap-ui  <strong>访问 <a href="http://localhost:8080/doc.html">http://localhost:8080/doc.html</a></strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入swagger-bootstrap-ui包 /doc.html--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.xiaoymin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>swagger-bootstrap-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/05/08/GzvtAsNJ4mWx89i.png" alt="image-20230508105103379"></p><p>3.Layui-ui  <strong>访问 <a href="http://localhost:8080/docs.html">http://localhost:8080/docs.html</a></strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入swagger-ui-layer包 /docs.html--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.caspar-chen<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>swagger-ui-layer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>4、mg-ui  <strong>访问 <a href="http://localhost:8080/document.html">http://localhost:8080/document.html</a></strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入swagger-ui-layer包 /document.html--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zyplayer<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>swagger-mg-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/05/08/N73yWVShTdILGXR.png" alt="image-20230508105543494"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;SpringBoot-Swagger&quot;&gt;&lt;a href=&quot;#SpringBoot-Swagger&quot; class=&quot;headerlink&quot; title=&quot;SpringBoot-Swagger&quot;&gt;&lt;/a&gt;SpringBoot-Swagger&lt;/h1&gt;&lt;p&gt;&lt;img s</summary>
      
    
    
    
    <category term="SpringBoot2" scheme="https://humbledong.github.io/categories/SpringBoot2/"/>
    
    
    <category term="Swagger" scheme="https://humbledong.github.io/tags/Swagger/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot2-Shiro</title>
    <link href="https://humbledong.github.io/undefined/84f54256.html"/>
    <id>https://humbledong.github.io/undefined/84f54256.html</id>
    <published>2023-04-24T01:34:20.000Z</published>
    <updated>2024-01-07T11:25:27.773Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot-Shiro学习"><a href="#SpringBoot-Shiro学习" class="headerlink" title="SpringBoot-Shiro学习"></a>SpringBoot-Shiro学习</h1><h2 id="1-Shiro简介"><a href="#1-Shiro简介" class="headerlink" title="1.Shiro简介"></a>1.Shiro简介</h2><h3 id="1-1什么是Shiro"><a href="#1-1什么是Shiro" class="headerlink" title="1.1什么是Shiro"></a>1.1什么是Shiro</h3><ul><li>Apache Shiro是一个Java的安全(权限)框架</li><li>Shiro可以非常容易地开发出足够好地应用，其不仅可以用在JavaSE环境，也可以用在JavaEE环境</li><li>Shrio可以完成，认证，授权，加密，会话管理，Web集成，缓存等</li><li>下载地址：<a href="https://shiro.apache.org/">Apache Shiro | Simple. Java. Security.</a></li></ul><p><img src="https://s2.loli.net/2023/04/24/sXPdS5fUDajOERK.png" alt="image-20230424110006565"></p><h3 id="1-2有哪些功能"><a href="#1-2有哪些功能" class="headerlink" title="1.2有哪些功能"></a>1.2有哪些功能</h3><p><img src="https://s2.loli.net/2023/04/24/qN9XCcajMtsAU5G.png" alt="image-20230424125418466"></p><p><strong>Authentication</strong>：身份认证&#x2F;登录，验证用户是不是拥有相应的身份；</p><p><strong>Authorization</strong>：授权，即权限验证，验证某个已认证的用户是否拥有某个权限；即判断用户是否能做事情，常见的如：验证某个用户是否拥有某个角色。或者细粒度的验证某个用户对某个资源是否具有某个权限；</p><p><strong>Session Manager</strong>：会话管理，即用户登录后就是一次会话，在没有退出之前，它的所有信息都在会话中；会话可以是普通JavaSE环境的，也可以是如Web环境的；</p><p><strong>Cryptography</strong>：加密，保护数据的安全性，如密码加密存储到数据库，而不是明文存储；</p><p><strong>Web Support</strong>：Web支持，可以非常容易的集成到Web环境；</p><p><strong>Caching</strong>：缓存，比如用户登录后，其用户信息、拥有的角色&#x2F;权限不必每次去查，这样可以提高效率；</p><p><strong>Concurrency</strong>：shiro支持多线程应用的并发验证，即如在一个线程中开启另一个线程，能把权限自动传播过去；</p><p><strong>Testing</strong>：提供测试支持；</p><p><strong>Run As</strong>：允许一个用户假装为另一个用户（如果他们允许）的身份进行访问；</p><p><strong>Remember Me</strong>：记住我，这个是非常常见的功能，即一次登录后，下次再来的话不用登录了。</p><h3 id="1-3Shiro架构-外部"><a href="#1-3Shiro架构-外部" class="headerlink" title="1.3Shiro架构(外部)"></a>1.3Shiro架构(外部)</h3><p><img src="https://s2.loli.net/2023/04/24/B3fj152DgS8mUsF.png" alt="image-20230424125617474"></p><p>应用代码直接交互的对象是Subject，也就是说Shiro的对外API核心就是Subject；其每个API的含义：</p><p><strong>Subject</strong>：主体，代表了当前“用户”，这个用户不一定是一个具体的人，与当前应用交互的任何东西都是Subject，如网络爬虫，机器人等；即一个抽象概念；所有Subject都绑定到SecurityManager，与Subject的所有交互都会委托给SecurityManager；可以把Subject认为是一个门面；SecurityManager才是实际的执行者；</p><p><strong>SecurityManager</strong>：安全管理器；即所有与安全有关的操作都会与SecurityManager交互；且它管理着所有Subject；可以看出它是Shiro的核心，它负责与后边介绍的其他组件进行交互，如果学习过SpringMVC，你可以把它看成DispatcherServlet前端控制器；</p><p><strong>Realm</strong>：域，Shiro从从Realm获取安全数据（如用户、角色、权限），就是说SecurityManager要验证用户身份，那么它需要从Realm获取相应的用户进行比较以确定用户身份是否合法；也需要从Realm得到用户相应的角色&#x2F;权限进行验证用户是否能进行操作；可以把Realm看成DataSource，即安全数据源。</p><p>也就是说对于我们而言，最简单的一个Shiro应用：</p><p>应用代码通过Subject来进行认证和授权，而Subject又委托给SecurityManager；</p><p>我们需要给Shiro的SecurityManager注入Realm，从而让SecurityManager能得到合法的用户及其权限进行判断。</p><p>从以上也可以看出，Shiro不提供维护用户&#x2F;权限，而是通过Realm让开发人员自己注入</p><h3 id="1-4Shiro架构-内部"><a href="#1-4Shiro架构-内部" class="headerlink" title="1.4Shiro架构(内部)"></a>1.4Shiro架构(内部)</h3><p><img src="https://s2.loli.net/2023/04/24/CE435o69TRHrSFa.png" alt="image-20230424132444846"></p><p><strong>Subject</strong>：主体，可以看到主体可以是任何可以与应用交互的“用户”；</p><p><strong>SecurityManager</strong>：相当于SpringMVC中的DispatcherServlet或者Struts2中的FilterDispatcher；是Shiro的心脏；所有具体的交互都通过SecurityManager进行控制；它管理着所有Subject、且负责进行认证和授权、及会话、缓存的管理。</p><p><strong>Authenticator</strong>：认证器，负责主体认证的，这是一个扩展点，如果用户觉得Shiro默认的不好，可以自定义实现；其需要认证策略（Authentication Strategy），即什么情况下算用户认证通过了；</p><p><strong>Authrizer</strong>：授权器，或者访问控制器，用来决定主体是否有权限进行相应的操作；即控制着用户能访问应用中的哪些功能；</p><p><strong>Realm</strong>：可以有1个或多个Realm，可以认为是安全实体数据源，即用于获取安全实体的；可以是JDBC实现，也可以是LDAP实现，或者内存实现等等；由用户提供；注意：Shiro不知道你的用户&#x2F;权限存储在哪及以何种格式存储；所以我们一般在应用中都需要实现自己的Realm；</p><p><strong>SessionManager</strong>：如果写过Servlet就应该知道Session的概念，Session呢需要有人去管理它的生命周期，这个组件就是SessionManager；而Shiro并不仅仅可以用在Web环境，也可以用在如普通的JavaSE环境、EJB等环境；所有呢，Shiro就抽象了一个自己的Session来管理主体与应用之间交互的数据；这样的话，比如我们在Web环境用，刚开始是一台Web服务器；接着又上了台EJB服务器；这时想把两台服务器的会话数据放到一个地方，这个时候就可以实现自己的分布式会话（如把数据放到Memcached服务器）；</p><p><strong>SessionDAO</strong>：DAO大家都用过，数据访问对象，用于会话的CRUD，比如我们想把Session保存到数据库，那么可以实现自己的SessionDAO，通过如JDBC写到数据库；比如想把Session放到Memcached中，可以实现自己的Memcached SessionDAO；另外SessionDAO中可以使用Cache进行缓存，以提高性能；</p><p><strong>CacheManager</strong>：缓存控制器，来管理如用户、角色、权限等的缓存的；因为这些数据基本上很少去改变，放到缓存中后可以提高访问的性能</p><p><strong>Cryptography</strong>：密码模块，Shiro提高了一些常见的加密组件用于如密码加密&#x2F;解密的</p><h2 id="2-HelloShiro"><a href="#2-HelloShiro" class="headerlink" title="2.HelloShiro"></a>2.HelloShiro</h2><h3 id="2-1快速上手"><a href="#2-1快速上手" class="headerlink" title="2.1快速上手"></a>2.1快速上手</h3><p>查看官方文档：<a href="https://shiro.apache.org/10-minute-tutorial.html">10 Minute Tutorial on Apache Shiro | Apache Shiro</a></p><p>官方的quickstart(<a href="https://github.com/apache/shiro/tree/main/samples/quickstart">https://github.com/apache/shiro/tree/main/samples/quickstart</a>)</p><h4 id="1-创建一个Maven父工程：springboot-07-shiro"><a href="#1-创建一个Maven父工程：springboot-07-shiro" class="headerlink" title="1.创建一个Maven父工程：springboot-07-shiro"></a>1.创建一个Maven父工程：springboot-07-shiro</h4><h4 id="2-创建一个子模块，shiro-01-helloshiro"><a href="#2-创建一个子模块，shiro-01-helloshiro" class="headerlink" title="2.创建一个子模块，shiro-01-helloshiro"></a>2.创建一个子模块，shiro-01-helloshiro</h4><h4 id="3-根据GitHub的quick-start来导入pom依赖"><a href="#3-根据GitHub的quick-start来导入pom依赖" class="headerlink" title="3.根据GitHub的quick start来导入pom依赖"></a>3.根据GitHub的quick start来导入pom依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- configure logging --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jcl-over-slf4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.29<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.29<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="4-导入资源文件"><a href="#4-导入资源文件" class="headerlink" title="4.导入资源文件"></a>4.导入资源文件</h4><p>log4j.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">log4j.rootLogger</span>=<span class="string">INFO,stdout</span></span><br><span class="line"></span><br><span class="line"><span class="attr">log4j.appender.stdout</span>=<span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="attr">log4j.appender.stdout.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="attr">log4j.appender.stdout.ConversionPattern</span>=<span class="string">%d %p [%c] - %m %n</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#General Apache libraries</span></span><br><span class="line"><span class="attr">log4j.logger.org.apache</span>=<span class="string">WARN</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#Spring</span></span><br><span class="line"><span class="attr">log4j.logger.org.springframework</span>=<span class="string">WARN</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#Default Shiro Logging</span></span><br><span class="line"><span class="attr">log4j.logger.org.apache.shiro</span>=<span class="string">INFO</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#Disable verbose logging</span></span><br><span class="line"><span class="attr">log4j.logger.org.apache.shiro.util.ThreadContext</span>=<span class="string">WARN</span></span><br><span class="line"><span class="attr">log4j.logger.org.apache.shiro.cache.ehcache.Ehcache</span>=<span class="string">WARN</span></span><br></pre></td></tr></table></figure><p>shiro.ini</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Licensed to the Apache Software Foundation (ASF) under one</span></span><br><span class="line"><span class="comment"># or more contributor license agreements.  See the NOTICE file</span></span><br><span class="line"><span class="comment"># distributed with this work for additional information</span></span><br><span class="line"><span class="comment"># regarding copyright ownership.  The ASF licenses this file</span></span><br><span class="line"><span class="comment"># to you under the Apache License, Version 2.0 (the</span></span><br><span class="line"><span class="comment"># &quot;License&quot;); you may not use this file except in compliance</span></span><br><span class="line"><span class="comment"># with the License.  You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#     http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Unless required by applicable law or agreed to in writing,</span></span><br><span class="line"><span class="comment"># software distributed under the License is distributed on an</span></span><br><span class="line"><span class="comment"># &quot;AS IS&quot; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY</span></span><br><span class="line"><span class="comment"># KIND, either express or implied.  See the License for the</span></span><br><span class="line"><span class="comment"># specific language governing permissions and limitations</span></span><br><span class="line"><span class="comment"># under the License.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># =============================================================================</span></span><br><span class="line"><span class="comment"># Quickstart INI Realm configuration</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># For those that might not understand the references in this file, the</span></span><br><span class="line"><span class="comment"># definitions are all based on the classic Mel Brooks&#x27; film &quot;Spaceballs&quot;. ;)</span></span><br><span class="line"><span class="comment"># =============================================================================</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -----------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Users and their assigned roles</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Each line conforms to the format defined in the</span></span><br><span class="line"><span class="comment"># org.apache.shiro.realm.text.TextConfigurationRealm#setUserDefinitions JavaDoc</span></span><br><span class="line"><span class="comment"># -----------------------------------------------------------------------------</span></span><br><span class="line"><span class="section">[users]</span></span><br><span class="line"><span class="comment"># user &#x27;root&#x27; with password &#x27;secret&#x27; and the &#x27;admin&#x27; role</span></span><br><span class="line"><span class="attr">root</span> = secret, admin</span><br><span class="line"><span class="comment"># user &#x27;guest&#x27; with the password &#x27;guest&#x27; and the &#x27;guest&#x27; role</span></span><br><span class="line"><span class="attr">guest</span> = guest, guest</span><br><span class="line"><span class="comment"># user &#x27;presidentskroob&#x27; with password &#x27;12345&#x27; (&quot;That&#x27;s the same combination on</span></span><br><span class="line"><span class="comment"># my luggage!!!&quot; ;)), and role &#x27;president&#x27;</span></span><br><span class="line"><span class="attr">presidentskroob</span> = <span class="number">12345</span>, president</span><br><span class="line"><span class="comment"># user &#x27;darkhelmet&#x27; with password &#x27;ludicrousspeed&#x27; and roles &#x27;darklord&#x27; and &#x27;schwartz&#x27;</span></span><br><span class="line"><span class="attr">darkhelmet</span> = ludicrousspeed, darklord, schwartz</span><br><span class="line"><span class="comment"># user &#x27;lonestarr&#x27; with password &#x27;vespa&#x27; and roles &#x27;goodguy&#x27; and &#x27;schwartz&#x27;</span></span><br><span class="line"><span class="attr">lonestarr</span> = vespa, goodguy, schwartz</span><br><span class="line"></span><br><span class="line"><span class="comment"># -----------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Roles with assigned permissions</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Each line conforms to the format defined in the</span></span><br><span class="line"><span class="comment"># org.apache.shiro.realm.text.TextConfigurationRealm#setRoleDefinitions JavaDoc</span></span><br><span class="line"><span class="comment"># -----------------------------------------------------------------------------</span></span><br><span class="line"><span class="section">[roles]</span></span><br><span class="line"><span class="comment"># &#x27;admin&#x27; role has all permissions, indicated by the wildcard &#x27;*&#x27;</span></span><br><span class="line"><span class="attr">admin</span> = *</span><br><span class="line"><span class="comment"># The &#x27;schwartz&#x27; role can do anything (*) with any lightsaber:</span></span><br><span class="line"><span class="attr">schwartz</span> = lightsaber:*</span><br><span class="line"><span class="comment"># The &#x27;goodguy&#x27; role is allowed to &#x27;drive&#x27; (action) the winnebago (type) with</span></span><br><span class="line"><span class="comment"># license plate &#x27;eagle5&#x27; (instance specific id)</span></span><br><span class="line"><span class="attr">goodguy</span> = winnebago:drive:eagle5</span><br></pre></td></tr></table></figure><h4 id="5-导入Quickstart类"><a href="#5-导入Quickstart类" class="headerlink" title="5.导入Quickstart类"></a>5.导入Quickstart类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ldd;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Licensed to the Apache Software Foundation (ASF) under one</span></span><br><span class="line"><span class="comment"> * or more contributor license agreements.  See the NOTICE file</span></span><br><span class="line"><span class="comment"> * distributed with this work for additional information</span></span><br><span class="line"><span class="comment"> * regarding copyright ownership.  The ASF licenses this file</span></span><br><span class="line"><span class="comment"> * to you under the Apache License, Version 2.0 (the</span></span><br><span class="line"><span class="comment"> * &quot;License&quot;); you may not use this file except in compliance</span></span><br><span class="line"><span class="comment"> * with the License.  You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Unless required by applicable law or agreed to in writing,</span></span><br><span class="line"><span class="comment"> * software distributed under the License is distributed on an</span></span><br><span class="line"><span class="comment"> * &quot;AS IS&quot; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY</span></span><br><span class="line"><span class="comment"> * KIND, either express or implied.  See the License for the</span></span><br><span class="line"><span class="comment"> * specific language governing permissions and limitations</span></span><br><span class="line"><span class="comment"> * under the License.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.SecurityUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.config.IniSecurityManagerFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.mgt.SecurityManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.session.Session;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.subject.Subject;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.util.Factory;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Simple Quickstart application showing how to use Shiro&#x27;s API.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 0.9 RC2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Quickstart</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">transient</span> <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LoggerFactory.getLogger(Quickstart.class);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// The easiest way to create a Shiro SecurityManager with configured</span></span><br><span class="line">        <span class="comment">// realms, users, roles and permissions is to use the simple INI config.</span></span><br><span class="line">        <span class="comment">// We&#x27;ll do that by using a factory that can ingest a .ini file and</span></span><br><span class="line">        <span class="comment">// return a SecurityManager instance:</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Use the shiro.ini file at the root of the classpath</span></span><br><span class="line">        <span class="comment">// (file: and url: prefixes load from files and urls respectively):</span></span><br><span class="line">        Factory&lt;SecurityManager&gt; factory = <span class="keyword">new</span> <span class="title class_">IniSecurityManagerFactory</span>(<span class="string">&quot;classpath:shiro.ini&quot;</span>);</span><br><span class="line">        <span class="type">SecurityManager</span> <span class="variable">securityManager</span> <span class="operator">=</span> factory.getInstance();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// for this simple example quickstart, make the SecurityManager</span></span><br><span class="line">        <span class="comment">// accessible as a JVM singleton.  Most applications wouldn&#x27;t do this</span></span><br><span class="line">        <span class="comment">// and instead rely on their container configuration or web.xml for</span></span><br><span class="line">        <span class="comment">// webapps.  That is outside the scope of this simple quickstart, so</span></span><br><span class="line">        <span class="comment">// we&#x27;ll just do the bare minimum so you can continue to get a feel</span></span><br><span class="line">        <span class="comment">// for things.</span></span><br><span class="line">        SecurityUtils.setSecurityManager(securityManager);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Now that a simple Shiro environment is set up, let&#x27;s see what you can do:</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// get the currently executing user:</span></span><br><span class="line">        <span class="type">Subject</span> <span class="variable">currentUser</span> <span class="operator">=</span> SecurityUtils.getSubject();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Do some stuff with a Session (no need for a web or EJB container!!!)</span></span><br><span class="line">        <span class="type">Session</span> <span class="variable">session</span> <span class="operator">=</span> currentUser.getSession();</span><br><span class="line">        session.setAttribute(<span class="string">&quot;someKey&quot;</span>, <span class="string">&quot;aValue&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> (String) session.getAttribute(<span class="string">&quot;someKey&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (value.equals(<span class="string">&quot;aValue&quot;</span>)) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;Retrieved the correct value! [&quot;</span> + value + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// let&#x27;s login the current user so we can check against roles and permissions:</span></span><br><span class="line">        <span class="keyword">if</span> (!currentUser.isAuthenticated()) &#123;</span><br><span class="line">            <span class="type">UsernamePasswordToken</span> <span class="variable">token</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UsernamePasswordToken</span>(<span class="string">&quot;lonestarr&quot;</span>, <span class="string">&quot;vespa&quot;</span>);</span><br><span class="line">            token.setRememberMe(<span class="literal">true</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                currentUser.login(token);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (UnknownAccountException uae) &#123;</span><br><span class="line">                log.info(<span class="string">&quot;There is no user with username of &quot;</span> + token.getPrincipal());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IncorrectCredentialsException ice) &#123;</span><br><span class="line">                log.info(<span class="string">&quot;Password for account &quot;</span> + token.getPrincipal() + <span class="string">&quot; was incorrect!&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (LockedAccountException lae) &#123;</span><br><span class="line">                log.info(<span class="string">&quot;The account for username &quot;</span> + token.getPrincipal() + <span class="string">&quot; is locked.  &quot;</span> +</span><br><span class="line">                        <span class="string">&quot;Please contact your administrator to unlock it.&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// ... catch more exceptions here (maybe custom ones specific to your application?</span></span><br><span class="line">            <span class="keyword">catch</span> (AuthenticationException ae) &#123;</span><br><span class="line">                <span class="comment">//unexpected condition?  error?</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//say who they are:</span></span><br><span class="line">        <span class="comment">//print their identifying principal (in this case, a username):</span></span><br><span class="line">        log.info(<span class="string">&quot;User [&quot;</span> + currentUser.getPrincipal() + <span class="string">&quot;] logged in successfully.&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//test a role:</span></span><br><span class="line">        <span class="keyword">if</span> (currentUser.hasRole(<span class="string">&quot;schwartz&quot;</span>)) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;May the Schwartz be with you!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            log.info(<span class="string">&quot;Hello, mere mortal.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//test a typed permission (not instance-level)</span></span><br><span class="line">        <span class="keyword">if</span> (currentUser.isPermitted(<span class="string">&quot;lightsaber:wield&quot;</span>)) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;You may use a lightsaber ring.  Use it wisely.&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            log.info(<span class="string">&quot;Sorry, lightsaber rings are for schwartz masters only.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//a (very powerful) Instance Level permission:</span></span><br><span class="line">        <span class="keyword">if</span> (currentUser.isPermitted(<span class="string">&quot;winnebago:drive:eagle5&quot;</span>)) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;You are permitted to &#x27;drive&#x27; the winnebago with license plate (id) &#x27;eagle5&#x27;.  &quot;</span> +</span><br><span class="line">                    <span class="string">&quot;Here are the keys - have fun!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            log.info(<span class="string">&quot;Sorry, you aren&#x27;t allowed to drive the &#x27;eagle5&#x27; winnebago!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//all done - log out!</span></span><br><span class="line">        currentUser.logout();</span><br><span class="line"></span><br><span class="line">        System.exit(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果有导包的错误，把那两个错误的包删掉，就会自动导对的包了，快速入门案例中用的方法过时了</p><h4 id="6-运行"><a href="#6-运行" class="headerlink" title="6.运行"></a>6.运行</h4><p><img src="https://s2.loli.net/2023/04/24/tINh6dZcRWA2PUv.png" alt="image-20230424114113593"></p><h3 id="2-2分析Quickstart"><a href="#2-2分析Quickstart" class="headerlink" title="2.2分析Quickstart"></a>2.2分析Quickstart</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ldd;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.SecurityUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.config.IniSecurityManagerFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.mgt.SecurityManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.session.Session;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.subject.Subject;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.util.Factory;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Quickstart</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">transient</span> <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LoggerFactory.getLogger(Quickstart.class);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过工厂模式创建Shiro SecurityManager</span></span><br><span class="line">        <span class="comment">//Shiro SecurityManager管理所有的subject</span></span><br><span class="line">        <span class="comment">//三行死代码</span></span><br><span class="line">        <span class="comment">/*对于这个简单的快速入门示例，创建SecurityManager</span></span><br><span class="line"><span class="comment">          可作为JVM单例访问。大多数应用程序不会这样做</span></span><br><span class="line"><span class="comment">          而是依赖于它们的容器配置或web.xml</span></span><br><span class="line"><span class="comment">          webapps。这已经超出了这个简单入门的范围，所以</span></span><br><span class="line"><span class="comment">          我们只做最基本的，这样你就能继续感受一下</span></span><br><span class="line"><span class="comment">          对的事情。*/</span></span><br><span class="line">        Factory&lt;SecurityManager&gt; factory = <span class="keyword">new</span> <span class="title class_">IniSecurityManagerFactory</span>(<span class="string">&quot;classpath:shiro.ini&quot;</span>);</span><br><span class="line">        <span class="type">SecurityManager</span> <span class="variable">securityManager</span> <span class="operator">=</span> factory.getInstance();</span><br><span class="line">        SecurityUtils.setSecurityManager(securityManager);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// get the currently executing user:</span></span><br><span class="line">        <span class="comment">//获取当前执行的用户</span></span><br><span class="line">        <span class="type">Subject</span> <span class="variable">currentUser</span> <span class="operator">=</span> SecurityUtils.getSubject();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Do some stuff with a Session (no need for a web or EJB container!!!)</span></span><br><span class="line">        <span class="comment">//获取当前用户的Session</span></span><br><span class="line">        <span class="comment">//并且在session中存值取值</span></span><br><span class="line">        <span class="comment">//最后日志打印</span></span><br><span class="line">        <span class="type">Session</span> <span class="variable">session</span> <span class="operator">=</span> currentUser.getSession();</span><br><span class="line">        session.setAttribute(<span class="string">&quot;someKey&quot;</span>, <span class="string">&quot;aValue&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> (String) session.getAttribute(<span class="string">&quot;someKey&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (value.equals(<span class="string">&quot;aValue&quot;</span>)) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;Subject--&gt;Session:&quot;</span> + value );</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// let&#x27;s login the current user so we can check against roles and permissions:</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断该用户是否存在，如果不存在我们做以下操作</span></span><br><span class="line">        <span class="comment">//1.设置一个登录用户的username和password作为令牌</span></span><br><span class="line">        <span class="comment">//2.开启记住我功能</span></span><br><span class="line">        <span class="comment">//3.使用这个令牌去登录</span></span><br><span class="line">        <span class="comment">//4.捕获一些异常a:无法解析用户异常 b:密码错误异常 c.账号锁定异常 d:其他异常</span></span><br><span class="line">        <span class="keyword">if</span> (!currentUser.isAuthenticated()) &#123;</span><br><span class="line">            <span class="type">UsernamePasswordToken</span> <span class="variable">token</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UsernamePasswordToken</span>(<span class="string">&quot;lonestarr&quot;</span>, <span class="string">&quot;vespa&quot;</span>);</span><br><span class="line">            token.setRememberMe(<span class="literal">true</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                currentUser.login(token);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (UnknownAccountException uae) &#123;</span><br><span class="line">                log.info(<span class="string">&quot;There is no user with username of &quot;</span> + token.getPrincipal());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IncorrectCredentialsException ice) &#123;</span><br><span class="line">                log.info(<span class="string">&quot;Password for account &quot;</span> + token.getPrincipal() + <span class="string">&quot; was incorrect!&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (LockedAccountException lae) &#123;</span><br><span class="line">                log.info(<span class="string">&quot;用户账户： &quot;</span> + token.getPrincipal() + <span class="string">&quot; 被锁定.  &quot;</span> +</span><br><span class="line">                        <span class="string">&quot;请与管理员联系解锁.&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// ... catch more exceptions here (maybe custom ones specific to your application?</span></span><br><span class="line">            <span class="keyword">catch</span> (AuthenticationException ae) &#123;</span><br><span class="line">                <span class="comment">//unexpected condition?  error?</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//打印标识主题，即用户名</span></span><br><span class="line">        log.info(<span class="string">&quot;用户(&quot;</span> + currentUser.getPrincipal() + <span class="string">&quot;)登录成功&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//测试一个角色</span></span><br><span class="line">        <span class="comment">//看他是否有这个角色</span></span><br><span class="line">        <span class="keyword">if</span> (currentUser.hasRole(<span class="string">&quot;schwartz&quot;</span>)) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;schwartz 用户存在!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            log.info(<span class="string">&quot;schwartz 用户不存在!.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//test a typed permission (not instance-level)</span></span><br><span class="line">        <span class="comment">//测试类型权限（没有实例等级权限）</span></span><br><span class="line">        <span class="comment">//看是否允许wield这个权限</span></span><br><span class="line">        <span class="keyword">if</span> (currentUser.isPermitted(<span class="string">&quot;lightsaber:wield&quot;</span>)) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;You may use a lightsaber ring.  Use it wisely.&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            log.info(<span class="string">&quot;Sorry, lightsaber rings are for schwartz masters only.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//实例了等级权限</span></span><br><span class="line">        <span class="comment">//a (very powerful) Instance Level permission:</span></span><br><span class="line">        <span class="keyword">if</span> (currentUser.isPermitted(<span class="string">&quot;winnebago:drive:eagle5&quot;</span>)) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;You are permitted to &#x27;drive&#x27; the winnebago with license plate (id) &#x27;eagle5&#x27;.  &quot;</span> +</span><br><span class="line">                    <span class="string">&quot;Here are the keys - have fun!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            log.info(<span class="string">&quot;Sorry, you aren&#x27;t allowed to drive the &#x27;eagle5&#x27; winnebago!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//all done - log out!</span></span><br><span class="line">        <span class="comment">//注销</span></span><br><span class="line">        currentUser.logout();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//退出</span></span><br><span class="line">        System.exit(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再去执行，这个快速上手案列我们就越发看得懂了</p><p><img src="https://s2.loli.net/2023/04/24/7ov6LBxWzJcZPTN.png" alt="image-20230424125021688"></p><h2 id="3-SpringBoot集成Shiro"><a href="#3-SpringBoot集成Shiro" class="headerlink" title="3.SpringBoot集成Shiro"></a>3.SpringBoot集成Shiro</h2><h3 id="3-1基础环境搭建"><a href="#3-1基础环境搭建" class="headerlink" title="3.1基础环境搭建"></a>3.1基础环境搭建</h3><h4 id="1-新建一个模块"><a href="#1-新建一个模块" class="headerlink" title="1.新建一个模块"></a>1.新建一个模块</h4><p>shiro-02-springboot</p><p>引入web和thymeleaf的模块</p><p>我们自己导入shrio-spring整合的包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Shiro整合spring的包--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.shiro/shiro-spring --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-简单写几个页面先"><a href="#2-简单写几个页面先" class="headerlink" title="2.简单写几个页面先"></a>2.简单写几个页面先</h4><p>在templates下</p><p>index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/user/add&#125;&quot;</span>&gt;</span>添加操作<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/user/update&#125;&quot;</span>&gt;</span>删除操作<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>再新建一个user目录</p><p>add.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>add<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>执行add<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>update.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>update<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>执行update<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-再去写我们的controller"><a href="#3-再去写我们的controller" class="headerlink" title="3.再去写我们的controller"></a>3.再去写我们的controller</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&#123;&quot;/&quot;,&quot;/index.html&quot;&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">index</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/user/add&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">add</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;user/add&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/user/update&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">update</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;user/update&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-去写我们的配置类"><a href="#4-去写我们的配置类" class="headerlink" title="4.去写我们的配置类"></a>4.去写我们的配置类</h4><p>ShiroConfig:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ldd.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.spring.web.ShiroFilterFactoryBean;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.web.mgt.DefaultWebSecurityManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShiroConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//顺序倒着配</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//ShiroFilterFactoryBean 3</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ShiroFilterFactoryBean <span class="title function_">getShiroFilterFactoryBean</span><span class="params">(<span class="meta">@Qualifier(&quot;securityManager&quot;)</span> DefaultWebSecurityManager securityManager)</span> &#123;</span><br><span class="line">        <span class="type">ShiroFilterFactoryBean</span> <span class="variable">bean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ShiroFilterFactoryBean</span>();</span><br><span class="line">        <span class="comment">//设置安全管理器</span></span><br><span class="line">        bean.setSecurityManager(securityManager);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//DefaultWebSecurityManager 2</span></span><br><span class="line">    <span class="meta">@Bean(name=&quot;securityManager&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> DefaultWebSecurityManager <span class="title function_">getDefaultWebSecurityManager</span><span class="params">(<span class="meta">@Qualifier(&quot;userRealm&quot;)</span> UserRealm userRealm)</span> &#123;</span><br><span class="line">        <span class="type">DefaultWebSecurityManager</span> <span class="variable">securityManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultWebSecurityManager</span>();</span><br><span class="line">        <span class="comment">//关联Realm</span></span><br><span class="line">        securityManager.setRealm(userRealm);</span><br><span class="line">        <span class="keyword">return</span> securityManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建Realm 对象  需要自定义 1</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> UserRealm <span class="title function_">userRealm</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">UserRealm</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自定义我们的连接对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ldd.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.AuthenticationException;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.AuthenticationInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.AuthenticationToken;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authz.AuthorizationInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.realm.AuthorizingRealm;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.subject.PrincipalCollection;</span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义的Realm</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserRealm</span> <span class="keyword">extends</span> <span class="title class_">AuthorizingRealm</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//授权</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> AuthorizationInfo <span class="title function_">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principalCollection)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行了----&gt;授权doGetAuthorizationInfo&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//认证</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> AuthenticationInfo <span class="title function_">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken authenticationToken)</span> <span class="keyword">throws</span> AuthenticationException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行了----&gt;认证doGetAuthenticationInfo&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到这里我们的基础环境就ok了！</p><h3 id="3-2实现登录拦截及认证"><a href="#3-2实现登录拦截及认证" class="headerlink" title="3.2实现登录拦截及认证"></a>3.2实现登录拦截及认证</h3><h4 id="1-首先写一个超级简易的登录表单"><a href="#1-首先写一个超级简易的登录表单" class="headerlink" title="1.首先写一个超级简易的登录表单"></a>1.首先写一个超级简易的登录表单</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;msg&#125;&quot;</span> <span class="attr">style</span>=<span class="string">&quot;color:red;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/login&#125;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-ShiroConfig"><a href="#2-ShiroConfig" class="headerlink" title="2.ShiroConfig"></a>2.ShiroConfig</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> ShiroFilterFactoryBean <span class="title function_">getShiroFilterFactoryBean</span><span class="params">(<span class="meta">@Qualifier(&quot;securityManager&quot;)</span> DefaultWebSecurityManager securityManager)</span> &#123;</span><br><span class="line">    <span class="type">ShiroFilterFactoryBean</span> <span class="variable">bean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ShiroFilterFactoryBean</span>();</span><br><span class="line">    <span class="comment">//设置安全管理器</span></span><br><span class="line">    bean.setSecurityManager(securityManager);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加Shiro内置的过滤器</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * anon：无需认证就可以访问</span></span><br><span class="line"><span class="comment">    * authc: 必须认证了才可以访问</span></span><br><span class="line"><span class="comment">    * user：必须拥有 记住我 功能才能使用</span></span><br><span class="line"><span class="comment">    * perms: 拥有对某个资源的权限才能访问</span></span><br><span class="line"><span class="comment">    * role ：拥有某个角色权限才能访问</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    Map&lt;String, String&gt; filterMap=<span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//拦截</span></span><br><span class="line">    filterMap.put(<span class="string">&quot;/user/*&quot;</span>,<span class="string">&quot;authc&quot;</span>);</span><br><span class="line">    bean.setFilterChainDefinitionMap(filterMap);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置登录请求</span></span><br><span class="line">    bean.setLoginUrl(<span class="string">&quot;/toLogin&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-controller"><a href="#3-controller" class="headerlink" title="3.controller"></a>3.controller</h4><p>首先跳转到这个登录页面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/toLogin&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toLogin</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到这里<strong>拦截</strong>已经实现了</p><p>然后提交表单的时候我们做一些数据的封装，并且我们使用shiro自带的登录方法进行登录</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/login&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">login</span><span class="params">(String username, String password, Model model)</span>&#123;</span><br><span class="line">    <span class="comment">//获取当前用户</span></span><br><span class="line">    <span class="type">Subject</span> <span class="variable">subject</span> <span class="operator">=</span> SecurityUtils.getSubject();</span><br><span class="line">    <span class="comment">//封装登录的数据</span></span><br><span class="line">    <span class="comment">//封装登录的账户和密码作为一个token令牌</span></span><br><span class="line">    <span class="type">UsernamePasswordToken</span> <span class="variable">token</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UsernamePasswordToken</span>(username, password);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//去执行登录操作，如果没有异常就是登录成功</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        subject.login(token);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (UnknownAccountException uae) &#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;There is no user with username of&quot;</span>+token.getPrincipal());</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IncorrectCredentialsException ice) &#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;Password for account &quot;</span> + token.getPrincipal() + <span class="string">&quot; was incorrect!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (LockedAccountException lae) &#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;用户账户： &quot;</span> + token.getPrincipal() + <span class="string">&quot; 被锁定.  &quot;</span> + <span class="string">&quot;请与管理员联系解锁.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ... catch more exceptions here (maybe custom ones specific to your application?</span></span><br><span class="line">    <span class="keyword">catch</span> (AuthenticationException ae) &#123;</span><br><span class="line">        <span class="comment">//unexpected condition?  error?</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-UserRealm"><a href="#4-UserRealm" class="headerlink" title="4.UserRealm"></a>4.UserRealm</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> AuthenticationInfo <span class="title function_">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken authenticationToken)</span> <span class="keyword">throws</span> AuthenticationException &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;执行了----&gt;认证doGetAuthenticationInfo&quot;</span>);</span><br><span class="line">    <span class="comment">//用户名和密码  从数据库中取</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;123456&quot;</span>;</span><br><span class="line"></span><br><span class="line">    UsernamePasswordToken token= (UsernamePasswordToken) authenticationToken;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果输入的用户名和我们的不一样就抛出异常，直接抛出用户不存在异常</span></span><br><span class="line">    <span class="keyword">if</span> (!token.getUsername().equals(username))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//密码认证，根本不让你做，shiro自己做</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SimpleAuthenticationInfo</span>(<span class="string">&quot;&quot;</span>,password,<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3Shiro整合Mybatis"><a href="#3-3Shiro整合Mybatis" class="headerlink" title="3.3Shiro整合Mybatis"></a>3.3Shiro整合Mybatis</h3><h4 id="1-导入依赖"><a href="#1-导入依赖" class="headerlink" title="1.导入依赖"></a>1.导入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis.spring.boot/mybatis-spring-boot-starter --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/druid-spring-boot-starter --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/log4j/log4j --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-写配置文件"><a href="#2-写配置文件" class="headerlink" title="2.写配置文件"></a>2.写配置文件</h4><p>application.yaml:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/springboot?useSSL=false&amp;serverTimezone=Asia/Shanghai&amp;characterEncoding=utf-8&amp;autoReconnect=true</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="comment">#Spring Boot 默认是不注入这些属性值的，需要自己绑定</span></span><br><span class="line">    <span class="comment">#druid 数据源专有配置</span></span><br><span class="line">    <span class="attr">initial-size:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">min-idle:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">max-active:</span> <span class="number">20</span></span><br><span class="line">    <span class="attr">max-wait:</span> <span class="number">60000</span></span><br><span class="line">    <span class="attr">time-between-eviction-runs-millis:</span> <span class="number">60000</span></span><br><span class="line">    <span class="attr">min-evictable-idle-time-millis:</span> <span class="number">300000</span></span><br><span class="line">    <span class="attr">validation-query:</span> <span class="string">SELECT</span> <span class="number">1</span> <span class="string">FROM</span> <span class="string">DUAL</span></span><br><span class="line">    <span class="attr">test-while-idle:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">test-on-borrow:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">test-on-return:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">pool-prepared-statements:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># 配置监控拦截的filters.stat:监控统计,log4j:日志记录,wall:防止sql注入</span></span><br><span class="line">    <span class="attr">filters:</span> <span class="string">stat,wall,log4j</span></span><br><span class="line">    <span class="attr">max-pool-prepared-statement-per-connection-size:</span> <span class="number">20</span></span><br><span class="line">    <span class="attr">use-global-data-source-stat:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">connection-properties:</span> <span class="string">druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500</span></span><br><span class="line">    <span class="comment"># 在druid控制界面查看sql语句</span></span><br><span class="line">    <span class="attr">filter:</span></span><br><span class="line">      <span class="attr">stat:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">wall:</span></span><br><span class="line">        <span class="attr">config:</span></span><br><span class="line">          <span class="attr">multi-statement-allow:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>application.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis.type-aliases-package</span>=<span class="string">com.ldd.pojo</span></span><br><span class="line"><span class="attr">mybatis.mapper-locations</span>=<span class="string">mapper/*.xml</span></span><br></pre></td></tr></table></figure><h4 id="3-idea连接数据库"><a href="#3-idea连接数据库" class="headerlink" title="3.idea连接数据库"></a>3.idea连接数据库</h4><h4 id="4-写实体类，接口，业务层"><a href="#4-写实体类，接口，业务层" class="headerlink" title="4.写实体类，接口，业务层"></a>4.写实体类，接口，业务层</h4><p>User：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ldd.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//有参无参get/set toString</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>UserMapper</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">queryUserByName</span><span class="params">(String name)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Service和实现了不说了</p><p>到这里马上去测试以下能否查询出数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">UserServiceImpl userService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(userService.queryUserByName(<span class="string">&quot;u1&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试ok就开始整合</p><h4 id="5-将我们之前的假数据替换成数据库中的数据"><a href="#5-将我们之前的假数据替换成数据库中的数据" class="headerlink" title="5.将我们之前的假数据替换成数据库中的数据"></a>5.将我们之前的假数据替换成数据库中的数据</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">//认证</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> AuthenticationInfo <span class="title function_">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken authenticationToken)</span> <span class="keyword">throws</span> AuthenticationException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行了----&gt;认证doGetAuthenticationInfo&quot;</span>);</span><br><span class="line">        <span class="comment">//用户名和密码  从数据库中取</span></span><br><span class="line"><span class="comment">//        String username = &quot;root&quot;;</span></span><br><span class="line"><span class="comment">//        String password = &quot;123456&quot;;</span></span><br><span class="line">        <span class="comment">//切换成我们的真实的数据库</span></span><br><span class="line">        UsernamePasswordToken token= (UsernamePasswordToken) authenticationToken;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.queryUserByName(token.getUsername());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (user == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//密码认证，根本不让你做，shiro做</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SimpleAuthenticationInfo</span>(<span class="string">&quot;&quot;</span>,user.getPassword(),<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="6-测试数据库中的数据是否可以登录就ok了"><a href="#6-测试数据库中的数据是否可以登录就ok了" class="headerlink" title="6.测试数据库中的数据是否可以登录就ok了"></a>6.测试数据库中的数据是否可以登录就ok了</h4><h3 id="3-4Shiro请求授权"><a href="#3-4Shiro请求授权" class="headerlink" title="3.4Shiro请求授权"></a>3.4Shiro请求授权</h3><h4 id="1-添加授权配置"><a href="#1-添加授权配置" class="headerlink" title="1.添加授权配置"></a>1.添加授权配置</h4><p>ShiroConfig</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//授权</span></span><br><span class="line"><span class="comment">//正常情况，如果没有授权，就跳转到一个未授权页面</span></span><br><span class="line">filterMap.put(<span class="string">&quot;/user/add&quot;</span>,<span class="string">&quot;perms[user:add]&quot;</span>);</span><br><span class="line">filterMap.put(<span class="string">&quot;/user/update&quot;</span>,<span class="string">&quot;perms[user:update]&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置未授权页面</span></span><br><span class="line"> bean.setUnauthorizedUrl(<span class="string">&quot;/unAuthor&quot;</span>);</span><br></pre></td></tr></table></figure><p>controller：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/unAuthor&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">noAuthorization</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;权限不足，无法访问！请申请授权后访问&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-数据库添加一个字段，用于存放权限级别"><a href="#2-数据库添加一个字段，用于存放权限级别" class="headerlink" title="2.数据库添加一个字段，用于存放权限级别"></a>2.数据库添加一个字段，用于存放权限级别</h4><p><img src="https://s2.loli.net/2023/04/26/NFgqx4RDCGEQ5uh.png" alt="image-20230426151057698"></p><h4 id="3-执行授权操作"><a href="#3-执行授权操作" class="headerlink" title="3.执行授权操作"></a>3.执行授权操作</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自定义的Realm</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserRealm</span> <span class="keyword">extends</span> <span class="title class_">AuthorizingRealm</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserServiceImpl userService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//授权</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> AuthorizationInfo <span class="title function_">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principalCollection)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行了----&gt;授权doGetAuthorizationInfo&quot;</span>);</span><br><span class="line">        <span class="type">SimpleAuthorizationInfo</span> <span class="variable">info</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleAuthorizationInfo</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//拿到当前用户对象</span></span><br><span class="line">        <span class="comment">//拿到User对象</span></span><br><span class="line">        <span class="type">Subject</span> <span class="variable">subject</span> <span class="operator">=</span> SecurityUtils.getSubject();</span><br><span class="line">        <span class="type">User</span> <span class="variable">currentUser</span> <span class="operator">=</span> (User) subject.getPrincipal();</span><br><span class="line">        <span class="comment">//设置用户权限</span></span><br><span class="line">        <span class="comment">//root拥有所有权限</span></span><br><span class="line">        <span class="keyword">if</span>(!currentUser.getName().equals(<span class="string">&quot;root&quot;</span>))&#123;</span><br><span class="line">            info.addStringPermission(currentUser.getPerms());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            info.addStringPermission(<span class="string">&quot;user:add&quot;</span>);</span><br><span class="line">            info.addStringPermission(<span class="string">&quot;user:update&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> info;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//认证</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> AuthenticationInfo <span class="title function_">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken authenticationToken)</span> <span class="keyword">throws</span> AuthenticationException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行了----&gt;认证doGetAuthenticationInfo&quot;</span>);</span><br><span class="line">        <span class="comment">//用户名和密码  从数据库中取</span></span><br><span class="line"><span class="comment">//        String username = &quot;root&quot;;</span></span><br><span class="line"><span class="comment">//        String password = &quot;123456&quot;;</span></span><br><span class="line">        <span class="comment">//切换成我们的真实的数据库</span></span><br><span class="line">        UsernamePasswordToken token= (UsernamePasswordToken) authenticationToken;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.queryUserByName(token.getUsername());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (user == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//密码认证，根本不让你做，shiro做</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SimpleAuthenticationInfo</span>(user,user.getPassword(),<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-测试这四个用户即可！"><a href="#4-测试这四个用户即可！" class="headerlink" title="4.测试这四个用户即可！"></a>4.测试这四个用户即可！</h4><h3 id="3-5Shiro整合Thymeleaf"><a href="#3-5Shiro整合Thymeleaf" class="headerlink" title="3.5Shiro整合Thymeleaf"></a>3.5Shiro整合Thymeleaf</h3><h4 id="1-导入依赖-1"><a href="#1-导入依赖-1" class="headerlink" title="1.导入依赖"></a>1.导入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--thymeleaf整合shiro包--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.github.theborakompanioni/thymeleaf-extras-shiro --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.theborakompanioni<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-extras-shiro<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-需求"><a href="#2-需求" class="headerlink" title="2.需求"></a>2.需求</h4><p>我们希望我们的用户有什么权限就显示什么操作即可</p><p>index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;session.loginUser==null&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/toLogin&#125;&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">shiro:hasPermission</span>=<span class="string">&quot;user:add&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/user/add&#125;&quot;</span>&gt;</span>添加操作<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">shiro:hasPermission</span>=<span class="string">&quot;user:update&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/user/update&#125;&quot;</span>&gt;</span>删除操作<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>去controller中放session</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//去执行登录操作，如果没有异常就是登录成功</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    subject.login(token);</span><br><span class="line">    <span class="comment">//登录成功后，把用户添加到Session中</span></span><br><span class="line">    <span class="type">Session</span> <span class="variable">session</span> <span class="operator">=</span> subject.getSession();</span><br><span class="line">    session.setAttribute(<span class="string">&quot;loginUser&quot;</span>,token.getUsername());</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">catch</span> (UnknownAccountException uae) &#123;</span><br><span class="line">    model.addAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;There is no user with username of&quot;</span>+token.getPrincipal());</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">catch</span> (IncorrectCredentialsException ice) &#123;</span><br><span class="line">    model.addAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;Password for account &quot;</span> + token.getPrincipal() + <span class="string">&quot; was incorrect!&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">catch</span> (LockedAccountException lae) &#123;</span><br><span class="line">    model.addAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;用户账户： &quot;</span> + token.getPrincipal() + <span class="string">&quot; 被锁定.  &quot;</span> + <span class="string">&quot;请与管理员联系解锁.&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ... catch more exceptions here (maybe custom ones specific to your application?</span></span><br><span class="line"><span class="keyword">catch</span> (AuthenticationException ae) &#123;</span><br><span class="line">    <span class="comment">//unexpected condition?  error?</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-6拓展-MD5加密及注销"><a href="#3-6拓展-MD5加密及注销" class="headerlink" title="3.6拓展(MD5加密及注销)"></a>3.6拓展(MD5加密及注销)</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;SpringBoot-Shiro学习&quot;&gt;&lt;a href=&quot;#SpringBoot-Shiro学习&quot; class=&quot;headerlink&quot; title=&quot;SpringBoot-Shiro学习&quot;&gt;&lt;/a&gt;SpringBoot-Shiro学习&lt;/h1&gt;&lt;h2 id=&quot;1</summary>
      
    
    
    
    <category term="SpringBoot2" scheme="https://humbledong.github.io/categories/SpringBoot2/"/>
    
    
    <category term="安全" scheme="https://humbledong.github.io/tags/%E5%AE%89%E5%85%A8/"/>
    
    <category term="Shiro" scheme="https://humbledong.github.io/tags/Shiro/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot2-Security</title>
    <link href="https://humbledong.github.io/undefined/6d7b34b1.html"/>
    <id>https://humbledong.github.io/undefined/6d7b34b1.html</id>
    <published>2023-04-20T01:14:20.000Z</published>
    <updated>2024-01-07T11:23:14.837Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot-Security"><a href="#SpringBoot-Security" class="headerlink" title="SpringBoot-Security"></a>SpringBoot-Security</h1><h2 id="1-安全简介"><a href="#1-安全简介" class="headerlink" title="1.安全简介"></a>1.安全简介</h2><p>在 Web 开发中，安全一直是非常重要的一个方面。安全虽然属于应用的非功能性需求，但是应该在应用开发的初期就考虑进来。如果在应用开发的后期才考虑安全的问题，就可能陷入一个两难的境地：一方面，应用存在严重的安全漏洞，无法满足用户的要求，并可能造成用户的隐私数据被攻击者窃取；另一方面，应用的基本架构已经确定，要修复安全漏洞，可能需要对系统的架构做出比较重大的调整，因而需要更多的开发时间，影响应用的发布进程。因此，从应用开发的第一天就应该把安全相关的因素考虑进来，并在整个应用的开发过程中。</p><p>市面上存在比较有名的：Shiro，Spring Security ！</p><p>这里需要阐述一下的是，每一个框架的出现都是为了解决某一问题而产生了，那么Spring Security框架的出现是为了解决什么问题呢？</p><p>首先我们看下它的官网介绍：<a href="https://docs.spring.io/spring-security/reference/index.html">官网地址</a></p><p>Spring Security is a powerful and highly customizable authentication and access-control framework. It is the de-facto standard for securing Spring-based applications.</p><p>Spring Security is a framework that focuses on providing both authentication and authorization to Java applications. Like all Spring projects, the real power of Spring Security is found in how easily it can be extended to meet custom requirements</p><p>Spring Security是一个功能强大且高度可定制的<strong>身份验证和访问控制</strong>框架。它实际上是保护基于spring的应用程序的标准。</p><p>Spring Security是一个框架，侧重于为Java应用程序提供身份验证和授权。与所有Spring项目一样，Spring安全性的真正强大之处在于它可以轻松地扩展以满足定制需求</p><p>从官网的介绍中可以知道这是一个权限框架。想我们之前做项目是没有使用框架是怎么控制权限的？对于权限 一般会细分为功能权限，访问权限，和菜单权限。代码会写的非常的繁琐，冗余。</p><p>怎么解决之前写权限代码繁琐，冗余的问题，一些主流框架就应运而生而Spring Scecurity就是其中的一种。</p><p>Spring 是一个非常流行和成功的 Java 应用开发框架。Spring Security 基于 Spring 框架，提供了一套 Web 应用安全性的完整解决方案。一般来说，Web 应用的安全性包括<strong>用户认证（Authentication）和用户授权（Authorization）</strong>两个部分。用户认证指的是验证某个用户是否为系统中的合法主体，也就是说用户能否访问该系统。用户认证一般要求用户提供用户名和密码。系统通过校验用户名和密码来完成认证过程。用户授权指的是验证某个用户是否有权限执行某个操作。在一个系统中，不同用户所具有的权限是不同的。比如对一个文件来说，有的用户只能进行读取，而有的用户可以进行修改。一般来说，系统会为不同的用户分配不同的角色，而每个角色则对应一系列的权限。</p><p>对于上面提到的两种应用情景，Spring Security 框架都有很好的支持。在用户认证方面，Spring Security 框架支持主流的认证方式，包括 HTTP 基本认证、HTTP 表单验证、HTTP 摘要认证、OpenID 和 LDAP 等。在用户授权方面，Spring Security 提供了基于角色的访问控制和访问控制列表（Access Control List，ACL），可以对应用中的领域对象进行细粒度的控制。</p><h2 id="2-实战"><a href="#2-实战" class="headerlink" title="2.实战"></a>2.实战</h2><h3 id="2-1环境搭建"><a href="#2-1环境搭建" class="headerlink" title="2.1环境搭建"></a>2.1环境搭建</h3><p>1.创建一个新项目springboot-06-security,添加web模块</p><p>引入thymeleaf的启动器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--thymeleaf--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.导入我们的资源</p><p><img src="https://s2.loli.net/2023/04/23/usKNkqD1RoiJyxd.png" alt="image-20230423143104897"></p><p>3.写一个controller实现这些页面的跳转</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ldd.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RouterController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&#123;&quot;/&quot;,&quot;/index&quot;&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">index</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;toLogin&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toLogin</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;views/login&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/level1/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">leve1</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span><span class="type">int</span> id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;views/level1/&quot;</span>+id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/level2/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">leve2</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span><span class="type">int</span> id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;views/level2/&quot;</span>+id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/level3/&#123;id&#125;&quot;)</span>l</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">leve3</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span><span class="type">int</span> id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;views/level3/&quot;</span>+id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到这里环境就ok了！</p><h3 id="2-2认识SpringSecurity"><a href="#2-2认识SpringSecurity" class="headerlink" title="2.2认识SpringSecurity"></a>2.2认识SpringSecurity</h3><p>Spring Security 是针对Spring项目的安全框架，也是Spring Boot底层安全模块默认的技术选型，他可以实现强大的Web安全控制，对于安全控制，我们仅需要引入 spring-boot-starter-security 模块，进行少量的配置，即可实现强大的安全管理！</p><p>记住几个类：</p><ul><li>WebSecurityConfigurerAdapter：自定义Security策略</li><li>AuthenticationManagerBuilder：自定义认证策略</li><li>@EnableWebSecurity：开启WebSecurity模式      @EnableXxxx开启某个功能</li></ul><p>Spring Security的两个主要目标是 “认证” 和 “授权”（访问控制）。</p><p><strong>“认证”（Authentication）</strong></p><p>身份验证是关于验证您的凭据，如用户名&#x2F;用户ID和密码，以验证您的身份。</p><p>身份验证通常通过用户名和密码完成，有时与身份验证因素结合使用。</p><p> <strong>“授权” （Authorization）</strong></p><p>授权发生在系统成功验证您的身份后，最终会授予您访问资源（如信息，文件，数据库，资金，位置，几乎任何内容）的完全权限。</p><p>这个概念是通用的，而不是只在Spring Security 中存在。</p><h3 id="2-3授权"><a href="#2-3授权" class="headerlink" title="2.3授权"></a>2.3授权</h3><p>1.引入SpringSecurity模块</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.编写SpringSecurity配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableWebSecurity</span> <span class="comment">// 开启WebSecurity模式</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.定制授权的规则</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//首页所有人可以访问，功能页只有登陆后对应有权限的人才可以访问</span></span><br><span class="line">        <span class="comment">//请求授权的规则</span></span><br><span class="line">        http.authorizeHttpRequests()</span><br><span class="line">                .antMatchers(<span class="string">&quot;/&quot;</span>).permitAll()</span><br><span class="line">                .antMatchers(<span class="string">&quot;/level1/**&quot;</span>).hasRole(<span class="string">&quot;vip1&quot;</span>)</span><br><span class="line">                .antMatchers(<span class="string">&quot;/level2/**&quot;</span>).hasRole(<span class="string">&quot;vip2&quot;</span>)</span><br><span class="line">                .antMatchers(<span class="string">&quot;/level3/**&quot;</span>).hasRole(<span class="string">&quot;vip3&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//没有权限默认会去登录页面,需要开启登录的页面</span></span><br><span class="line">        http.formLogin();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/04/23/GmenMYbyLRD82jX.png" alt="image-20230423151103316"></p><p><img src="https://s2.loli.net/2023/04/23/8ARDYKjpo9rqczM.png" alt="image-20230423150556724"></p><p>进入formLogin的源码可以看到我们为什么可以直接走到这个登录页，意思是指定支持基于表单的身份验证。如果没有指定formloginconfiguration . loginpage (String)，将生成一个默认的登录页面。<br>示例配置<br>最基本的默认配置是在URL“&#x2F;login”自动生成登录页面，重定向到“&#x2F;login?”身份验证失败时出现“错误”</p><p>重定向到”&#x2F;login?error”页面</p><h3 id="2-4认证"><a href="#2-4认证" class="headerlink" title="2.4认证"></a>2.4认证</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//认证</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">//由于这些数据本应该从数据库中来，但是我现在没用数据库</span></span><br><span class="line">    <span class="comment">//就用假数据，在内存中读就行了</span></span><br><span class="line">    auth.inMemoryAuthentication()</span><br><span class="line">            .withUser(<span class="string">&quot;ldd&quot;</span>).password(<span class="string">&quot;123456&quot;</span>).roles(<span class="string">&quot;vip2&quot;</span>,<span class="string">&quot;vip3&quot;</span>)</span><br><span class="line">            .and()</span><br><span class="line">            .withUser(<span class="string">&quot;admin&quot;</span>).password(<span class="string">&quot;123456&quot;</span>).roles(<span class="string">&quot;vip1&quot;</span>,<span class="string">&quot;vip2&quot;</span>,<span class="string">&quot;vip3&quot;</span>)</span><br><span class="line">            .and()</span><br><span class="line">            .withUser(<span class="string">&quot;jfl&quot;</span>).password(<span class="string">&quot;123456&quot;</span>).roles(<span class="string">&quot;vip1&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在我们去测试登录，直接报了这样一个错误！</p><p><img src="https://s2.loli.net/2023/04/23/uRI2vXchM8mrDBq.png" alt="image-20230423151748692"></p><p>这里就是说，新版的里面，密码没被加密，我们需要给密码添加一个加密规则，因为密码可以通过post请求取出来，不安全，我们加一个加密规则就好了，随便选择一个</p><p><img src="https://s2.loli.net/2023/04/23/MzNZkI7db3xHRhC.png" alt="image-20230423152119548"></p><p>这会登录一个权限比较少的用户，可以发现授权认证已经ok了，是什么角色就只能访问什么页面</p><p>如果权限不够，那么就无法报<strong>403</strong>错误，就是权限不足错误</p><h3 id="2-5注销"><a href="#2-5注销" class="headerlink" title="2.5注销"></a>2.5注销</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//开启注销功能</span></span><br><span class="line">http.logout();</span><br></pre></td></tr></table></figure><p><strong>源码</strong>（不是我说）中说：</p><p>提供注销支持。这是在使用EnableWebSecurity时自动应用的。默认情况下，访问URL“&#x2F;logout”将通过使HTTP会话无效，清除已配置的任何memorme()身份验证，清除SecurityContextHolder，然后重定向到“&#x2F;login?success”来注销用户</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.logout((logout) -&gt;</span><br><span class="line">  logout.deleteCookies(<span class="string">&quot;remove&quot;</span>)</span><br><span class="line">  .invalidateHttpSession(<span class="literal">false</span>)</span><br><span class="line">  .logoutUrl(<span class="string">&quot;/custom-logout&quot;</span>)</span><br><span class="line">  .logoutSuccessUrl(<span class="string">&quot;/logout-success&quot;</span>)</span><br><span class="line">  )</span><br></pre></td></tr></table></figure><p>这样，我们让注销后跳到首页，而不是让他去默认的重定向位置</p><h3 id="2-6首页改进"><a href="#2-6首页改进" class="headerlink" title="2.6首页改进"></a>2.6首页改进</h3><p>这里多了一个需求，我们需要就是什么权限的用户登录就展示他拥有的权限</p><p>导入一个包</p><p>thymeleaf-Security整合包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.thymeleaf.extras/thymeleaf-extras-springsecurity5 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.thymeleaf.extras<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-extras-springsecurity5<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>导入名称空间</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xmlns:sec=&quot;http://www.thymeleaf.org/thymeleaf-extras-springsecurity5&quot;</span><br></pre></td></tr></table></figure><p>什么级别的用户显示什么功能</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;column&quot;</span> <span class="attr">sec:authorize</span>=<span class="string">&quot;hasRole(&#x27;vip1&#x27;)&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里就代表只有vip1用户可以显示该div，其他的不多写了</p><p>注销失效关闭防止网站工具</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//关闭防止网站工具</span></span><br><span class="line">http.csrf().disable();</span><br></pre></td></tr></table></figure><h3 id="2-7记住我和登录页定制"><a href="#2-7记住我和登录页定制" class="headerlink" title="2.7记住我和登录页定制"></a>2.7记住我和登录页定制</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//开启记住我功能</span></span><br><span class="line"><span class="comment">//本质是一个14天的cookie</span></span><br><span class="line">http.rememberMe();</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/04/23/mrIXwRMjidL725E.png" alt="image-20230423171500986"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这样就定制到我们自己的login页面去了</span></span><br><span class="line">http.formLogin().loginPage(<span class="string">&quot;/toLogin&quot;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/04/23/Bzcw8ntfuKhJAEd.png" alt="image-20230423172050761"></p><p>默认是叫username和password,前端如果传的不是这两个值，那么就接收不到，我们也可以自定义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http.formLogin().loginPage(<span class="string">&quot;/toLogin&quot;</span>).usernameParameter(<span class="string">&quot;user&quot;</span>);</span><br></pre></td></tr></table></figure><p>password参数名也一样可以自定义！</p><p>现在把rememberme给写进我们的自定义登录页</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;remember&quot;</span>/&gt;</span> 记住我</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//开启记住我功能</span></span><br><span class="line"><span class="comment">//本质是一个14天的cookie</span></span><br><span class="line"><span class="comment">//自定义接收前端的参数</span></span><br><span class="line">http.rememberMe().rememberMeParameter(<span class="string">&quot;remember&quot;</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;SpringBoot-Security&quot;&gt;&lt;a href=&quot;#SpringBoot-Security&quot; class=&quot;headerlink&quot; title=&quot;SpringBoot-Security&quot;&gt;&lt;/a&gt;SpringBoot-Security&lt;/h1&gt;&lt;h2 i</summary>
      
    
    
    
    <category term="SpringBoot2" scheme="https://humbledong.github.io/categories/SpringBoot2/"/>
    
    
    <category term="SpringSecurity" scheme="https://humbledong.github.io/tags/SpringSecurity/"/>
    
  </entry>
  
</feed>
